// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for libwebp.
class WebPBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WebPBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WebPBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  ffi.Pointer<ffi.Void> WebPMalloc(
    int size,
  ) {
    return _WebPMalloc(
      size,
    );
  }

  late final _WebPMallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'WebPMalloc');
  late final _WebPMalloc =
      _WebPMallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void WebPFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _WebPFree(
      ptr,
    );
  }

  late final _WebPFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'WebPFree');
  late final _WebPFree =
      _WebPFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int WebPGetDecoderVersion() {
    return _WebPGetDecoderVersion();
  }

  late final _WebPGetDecoderVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('WebPGetDecoderVersion');
  late final _WebPGetDecoderVersion =
      _WebPGetDecoderVersionPtr.asFunction<int Function()>();

  int WebPGetInfo(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPGetInfo(
      data,
      data_size,
      width,
      height,
    );
  }

  late final _WebPGetInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('WebPGetInfo');
  late final _WebPGetInfo = _WebPGetInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeRGBA(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPDecodeRGBA(
      data,
      data_size,
      width,
      height,
    );
  }

  late final _WebPDecodeRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('WebPDecodeRGBA');
  late final _WebPDecodeRGBA = _WebPDecodeRGBAPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeARGB(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPDecodeARGB(
      data,
      data_size,
      width,
      height,
    );
  }

  late final _WebPDecodeARGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('WebPDecodeARGB');
  late final _WebPDecodeARGB = _WebPDecodeARGBPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeBGRA(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPDecodeBGRA(
      data,
      data_size,
      width,
      height,
    );
  }

  late final _WebPDecodeBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('WebPDecodeBGRA');
  late final _WebPDecodeBGRA = _WebPDecodeBGRAPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeRGB(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPDecodeRGB(
      data,
      data_size,
      width,
      height,
    );
  }

  late final _WebPDecodeRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('WebPDecodeRGB');
  late final _WebPDecodeRGB = _WebPDecodeRGBPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeBGR(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPDecodeBGR(
      data,
      data_size,
      width,
      height,
    );
  }

  late final _WebPDecodeBGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('WebPDecodeBGR');
  late final _WebPDecodeBGR = _WebPDecodeBGRPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeYUV(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> u,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> v,
    ffi.Pointer<ffi.Int> stride,
    ffi.Pointer<ffi.Int> uv_stride,
  ) {
    return _WebPDecodeYUV(
      data,
      data_size,
      width,
      height,
      u,
      v,
      stride,
      uv_stride,
    );
  }

  late final _WebPDecodeYUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('WebPDecodeYUV');
  late final _WebPDecodeYUV = _WebPDecodeYUVPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeRGBAInto(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> output_buffer,
    int output_buffer_size,
    int output_stride,
  ) {
    return _WebPDecodeRGBAInto(
      data,
      data_size,
      output_buffer,
      output_buffer_size,
      output_stride,
    );
  }

  late final _WebPDecodeRGBAIntoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('WebPDecodeRGBAInto');
  late final _WebPDecodeRGBAInto = _WebPDecodeRGBAIntoPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeARGBInto(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> output_buffer,
    int output_buffer_size,
    int output_stride,
  ) {
    return _WebPDecodeARGBInto(
      data,
      data_size,
      output_buffer,
      output_buffer_size,
      output_stride,
    );
  }

  late final _WebPDecodeARGBIntoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('WebPDecodeARGBInto');
  late final _WebPDecodeARGBInto = _WebPDecodeARGBIntoPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeBGRAInto(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> output_buffer,
    int output_buffer_size,
    int output_stride,
  ) {
    return _WebPDecodeBGRAInto(
      data,
      data_size,
      output_buffer,
      output_buffer_size,
      output_stride,
    );
  }

  late final _WebPDecodeBGRAIntoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('WebPDecodeBGRAInto');
  late final _WebPDecodeBGRAInto = _WebPDecodeBGRAIntoPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeRGBInto(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> output_buffer,
    int output_buffer_size,
    int output_stride,
  ) {
    return _WebPDecodeRGBInto(
      data,
      data_size,
      output_buffer,
      output_buffer_size,
      output_stride,
    );
  }

  late final _WebPDecodeRGBIntoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Int)>>('WebPDecodeRGBInto');
  late final _WebPDecodeRGBInto = _WebPDecodeRGBIntoPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeBGRInto(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> output_buffer,
    int output_buffer_size,
    int output_stride,
  ) {
    return _WebPDecodeBGRInto(
      data,
      data_size,
      output_buffer,
      output_buffer_size,
      output_stride,
    );
  }

  late final _WebPDecodeBGRIntoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Int)>>('WebPDecodeBGRInto');
  late final _WebPDecodeBGRInto = _WebPDecodeBGRIntoPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<ffi.Uint8> WebPDecodeYUVInto(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<ffi.Uint8> luma,
    int luma_size,
    int luma_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_size,
    int u_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_size,
    int v_stride,
  ) {
    return _WebPDecodeYUVInto(
      data,
      data_size,
      luma,
      luma_size,
      luma_stride,
      u,
      u_size,
      u_stride,
      v,
      v_size,
      v_stride,
    );
  }

  late final _WebPDecodeYUVIntoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('WebPDecodeYUVInto');
  late final _WebPDecodeYUVInto = _WebPDecodeYUVIntoPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  int WebPInitDecBufferInternal(
    ffi.Pointer<WebPDecBuffer> arg0,
    int arg1,
  ) {
    return _WebPInitDecBufferInternal(
      arg0,
      arg1,
    );
  }

  late final _WebPInitDecBufferInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPDecBuffer>,
              ffi.Int)>>('WebPInitDecBufferInternal');
  late final _WebPInitDecBufferInternal = _WebPInitDecBufferInternalPtr
      .asFunction<int Function(ffi.Pointer<WebPDecBuffer>, int)>();

  void WebPFreeDecBuffer(
    ffi.Pointer<WebPDecBuffer> buffer,
  ) {
    return _WebPFreeDecBuffer(
      buffer,
    );
  }

  late final _WebPFreeDecBufferPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPDecBuffer>)>>(
      'WebPFreeDecBuffer');
  late final _WebPFreeDecBuffer = _WebPFreeDecBufferPtr.asFunction<
      void Function(ffi.Pointer<WebPDecBuffer>)>();

  ffi.Pointer<WebPIDecoder> WebPINewDecoder(
    ffi.Pointer<WebPDecBuffer> output_buffer,
  ) {
    return _WebPINewDecoder(
      output_buffer,
    );
  }

  late final _WebPINewDecoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPIDecoder> Function(
              ffi.Pointer<WebPDecBuffer>)>>('WebPINewDecoder');
  late final _WebPINewDecoder = _WebPINewDecoderPtr.asFunction<
      ffi.Pointer<WebPIDecoder> Function(ffi.Pointer<WebPDecBuffer>)>();

  ffi.Pointer<WebPIDecoder> WebPINewRGB(
    WEBP_CSP_MODE csp,
    ffi.Pointer<ffi.Uint8> output_buffer,
    int output_buffer_size,
    int output_stride,
  ) {
    return _WebPINewRGB(
      csp.value,
      output_buffer,
      output_buffer_size,
      output_stride,
    );
  }

  late final _WebPINewRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPIDecoder> Function(ffi.UnsignedInt,
              ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Int)>>('WebPINewRGB');
  late final _WebPINewRGB = _WebPINewRGBPtr.asFunction<
      ffi.Pointer<WebPIDecoder> Function(
          int, ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<WebPIDecoder> WebPINewYUVA(
    ffi.Pointer<ffi.Uint8> luma,
    int luma_size,
    int luma_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_size,
    int u_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_size,
    int v_stride,
    ffi.Pointer<ffi.Uint8> a,
    int a_size,
    int a_stride,
  ) {
    return _WebPINewYUVA(
      luma,
      luma_size,
      luma_stride,
      u,
      u_size,
      u_stride,
      v,
      v_size,
      v_stride,
      a,
      a_size,
      a_stride,
    );
  }

  late final _WebPINewYUVAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPIDecoder> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('WebPINewYUVA');
  late final _WebPINewYUVA = _WebPINewYUVAPtr.asFunction<
      ffi.Pointer<WebPIDecoder> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  ffi.Pointer<WebPIDecoder> WebPINewYUV(
    ffi.Pointer<ffi.Uint8> luma,
    int luma_size,
    int luma_stride,
    ffi.Pointer<ffi.Uint8> u,
    int u_size,
    int u_stride,
    ffi.Pointer<ffi.Uint8> v,
    int v_size,
    int v_stride,
  ) {
    return _WebPINewYUV(
      luma,
      luma_size,
      luma_stride,
      u,
      u_size,
      u_stride,
      v,
      v_size,
      v_stride,
    );
  }

  late final _WebPINewYUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPIDecoder> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('WebPINewYUV');
  late final _WebPINewYUV = _WebPINewYUVPtr.asFunction<
      ffi.Pointer<WebPIDecoder> Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int)>();

  void WebPIDelete(
    ffi.Pointer<WebPIDecoder> idec,
  ) {
    return _WebPIDelete(
      idec,
    );
  }

  late final _WebPIDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPIDecoder>)>>(
          'WebPIDelete');
  late final _WebPIDelete =
      _WebPIDeletePtr.asFunction<void Function(ffi.Pointer<WebPIDecoder>)>();

  VP8StatusCode WebPIAppend(
    ffi.Pointer<WebPIDecoder> idec,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return VP8StatusCode.fromValue(_WebPIAppend(
      idec,
      data,
      data_size,
    ));
  }

  late final _WebPIAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<WebPIDecoder>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('WebPIAppend');
  late final _WebPIAppend = _WebPIAppendPtr.asFunction<
      int Function(ffi.Pointer<WebPIDecoder>, ffi.Pointer<ffi.Uint8>, int)>();

  VP8StatusCode WebPIUpdate(
    ffi.Pointer<WebPIDecoder> idec,
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
  ) {
    return VP8StatusCode.fromValue(_WebPIUpdate(
      idec,
      data,
      data_size,
    ));
  }

  late final _WebPIUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<WebPIDecoder>,
              ffi.Pointer<ffi.Uint8>, ffi.Size)>>('WebPIUpdate');
  late final _WebPIUpdate = _WebPIUpdatePtr.asFunction<
      int Function(ffi.Pointer<WebPIDecoder>, ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Uint8> WebPIDecGetRGB(
    ffi.Pointer<WebPIDecoder> idec,
    ffi.Pointer<ffi.Int> last_y,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
    ffi.Pointer<ffi.Int> stride,
  ) {
    return _WebPIDecGetRGB(
      idec,
      last_y,
      width,
      height,
      stride,
    );
  }

  late final _WebPIDecGetRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<WebPIDecoder>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('WebPIDecGetRGB');
  late final _WebPIDecGetRGB = _WebPIDecGetRGBPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<WebPIDecoder>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Uint8> WebPIDecGetYUVA(
    ffi.Pointer<WebPIDecoder> idec,
    ffi.Pointer<ffi.Int> last_y,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> u,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> v,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> a,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
    ffi.Pointer<ffi.Int> stride,
    ffi.Pointer<ffi.Int> uv_stride,
    ffi.Pointer<ffi.Int> a_stride,
  ) {
    return _WebPIDecGetYUVA(
      idec,
      last_y,
      u,
      v,
      a,
      width,
      height,
      stride,
      uv_stride,
      a_stride,
    );
  }

  late final _WebPIDecGetYUVAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<WebPIDecoder>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('WebPIDecGetYUVA');
  late final _WebPIDecGetYUVA = _WebPIDecGetYUVAPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<WebPIDecoder>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<WebPDecBuffer> WebPIDecodedArea(
    ffi.Pointer<WebPIDecoder> idec,
    ffi.Pointer<ffi.Int> left,
    ffi.Pointer<ffi.Int> top,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _WebPIDecodedArea(
      idec,
      left,
      top,
      width,
      height,
    );
  }

  late final _WebPIDecodedAreaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPDecBuffer> Function(
              ffi.Pointer<WebPIDecoder>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('WebPIDecodedArea');
  late final _WebPIDecodedArea = _WebPIDecodedAreaPtr.asFunction<
      ffi.Pointer<WebPDecBuffer> Function(
          ffi.Pointer<WebPIDecoder>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  VP8StatusCode WebPGetFeaturesInternal(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
    ffi.Pointer<WebPBitstreamFeatures> arg2,
    int arg3,
  ) {
    return VP8StatusCode.fromValue(_WebPGetFeaturesInternal(
      arg0,
      arg1,
      arg2,
      arg3,
    ));
  }

  late final _WebPGetFeaturesInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<WebPBitstreamFeatures>,
              ffi.Int)>>('WebPGetFeaturesInternal');
  late final _WebPGetFeaturesInternal = _WebPGetFeaturesInternalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<WebPBitstreamFeatures>, int)>();

  int WebPInitDecoderConfigInternal(
    ffi.Pointer<WebPDecoderConfig> arg0,
    int arg1,
  ) {
    return _WebPInitDecoderConfigInternal(
      arg0,
      arg1,
    );
  }

  late final _WebPInitDecoderConfigInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPDecoderConfig>,
              ffi.Int)>>('WebPInitDecoderConfigInternal');
  late final _WebPInitDecoderConfigInternal = _WebPInitDecoderConfigInternalPtr
      .asFunction<int Function(ffi.Pointer<WebPDecoderConfig>, int)>();

  ffi.Pointer<WebPIDecoder> WebPIDecode(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<WebPDecoderConfig> config,
  ) {
    return _WebPIDecode(
      data,
      data_size,
      config,
    );
  }

  late final _WebPIDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPIDecoder> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<WebPDecoderConfig>)>>('WebPIDecode');
  late final _WebPIDecode = _WebPIDecodePtr.asFunction<
      ffi.Pointer<WebPIDecoder> Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<WebPDecoderConfig>)>();

  VP8StatusCode WebPDecode(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<WebPDecoderConfig> config,
  ) {
    return VP8StatusCode.fromValue(_WebPDecode(
      data,
      data_size,
      config,
    ));
  }

  late final _WebPDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<WebPDecoderConfig>)>>('WebPDecode');
  late final _WebPDecode = _WebPDecodePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<WebPDecoderConfig>)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  int WebPGetDemuxVersion() {
    return _WebPGetDemuxVersion();
  }

  late final _WebPGetDemuxVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('WebPGetDemuxVersion');
  late final _WebPGetDemuxVersion =
      _WebPGetDemuxVersionPtr.asFunction<int Function()>();

  ffi.Pointer<WebPDemuxer> WebPDemuxInternal(
    ffi.Pointer<WebPData> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
  ) {
    return _WebPDemuxInternal(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _WebPDemuxInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPDemuxer> Function(ffi.Pointer<WebPData>, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('WebPDemuxInternal');
  late final _WebPDemuxInternal = _WebPDemuxInternalPtr.asFunction<
      ffi.Pointer<WebPDemuxer> Function(
          ffi.Pointer<WebPData>, int, ffi.Pointer<ffi.Int>, int)>();

  void WebPDemuxDelete(
    ffi.Pointer<WebPDemuxer> dmux,
  ) {
    return _WebPDemuxDelete(
      dmux,
    );
  }

  late final _WebPDemuxDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPDemuxer>)>>(
          'WebPDemuxDelete');
  late final _WebPDemuxDelete =
      _WebPDemuxDeletePtr.asFunction<void Function(ffi.Pointer<WebPDemuxer>)>();

  int WebPDemuxGetI(
    ffi.Pointer<WebPDemuxer> dmux,
    WebPFormatFeature feature,
  ) {
    return _WebPDemuxGetI(
      dmux,
      feature.value,
    );
  }

  late final _WebPDemuxGetIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<WebPDemuxer>, ffi.UnsignedInt)>>('WebPDemuxGetI');
  late final _WebPDemuxGetI = _WebPDemuxGetIPtr.asFunction<
      int Function(ffi.Pointer<WebPDemuxer>, int)>();

  int WebPDemuxGetFrame(
    ffi.Pointer<WebPDemuxer> dmux,
    int frame_number,
    ffi.Pointer<WebPIterator> iter,
  ) {
    return _WebPDemuxGetFrame(
      dmux,
      frame_number,
      iter,
    );
  }

  late final _WebPDemuxGetFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPDemuxer>, ffi.Int,
              ffi.Pointer<WebPIterator>)>>('WebPDemuxGetFrame');
  late final _WebPDemuxGetFrame = _WebPDemuxGetFramePtr.asFunction<
      int Function(ffi.Pointer<WebPDemuxer>, int, ffi.Pointer<WebPIterator>)>();

  int WebPDemuxNextFrame(
    ffi.Pointer<WebPIterator> iter,
  ) {
    return _WebPDemuxNextFrame(
      iter,
    );
  }

  late final _WebPDemuxNextFramePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPIterator>)>>(
          'WebPDemuxNextFrame');
  late final _WebPDemuxNextFrame = _WebPDemuxNextFramePtr.asFunction<
      int Function(ffi.Pointer<WebPIterator>)>();

  int WebPDemuxPrevFrame(
    ffi.Pointer<WebPIterator> iter,
  ) {
    return _WebPDemuxPrevFrame(
      iter,
    );
  }

  late final _WebPDemuxPrevFramePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPIterator>)>>(
          'WebPDemuxPrevFrame');
  late final _WebPDemuxPrevFrame = _WebPDemuxPrevFramePtr.asFunction<
      int Function(ffi.Pointer<WebPIterator>)>();

  void WebPDemuxReleaseIterator(
    ffi.Pointer<WebPIterator> iter,
  ) {
    return _WebPDemuxReleaseIterator(
      iter,
    );
  }

  late final _WebPDemuxReleaseIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPIterator>)>>(
          'WebPDemuxReleaseIterator');
  late final _WebPDemuxReleaseIterator = _WebPDemuxReleaseIteratorPtr
      .asFunction<void Function(ffi.Pointer<WebPIterator>)>();

  int WebPDemuxGetChunk(
    ffi.Pointer<WebPDemuxer> dmux,
    ffi.Pointer<ffi.Char> fourcc,
    int chunk_number,
    ffi.Pointer<WebPChunkIterator> iter,
  ) {
    return _WebPDemuxGetChunk(
      dmux,
      fourcc,
      chunk_number,
      iter,
    );
  }

  late final _WebPDemuxGetChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPDemuxer>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<WebPChunkIterator>)>>('WebPDemuxGetChunk');
  late final _WebPDemuxGetChunk = _WebPDemuxGetChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPDemuxer>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<WebPChunkIterator>)>();

  int WebPDemuxNextChunk(
    ffi.Pointer<WebPChunkIterator> iter,
  ) {
    return _WebPDemuxNextChunk(
      iter,
    );
  }

  late final _WebPDemuxNextChunkPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPChunkIterator>)>>(
      'WebPDemuxNextChunk');
  late final _WebPDemuxNextChunk = _WebPDemuxNextChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPChunkIterator>)>();

  int WebPDemuxPrevChunk(
    ffi.Pointer<WebPChunkIterator> iter,
  ) {
    return _WebPDemuxPrevChunk(
      iter,
    );
  }

  late final _WebPDemuxPrevChunkPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPChunkIterator>)>>(
      'WebPDemuxPrevChunk');
  late final _WebPDemuxPrevChunk = _WebPDemuxPrevChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPChunkIterator>)>();

  void WebPDemuxReleaseChunkIterator(
    ffi.Pointer<WebPChunkIterator> iter,
  ) {
    return _WebPDemuxReleaseChunkIterator(
      iter,
    );
  }

  late final _WebPDemuxReleaseChunkIteratorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<WebPChunkIterator>)>>(
      'WebPDemuxReleaseChunkIterator');
  late final _WebPDemuxReleaseChunkIterator = _WebPDemuxReleaseChunkIteratorPtr
      .asFunction<void Function(ffi.Pointer<WebPChunkIterator>)>();

  int WebPAnimDecoderOptionsInitInternal(
    ffi.Pointer<WebPAnimDecoderOptions> arg0,
    int arg1,
  ) {
    return _WebPAnimDecoderOptionsInitInternal(
      arg0,
      arg1,
    );
  }

  late final _WebPAnimDecoderOptionsInitInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimDecoderOptions>,
              ffi.Int)>>('WebPAnimDecoderOptionsInitInternal');
  late final _WebPAnimDecoderOptionsInitInternal =
      _WebPAnimDecoderOptionsInitInternalPtr.asFunction<
          int Function(ffi.Pointer<WebPAnimDecoderOptions>, int)>();

  ffi.Pointer<WebPAnimDecoder> WebPAnimDecoderNewInternal(
    ffi.Pointer<WebPData> arg0,
    ffi.Pointer<WebPAnimDecoderOptions> arg1,
    int arg2,
  ) {
    return _WebPAnimDecoderNewInternal(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _WebPAnimDecoderNewInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPAnimDecoder> Function(
              ffi.Pointer<WebPData>,
              ffi.Pointer<WebPAnimDecoderOptions>,
              ffi.Int)>>('WebPAnimDecoderNewInternal');
  late final _WebPAnimDecoderNewInternal =
      _WebPAnimDecoderNewInternalPtr.asFunction<
          ffi.Pointer<WebPAnimDecoder> Function(ffi.Pointer<WebPData>,
              ffi.Pointer<WebPAnimDecoderOptions>, int)>();

  int WebPAnimDecoderGetInfo(
    ffi.Pointer<WebPAnimDecoder> dec,
    ffi.Pointer<WebPAnimInfo> info,
  ) {
    return _WebPAnimDecoderGetInfo(
      dec,
      info,
    );
  }

  late final _WebPAnimDecoderGetInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimDecoder>,
              ffi.Pointer<WebPAnimInfo>)>>('WebPAnimDecoderGetInfo');
  late final _WebPAnimDecoderGetInfo = _WebPAnimDecoderGetInfoPtr.asFunction<
      int Function(ffi.Pointer<WebPAnimDecoder>, ffi.Pointer<WebPAnimInfo>)>();

  int WebPAnimDecoderGetNext(
    ffi.Pointer<WebPAnimDecoder> dec,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buf,
    ffi.Pointer<ffi.Int> timestamp,
  ) {
    return _WebPAnimDecoderGetNext(
      dec,
      buf,
      timestamp,
    );
  }

  late final _WebPAnimDecoderGetNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WebPAnimDecoder>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int>)>>('WebPAnimDecoderGetNext');
  late final _WebPAnimDecoderGetNext = _WebPAnimDecoderGetNextPtr.asFunction<
      int Function(ffi.Pointer<WebPAnimDecoder>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.Int>)>();

  int WebPAnimDecoderHasMoreFrames(
    ffi.Pointer<WebPAnimDecoder> dec,
  ) {
    return _WebPAnimDecoderHasMoreFrames(
      dec,
    );
  }

  late final _WebPAnimDecoderHasMoreFramesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPAnimDecoder>)>>(
      'WebPAnimDecoderHasMoreFrames');
  late final _WebPAnimDecoderHasMoreFrames = _WebPAnimDecoderHasMoreFramesPtr
      .asFunction<int Function(ffi.Pointer<WebPAnimDecoder>)>();

  void WebPAnimDecoderReset(
    ffi.Pointer<WebPAnimDecoder> dec,
  ) {
    return _WebPAnimDecoderReset(
      dec,
    );
  }

  late final _WebPAnimDecoderResetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPAnimDecoder>)>>(
      'WebPAnimDecoderReset');
  late final _WebPAnimDecoderReset = _WebPAnimDecoderResetPtr.asFunction<
      void Function(ffi.Pointer<WebPAnimDecoder>)>();

  ffi.Pointer<WebPDemuxer> WebPAnimDecoderGetDemuxer(
    ffi.Pointer<WebPAnimDecoder> dec,
  ) {
    return _WebPAnimDecoderGetDemuxer(
      dec,
    );
  }

  late final _WebPAnimDecoderGetDemuxerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPDemuxer> Function(
              ffi.Pointer<WebPAnimDecoder>)>>('WebPAnimDecoderGetDemuxer');
  late final _WebPAnimDecoderGetDemuxer =
      _WebPAnimDecoderGetDemuxerPtr.asFunction<
          ffi.Pointer<WebPDemuxer> Function(ffi.Pointer<WebPAnimDecoder>)>();

  void WebPAnimDecoderDelete(
    ffi.Pointer<WebPAnimDecoder> dec,
  ) {
    return _WebPAnimDecoderDelete(
      dec,
    );
  }

  late final _WebPAnimDecoderDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPAnimDecoder>)>>(
      'WebPAnimDecoderDelete');
  late final _WebPAnimDecoderDelete = _WebPAnimDecoderDeletePtr.asFunction<
      void Function(ffi.Pointer<WebPAnimDecoder>)>();

  int WebPGetEncoderVersion() {
    return _WebPGetEncoderVersion();
  }

  late final _WebPGetEncoderVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('WebPGetEncoderVersion');
  late final _WebPGetEncoderVersion =
      _WebPGetEncoderVersionPtr.asFunction<int Function()>();

  int WebPEncodeRGB(
    ffi.Pointer<ffi.Uint8> rgb,
    int width,
    int height,
    int stride,
    double quality_factor,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeRGB(
      rgb,
      width,
      height,
      stride,
      quality_factor,
      output,
    );
  }

  late final _WebPEncodeRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeRGB');
  late final _WebPEncodeRGB = _WebPEncodeRGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, double,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeBGR(
    ffi.Pointer<ffi.Uint8> bgr,
    int width,
    int height,
    int stride,
    double quality_factor,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeBGR(
      bgr,
      width,
      height,
      stride,
      quality_factor,
      output,
    );
  }

  late final _WebPEncodeBGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeBGR');
  late final _WebPEncodeBGR = _WebPEncodeBGRPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, double,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeRGBA(
    ffi.Pointer<ffi.Uint8> rgba,
    int width,
    int height,
    int stride,
    double quality_factor,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeRGBA(
      rgba,
      width,
      height,
      stride,
      quality_factor,
      output,
    );
  }

  late final _WebPEncodeRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeRGBA');
  late final _WebPEncodeRGBA = _WebPEncodeRGBAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, double,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeBGRA(
    ffi.Pointer<ffi.Uint8> bgra,
    int width,
    int height,
    int stride,
    double quality_factor,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeBGRA(
      bgra,
      width,
      height,
      stride,
      quality_factor,
      output,
    );
  }

  late final _WebPEncodeBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeBGRA');
  late final _WebPEncodeBGRA = _WebPEncodeBGRAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int, double,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeLosslessRGB(
    ffi.Pointer<ffi.Uint8> rgb,
    int width,
    int height,
    int stride,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeLosslessRGB(
      rgb,
      width,
      height,
      stride,
      output,
    );
  }

  late final _WebPEncodeLosslessRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeLosslessRGB');
  late final _WebPEncodeLosslessRGB = _WebPEncodeLosslessRGBPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeLosslessBGR(
    ffi.Pointer<ffi.Uint8> bgr,
    int width,
    int height,
    int stride,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeLosslessBGR(
      bgr,
      width,
      height,
      stride,
      output,
    );
  }

  late final _WebPEncodeLosslessBGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeLosslessBGR');
  late final _WebPEncodeLosslessBGR = _WebPEncodeLosslessBGRPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeLosslessRGBA(
    ffi.Pointer<ffi.Uint8> rgba,
    int width,
    int height,
    int stride,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeLosslessRGBA(
      rgba,
      width,
      height,
      stride,
      output,
    );
  }

  late final _WebPEncodeLosslessRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeLosslessRGBA');
  late final _WebPEncodeLosslessRGBA = _WebPEncodeLosslessRGBAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPEncodeLosslessBGRA(
    ffi.Pointer<ffi.Uint8> bgra,
    int width,
    int height,
    int stride,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> output,
  ) {
    return _WebPEncodeLosslessBGRA(
      bgra,
      width,
      height,
      stride,
      output,
    );
  }

  late final _WebPEncodeLosslessBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('WebPEncodeLosslessBGRA');
  late final _WebPEncodeLosslessBGRA = _WebPEncodeLosslessBGRAPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int WebPConfigInitInternal(
    ffi.Pointer<WebPConfig> arg0,
    WebPPreset arg1,
    double arg2,
    int arg3,
  ) {
    return _WebPConfigInitInternal(
      arg0,
      arg1.value,
      arg2,
      arg3,
    );
  }

  late final _WebPConfigInitInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPConfig>, ffi.UnsignedInt, ffi.Float,
              ffi.Int)>>('WebPConfigInitInternal');
  late final _WebPConfigInitInternal = _WebPConfigInitInternalPtr.asFunction<
      int Function(ffi.Pointer<WebPConfig>, int, double, int)>();

  int WebPConfigLosslessPreset(
    ffi.Pointer<WebPConfig> config,
    int level,
  ) {
    return _WebPConfigLosslessPreset(
      config,
      level,
    );
  }

  late final _WebPConfigLosslessPresetPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<WebPConfig>, ffi.Int)>>(
      'WebPConfigLosslessPreset');
  late final _WebPConfigLosslessPreset = _WebPConfigLosslessPresetPtr
      .asFunction<int Function(ffi.Pointer<WebPConfig>, int)>();

  int WebPValidateConfig(
    ffi.Pointer<WebPConfig> config,
  ) {
    return _WebPValidateConfig(
      config,
    );
  }

  late final _WebPValidateConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPConfig>)>>(
          'WebPValidateConfig');
  late final _WebPValidateConfig = _WebPValidateConfigPtr.asFunction<
      int Function(ffi.Pointer<WebPConfig>)>();

  void WebPMemoryWriterInit(
    ffi.Pointer<WebPMemoryWriter> writer,
  ) {
    return _WebPMemoryWriterInit(
      writer,
    );
  }

  late final _WebPMemoryWriterInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPMemoryWriter>)>>(
      'WebPMemoryWriterInit');
  late final _WebPMemoryWriterInit = _WebPMemoryWriterInitPtr.asFunction<
      void Function(ffi.Pointer<WebPMemoryWriter>)>();

  void WebPMemoryWriterClear(
    ffi.Pointer<WebPMemoryWriter> writer,
  ) {
    return _WebPMemoryWriterClear(
      writer,
    );
  }

  late final _WebPMemoryWriterClearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPMemoryWriter>)>>(
      'WebPMemoryWriterClear');
  late final _WebPMemoryWriterClear = _WebPMemoryWriterClearPtr.asFunction<
      void Function(ffi.Pointer<WebPMemoryWriter>)>();

  int WebPMemoryWrite(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPMemoryWrite(
      data,
      data_size,
      picture,
    );
  }

  late final _WebPMemoryWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Pointer<WebPPicture>)>>('WebPMemoryWrite');
  late final _WebPMemoryWrite = _WebPMemoryWritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<WebPPicture>)>();

  int WebPPictureInitInternal(
    ffi.Pointer<WebPPicture> arg0,
    int arg1,
  ) {
    return _WebPPictureInitInternal(
      arg0,
      arg1,
    );
  }

  late final _WebPPictureInitInternalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Int)>>(
      'WebPPictureInitInternal');
  late final _WebPPictureInitInternal = _WebPPictureInitInternalPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, int)>();

  int WebPPictureAlloc(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureAlloc(
      picture,
    );
  }

  late final _WebPPictureAllocPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureAlloc');
  late final _WebPPictureAlloc =
      _WebPPictureAllocPtr.asFunction<int Function(ffi.Pointer<WebPPicture>)>();

  void WebPPictureFree(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureFree(
      picture,
    );
  }

  late final _WebPPictureFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureFree');
  late final _WebPPictureFree =
      _WebPPictureFreePtr.asFunction<void Function(ffi.Pointer<WebPPicture>)>();

  int WebPPictureCopy(
    ffi.Pointer<WebPPicture> src,
    ffi.Pointer<WebPPicture> dst,
  ) {
    return _WebPPictureCopy(
      src,
      dst,
    );
  }

  late final _WebPPictureCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>,
              ffi.Pointer<WebPPicture>)>>('WebPPictureCopy');
  late final _WebPPictureCopy = _WebPPictureCopyPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<WebPPicture>)>();

  int WebPPlaneDistortion(
    ffi.Pointer<ffi.Uint8> src,
    int src_stride,
    ffi.Pointer<ffi.Uint8> ref,
    int ref_stride,
    int width,
    int height,
    int x_step,
    int type,
    ffi.Pointer<ffi.Float> distortion,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _WebPPlaneDistortion(
      src,
      src_stride,
      ref,
      ref_stride,
      width,
      height,
      x_step,
      type,
      distortion,
      result,
    );
  }

  late final _WebPPlaneDistortionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int,
              ffi.Int,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('WebPPlaneDistortion');
  late final _WebPPlaneDistortion = _WebPPlaneDistortionPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  int WebPPictureDistortion(
    ffi.Pointer<WebPPicture> src,
    ffi.Pointer<WebPPicture> ref,
    int metric_type,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _WebPPictureDistortion(
      src,
      ref,
      metric_type,
      result,
    );
  }

  late final _WebPPictureDistortionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<WebPPicture>,
              ffi.Int, ffi.Pointer<ffi.Float>)>>('WebPPictureDistortion');
  late final _WebPPictureDistortion = _WebPPictureDistortionPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<WebPPicture>, int,
          ffi.Pointer<ffi.Float>)>();

  int WebPPictureCrop(
    ffi.Pointer<WebPPicture> picture,
    int left,
    int top,
    int width,
    int height,
  ) {
    return _WebPPictureCrop(
      picture,
      left,
      top,
      width,
      height,
    );
  }

  late final _WebPPictureCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('WebPPictureCrop');
  late final _WebPPictureCrop = _WebPPictureCropPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, int, int, int, int)>();

  int WebPPictureView(
    ffi.Pointer<WebPPicture> src,
    int left,
    int top,
    int width,
    int height,
    ffi.Pointer<WebPPicture> dst,
  ) {
    return _WebPPictureView(
      src,
      left,
      top,
      width,
      height,
      dst,
    );
  }

  late final _WebPPictureViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<WebPPicture>)>>('WebPPictureView');
  late final _WebPPictureView = _WebPPictureViewPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, int, int, int, int,
          ffi.Pointer<WebPPicture>)>();

  int WebPPictureIsView(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureIsView(
      picture,
    );
  }

  late final _WebPPictureIsViewPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureIsView');
  late final _WebPPictureIsView = _WebPPictureIsViewPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>)>();

  int WebPPictureRescale(
    ffi.Pointer<WebPPicture> picture,
    int width,
    int height,
  ) {
    return _WebPPictureRescale(
      picture,
      width,
      height,
    );
  }

  late final _WebPPictureRescalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Int,
              ffi.Int)>>('WebPPictureRescale');
  late final _WebPPictureRescale = _WebPPictureRescalePtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, int, int)>();

  int WebPPictureImportRGB(
    ffi.Pointer<WebPPicture> picture,
    ffi.Pointer<ffi.Uint8> rgb,
    int rgb_stride,
  ) {
    return _WebPPictureImportRGB(
      picture,
      rgb,
      rgb_stride,
    );
  }

  late final _WebPPictureImportRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('WebPPictureImportRGB');
  late final _WebPPictureImportRGB = _WebPPictureImportRGBPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>, int)>();

  int WebPPictureImportRGBA(
    ffi.Pointer<WebPPicture> picture,
    ffi.Pointer<ffi.Uint8> rgba,
    int rgba_stride,
  ) {
    return _WebPPictureImportRGBA(
      picture,
      rgba,
      rgba_stride,
    );
  }

  late final _WebPPictureImportRGBAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('WebPPictureImportRGBA');
  late final _WebPPictureImportRGBA = _WebPPictureImportRGBAPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>, int)>();

  int WebPPictureImportRGBX(
    ffi.Pointer<WebPPicture> picture,
    ffi.Pointer<ffi.Uint8> rgbx,
    int rgbx_stride,
  ) {
    return _WebPPictureImportRGBX(
      picture,
      rgbx,
      rgbx_stride,
    );
  }

  late final _WebPPictureImportRGBXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('WebPPictureImportRGBX');
  late final _WebPPictureImportRGBX = _WebPPictureImportRGBXPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>, int)>();

  int WebPPictureImportBGR(
    ffi.Pointer<WebPPicture> picture,
    ffi.Pointer<ffi.Uint8> bgr,
    int bgr_stride,
  ) {
    return _WebPPictureImportBGR(
      picture,
      bgr,
      bgr_stride,
    );
  }

  late final _WebPPictureImportBGRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('WebPPictureImportBGR');
  late final _WebPPictureImportBGR = _WebPPictureImportBGRPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>, int)>();

  int WebPPictureImportBGRA(
    ffi.Pointer<WebPPicture> picture,
    ffi.Pointer<ffi.Uint8> bgra,
    int bgra_stride,
  ) {
    return _WebPPictureImportBGRA(
      picture,
      bgra,
      bgra_stride,
    );
  }

  late final _WebPPictureImportBGRAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('WebPPictureImportBGRA');
  late final _WebPPictureImportBGRA = _WebPPictureImportBGRAPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>, int)>();

  int WebPPictureImportBGRX(
    ffi.Pointer<WebPPicture> picture,
    ffi.Pointer<ffi.Uint8> bgrx,
    int bgrx_stride,
  ) {
    return _WebPPictureImportBGRX(
      picture,
      bgrx,
      bgrx_stride,
    );
  }

  late final _WebPPictureImportBGRXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('WebPPictureImportBGRX');
  late final _WebPPictureImportBGRX = _WebPPictureImportBGRXPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, ffi.Pointer<ffi.Uint8>, int)>();

  int WebPPictureARGBToYUVA(
    ffi.Pointer<WebPPicture> picture,
    WebPEncCSP arg1,
  ) {
    return _WebPPictureARGBToYUVA(
      picture,
      arg1.value,
    );
  }

  late final _WebPPictureARGBToYUVAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>,
              ffi.UnsignedInt)>>('WebPPictureARGBToYUVA');
  late final _WebPPictureARGBToYUVA = _WebPPictureARGBToYUVAPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>, int)>();

  int WebPPictureARGBToYUVADithered(
    ffi.Pointer<WebPPicture> picture,
    WebPEncCSP colorspace,
    double dithering,
  ) {
    return _WebPPictureARGBToYUVADithered(
      picture,
      colorspace.value,
      dithering,
    );
  }

  late final _WebPPictureARGBToYUVADitheredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPPicture>, ffi.UnsignedInt,
              ffi.Float)>>('WebPPictureARGBToYUVADithered');
  late final _WebPPictureARGBToYUVADithered = _WebPPictureARGBToYUVADitheredPtr
      .asFunction<int Function(ffi.Pointer<WebPPicture>, int, double)>();

  int WebPPictureSharpARGBToYUVA(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureSharpARGBToYUVA(
      picture,
    );
  }

  late final _WebPPictureSharpARGBToYUVAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureSharpARGBToYUVA');
  late final _WebPPictureSharpARGBToYUVA = _WebPPictureSharpARGBToYUVAPtr
      .asFunction<int Function(ffi.Pointer<WebPPicture>)>();

  int WebPPictureSmartARGBToYUVA(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureSmartARGBToYUVA(
      picture,
    );
  }

  late final _WebPPictureSmartARGBToYUVAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureSmartARGBToYUVA');
  late final _WebPPictureSmartARGBToYUVA = _WebPPictureSmartARGBToYUVAPtr
      .asFunction<int Function(ffi.Pointer<WebPPicture>)>();

  int WebPPictureYUVAToARGB(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureYUVAToARGB(
      picture,
    );
  }

  late final _WebPPictureYUVAToARGBPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureYUVAToARGB');
  late final _WebPPictureYUVAToARGB = _WebPPictureYUVAToARGBPtr.asFunction<
      int Function(ffi.Pointer<WebPPicture>)>();

  void WebPCleanupTransparentArea(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPCleanupTransparentArea(
      picture,
    );
  }

  late final _WebPCleanupTransparentAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPPicture>)>>(
          'WebPCleanupTransparentArea');
  late final _WebPCleanupTransparentArea = _WebPCleanupTransparentAreaPtr
      .asFunction<void Function(ffi.Pointer<WebPPicture>)>();

  int WebPPictureHasTransparency(
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPPictureHasTransparency(
      picture,
    );
  }

  late final _WebPPictureHasTransparencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<WebPPicture>)>>(
          'WebPPictureHasTransparency');
  late final _WebPPictureHasTransparency = _WebPPictureHasTransparencyPtr
      .asFunction<int Function(ffi.Pointer<WebPPicture>)>();

  void WebPBlendAlpha(
    ffi.Pointer<WebPPicture> picture,
    int background_rgb,
  ) {
    return _WebPBlendAlpha(
      picture,
      background_rgb,
    );
  }

  late final _WebPBlendAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<WebPPicture>, ffi.Uint32)>>('WebPBlendAlpha');
  late final _WebPBlendAlpha = _WebPBlendAlphaPtr.asFunction<
      void Function(ffi.Pointer<WebPPicture>, int)>();

  int WebPEncode(
    ffi.Pointer<WebPConfig> config,
    ffi.Pointer<WebPPicture> picture,
  ) {
    return _WebPEncode(
      config,
      picture,
    );
  }

  late final _WebPEncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPConfig>,
              ffi.Pointer<WebPPicture>)>>('WebPEncode');
  late final _WebPEncode = _WebPEncodePtr.asFunction<
      int Function(ffi.Pointer<WebPConfig>, ffi.Pointer<WebPPicture>)>();

  int WebPGetMuxVersion() {
    return _WebPGetMuxVersion();
  }

  late final _WebPGetMuxVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('WebPGetMuxVersion');
  late final _WebPGetMuxVersion =
      _WebPGetMuxVersionPtr.asFunction<int Function()>();

  ffi.Pointer<WebPMux> WebPNewInternal(
    int arg0,
  ) {
    return _WebPNewInternal(
      arg0,
    );
  }

  late final _WebPNewInternalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<WebPMux> Function(ffi.Int)>>(
          'WebPNewInternal');
  late final _WebPNewInternal =
      _WebPNewInternalPtr.asFunction<ffi.Pointer<WebPMux> Function(int)>();

  void WebPMuxDelete(
    ffi.Pointer<WebPMux> mux,
  ) {
    return _WebPMuxDelete(
      mux,
    );
  }

  late final _WebPMuxDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPMux>)>>(
          'WebPMuxDelete');
  late final _WebPMuxDelete =
      _WebPMuxDeletePtr.asFunction<void Function(ffi.Pointer<WebPMux>)>();

  ffi.Pointer<WebPMux> WebPMuxCreateInternal(
    ffi.Pointer<WebPData> arg0,
    int arg1,
    int arg2,
  ) {
    return _WebPMuxCreateInternal(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _WebPMuxCreateInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPMux> Function(ffi.Pointer<WebPData>, ffi.Int,
              ffi.Int)>>('WebPMuxCreateInternal');
  late final _WebPMuxCreateInternal = _WebPMuxCreateInternalPtr.asFunction<
      ffi.Pointer<WebPMux> Function(ffi.Pointer<WebPData>, int, int)>();

  WebPMuxError WebPMuxSetChunk(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<ffi.Char> fourcc,
    ffi.Pointer<WebPData> chunk_data,
    int copy_data,
  ) {
    return WebPMuxError.fromValue(_WebPMuxSetChunk(
      mux,
      fourcc,
      chunk_data,
      copy_data,
    ));
  }

  late final _WebPMuxSetChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<WebPData>, ffi.Int)>>('WebPMuxSetChunk');
  late final _WebPMuxSetChunk = _WebPMuxSetChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<WebPData>, int)>();

  WebPMuxError WebPMuxGetChunk(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<ffi.Char> fourcc,
    ffi.Pointer<WebPData> chunk_data,
  ) {
    return WebPMuxError.fromValue(_WebPMuxGetChunk(
      mux,
      fourcc,
      chunk_data,
    ));
  }

  late final _WebPMuxGetChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<WebPData>)>>('WebPMuxGetChunk');
  late final _WebPMuxGetChunk = _WebPMuxGetChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<WebPData>)>();

  WebPMuxError WebPMuxDeleteChunk(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<ffi.Char> fourcc,
  ) {
    return WebPMuxError.fromValue(_WebPMuxDeleteChunk(
      mux,
      fourcc,
    ));
  }

  late final _WebPMuxDeleteChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>,
              ffi.Pointer<ffi.Char>)>>('WebPMuxDeleteChunk');
  late final _WebPMuxDeleteChunk = _WebPMuxDeleteChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Char>)>();

  WebPMuxError WebPMuxSetImage(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<WebPData> bitstream,
    int copy_data,
  ) {
    return WebPMuxError.fromValue(_WebPMuxSetImage(
      mux,
      bitstream,
      copy_data,
    ));
  }

  late final _WebPMuxSetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPData>,
              ffi.Int)>>('WebPMuxSetImage');
  late final _WebPMuxSetImage = _WebPMuxSetImagePtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPData>, int)>();

  WebPMuxError WebPMuxPushFrame(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<WebPMuxFrameInfo> frame,
    int copy_data,
  ) {
    return WebPMuxError.fromValue(_WebPMuxPushFrame(
      mux,
      frame,
      copy_data,
    ));
  }

  late final _WebPMuxPushFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPMuxFrameInfo>,
              ffi.Int)>>('WebPMuxPushFrame');
  late final _WebPMuxPushFrame = _WebPMuxPushFramePtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPMuxFrameInfo>, int)>();

  WebPMuxError WebPMuxGetFrame(
    ffi.Pointer<WebPMux> mux,
    int nth,
    ffi.Pointer<WebPMuxFrameInfo> frame,
  ) {
    return WebPMuxError.fromValue(_WebPMuxGetFrame(
      mux,
      nth,
      frame,
    ));
  }

  late final _WebPMuxGetFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Uint32,
              ffi.Pointer<WebPMuxFrameInfo>)>>('WebPMuxGetFrame');
  late final _WebPMuxGetFrame = _WebPMuxGetFramePtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, int, ffi.Pointer<WebPMuxFrameInfo>)>();

  WebPMuxError WebPMuxDeleteFrame(
    ffi.Pointer<WebPMux> mux,
    int nth,
  ) {
    return WebPMuxError.fromValue(_WebPMuxDeleteFrame(
      mux,
      nth,
    ));
  }

  late final _WebPMuxDeleteFramePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Uint32)>>(
      'WebPMuxDeleteFrame');
  late final _WebPMuxDeleteFrame = _WebPMuxDeleteFramePtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, int)>();

  WebPMuxError WebPMuxSetAnimationParams(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<WebPMuxAnimParams> params,
  ) {
    return WebPMuxError.fromValue(_WebPMuxSetAnimationParams(
      mux,
      params,
    ));
  }

  late final _WebPMuxSetAnimationParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>,
              ffi.Pointer<WebPMuxAnimParams>)>>('WebPMuxSetAnimationParams');
  late final _WebPMuxSetAnimationParams =
      _WebPMuxSetAnimationParamsPtr.asFunction<
          int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPMuxAnimParams>)>();

  WebPMuxError WebPMuxGetAnimationParams(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<WebPMuxAnimParams> params,
  ) {
    return WebPMuxError.fromValue(_WebPMuxGetAnimationParams(
      mux,
      params,
    ));
  }

  late final _WebPMuxGetAnimationParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>,
              ffi.Pointer<WebPMuxAnimParams>)>>('WebPMuxGetAnimationParams');
  late final _WebPMuxGetAnimationParams =
      _WebPMuxGetAnimationParamsPtr.asFunction<
          int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPMuxAnimParams>)>();

  WebPMuxError WebPMuxSetCanvasSize(
    ffi.Pointer<WebPMux> mux,
    int width,
    int height,
  ) {
    return WebPMuxError.fromValue(_WebPMuxSetCanvasSize(
      mux,
      width,
      height,
    ));
  }

  late final _WebPMuxSetCanvasSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WebPMux>, ffi.Int, ffi.Int)>>('WebPMuxSetCanvasSize');
  late final _WebPMuxSetCanvasSize = _WebPMuxSetCanvasSizePtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, int, int)>();

  WebPMuxError WebPMuxGetCanvasSize(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return WebPMuxError.fromValue(_WebPMuxGetCanvasSize(
      mux,
      width,
      height,
    ));
  }

  late final _WebPMuxGetCanvasSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('WebPMuxGetCanvasSize');
  late final _WebPMuxGetCanvasSize = _WebPMuxGetCanvasSizePtr.asFunction<
      int Function(
          ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  WebPMuxError WebPMuxGetFeatures(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<ffi.Uint32> flags,
  ) {
    return WebPMuxError.fromValue(_WebPMuxGetFeatures(
      mux,
      flags,
    ));
  }

  late final _WebPMuxGetFeaturesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>,
              ffi.Pointer<ffi.Uint32>)>>('WebPMuxGetFeatures');
  late final _WebPMuxGetFeatures = _WebPMuxGetFeaturesPtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<ffi.Uint32>)>();

  WebPMuxError WebPMuxNumChunks(
    ffi.Pointer<WebPMux> mux,
    WebPChunkId id,
    ffi.Pointer<ffi.Int> num_elements,
  ) {
    return WebPMuxError.fromValue(_WebPMuxNumChunks(
      mux,
      id.value,
      num_elements,
    ));
  }

  late final _WebPMuxNumChunksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPMux>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>)>>('WebPMuxNumChunks');
  late final _WebPMuxNumChunks = _WebPMuxNumChunksPtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, int, ffi.Pointer<ffi.Int>)>();

  WebPMuxError WebPMuxAssemble(
    ffi.Pointer<WebPMux> mux,
    ffi.Pointer<WebPData> assembled_data,
  ) {
    return WebPMuxError.fromValue(_WebPMuxAssemble(
      mux,
      assembled_data,
    ));
  }

  late final _WebPMuxAssemblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WebPMux>, ffi.Pointer<WebPData>)>>('WebPMuxAssemble');
  late final _WebPMuxAssemble = _WebPMuxAssemblePtr.asFunction<
      int Function(ffi.Pointer<WebPMux>, ffi.Pointer<WebPData>)>();

  int WebPAnimEncoderOptionsInitInternal(
    ffi.Pointer<WebPAnimEncoderOptions> arg0,
    int arg1,
  ) {
    return _WebPAnimEncoderOptionsInitInternal(
      arg0,
      arg1,
    );
  }

  late final _WebPAnimEncoderOptionsInitInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimEncoderOptions>,
              ffi.Int)>>('WebPAnimEncoderOptionsInitInternal');
  late final _WebPAnimEncoderOptionsInitInternal =
      _WebPAnimEncoderOptionsInitInternalPtr.asFunction<
          int Function(ffi.Pointer<WebPAnimEncoderOptions>, int)>();

  ffi.Pointer<WebPAnimEncoder> WebPAnimEncoderNewInternal(
    int arg0,
    int arg1,
    ffi.Pointer<WebPAnimEncoderOptions> arg2,
    int arg3,
  ) {
    return _WebPAnimEncoderNewInternal(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _WebPAnimEncoderNewInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WebPAnimEncoder> Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<WebPAnimEncoderOptions>,
              ffi.Int)>>('WebPAnimEncoderNewInternal');
  late final _WebPAnimEncoderNewInternal =
      _WebPAnimEncoderNewInternalPtr.asFunction<
          ffi.Pointer<WebPAnimEncoder> Function(
              int, int, ffi.Pointer<WebPAnimEncoderOptions>, int)>();

  int WebPAnimEncoderAdd(
    ffi.Pointer<WebPAnimEncoder> enc,
    ffi.Pointer<WebPPicture> frame,
    int timestamp_ms,
    ffi.Pointer<WebPConfig> config,
  ) {
    return _WebPAnimEncoderAdd(
      enc,
      frame,
      timestamp_ms,
      config,
    );
  }

  late final _WebPAnimEncoderAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<WebPAnimEncoder>,
              ffi.Pointer<WebPPicture>,
              ffi.Int,
              ffi.Pointer<WebPConfig>)>>('WebPAnimEncoderAdd');
  late final _WebPAnimEncoderAdd = _WebPAnimEncoderAddPtr.asFunction<
      int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<WebPPicture>, int,
          ffi.Pointer<WebPConfig>)>();

  int WebPAnimEncoderAssemble(
    ffi.Pointer<WebPAnimEncoder> enc,
    ffi.Pointer<WebPData> webp_data,
  ) {
    return _WebPAnimEncoderAssemble(
      enc,
      webp_data,
    );
  }

  late final _WebPAnimEncoderAssemblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimEncoder>,
              ffi.Pointer<WebPData>)>>('WebPAnimEncoderAssemble');
  late final _WebPAnimEncoderAssemble = _WebPAnimEncoderAssemblePtr.asFunction<
      int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<WebPData>)>();

  ffi.Pointer<ffi.Char> WebPAnimEncoderGetError(
    ffi.Pointer<WebPAnimEncoder> enc,
  ) {
    return _WebPAnimEncoderGetError(
      enc,
    );
  }

  late final _WebPAnimEncoderGetErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<WebPAnimEncoder>)>>('WebPAnimEncoderGetError');
  late final _WebPAnimEncoderGetError = _WebPAnimEncoderGetErrorPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<WebPAnimEncoder>)>();

  void WebPAnimEncoderDelete(
    ffi.Pointer<WebPAnimEncoder> enc,
  ) {
    return _WebPAnimEncoderDelete(
      enc,
    );
  }

  late final _WebPAnimEncoderDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<WebPAnimEncoder>)>>(
      'WebPAnimEncoderDelete');
  late final _WebPAnimEncoderDelete = _WebPAnimEncoderDeletePtr.asFunction<
      void Function(ffi.Pointer<WebPAnimEncoder>)>();

  WebPMuxError WebPAnimEncoderSetChunk(
    ffi.Pointer<WebPAnimEncoder> enc,
    ffi.Pointer<ffi.Char> fourcc,
    ffi.Pointer<WebPData> chunk_data,
    int copy_data,
  ) {
    return WebPMuxError.fromValue(_WebPAnimEncoderSetChunk(
      enc,
      fourcc,
      chunk_data,
      copy_data,
    ));
  }

  late final _WebPAnimEncoderSetChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<WebPData>, ffi.Int)>>('WebPAnimEncoderSetChunk');
  late final _WebPAnimEncoderSetChunk = _WebPAnimEncoderSetChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<WebPData>, int)>();

  WebPMuxError WebPAnimEncoderGetChunk(
    ffi.Pointer<WebPAnimEncoder> enc,
    ffi.Pointer<ffi.Char> fourcc,
    ffi.Pointer<WebPData> chunk_data,
  ) {
    return WebPMuxError.fromValue(_WebPAnimEncoderGetChunk(
      enc,
      fourcc,
      chunk_data,
    ));
  }

  late final _WebPAnimEncoderGetChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<WebPData>)>>('WebPAnimEncoderGetChunk');
  late final _WebPAnimEncoderGetChunk = _WebPAnimEncoderGetChunkPtr.asFunction<
      int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<WebPData>)>();

  WebPMuxError WebPAnimEncoderDeleteChunk(
    ffi.Pointer<WebPAnimEncoder> enc,
    ffi.Pointer<ffi.Char> fourcc,
  ) {
    return WebPMuxError.fromValue(_WebPAnimEncoderDeleteChunk(
      enc,
      fourcc,
    ));
  }

  late final _WebPAnimEncoderDeleteChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<WebPAnimEncoder>,
              ffi.Pointer<ffi.Char>)>>('WebPAnimEncoderDeleteChunk');
  late final _WebPAnimEncoderDeleteChunk =
      _WebPAnimEncoderDeleteChunkPtr.asFunction<
          int Function(ffi.Pointer<WebPAnimEncoder>, ffi.Pointer<ffi.Char>)>();
}

typedef ptrdiff_t = ffi.Long;
typedef Dartptrdiff_t = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

final class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

final class WebPRGBABuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> rgba;

  @ffi.Int()
  external int stride;

  @ffi.Size()
  external int size;
}

final class WebPYUVABuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> y;

  external ffi.Pointer<ffi.Uint8> u;

  external ffi.Pointer<ffi.Uint8> v;

  external ffi.Pointer<ffi.Uint8> a;

  @ffi.Int()
  external int y_stride;

  @ffi.Int()
  external int u_stride;

  @ffi.Int()
  external int v_stride;

  @ffi.Int()
  external int a_stride;

  @ffi.Size()
  external int y_size;

  @ffi.Size()
  external int u_size;

  @ffi.Size()
  external int v_size;

  @ffi.Size()
  external int a_size;
}

enum WEBP_CSP_MODE {
  MODE_RGB(0),
  MODE_RGBA(1),
  MODE_BGR(2),
  MODE_BGRA(3),
  MODE_ARGB(4),
  MODE_RGBA_4444(5),
  MODE_RGB_565(6),
  MODE_rgbA(7),
  MODE_bgrA(8),
  MODE_Argb(9),
  MODE_rgbA_4444(10),
  MODE_YUV(11),
  MODE_YUVA(12),
  MODE_LAST(13);

  final int value;
  const WEBP_CSP_MODE(this.value);

  static WEBP_CSP_MODE fromValue(int value) => switch (value) {
        0 => MODE_RGB,
        1 => MODE_RGBA,
        2 => MODE_BGR,
        3 => MODE_BGRA,
        4 => MODE_ARGB,
        5 => MODE_RGBA_4444,
        6 => MODE_RGB_565,
        7 => MODE_rgbA,
        8 => MODE_bgrA,
        9 => MODE_Argb,
        10 => MODE_rgbA_4444,
        11 => MODE_YUV,
        12 => MODE_YUVA,
        13 => MODE_LAST,
        _ => throw ArgumentError('Unknown value for WEBP_CSP_MODE: $value'),
      };
}

final class UnnamedUnion1 extends ffi.Union {
  external WebPRGBABuffer RGBA;

  external WebPYUVABuffer YUVA;
}

final class WebPDecBuffer extends ffi.Struct {
  @ffi.UnsignedInt()
  external int colorspaceAsInt;

  WEBP_CSP_MODE get colorspace => WEBP_CSP_MODE.fromValue(colorspaceAsInt);

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int is_external_memory;

  external UnnamedUnion1 u;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> pad;

  external ffi.Pointer<ffi.Uint8> private_memory;
}

final class WebPIDecoder extends ffi.Opaque {}

final class WebPBitstreamFeatures extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int has_alpha;

  @ffi.Int()
  external int has_animation;

  @ffi.Int()
  external int format;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> pad;
}

final class WebPDecoderOptions extends ffi.Struct {
  @ffi.Int()
  external int bypass_filtering;

  @ffi.Int()
  external int no_fancy_upsampling;

  @ffi.Int()
  external int use_cropping;

  @ffi.Int()
  external int crop_left;

  @ffi.Int()
  external int crop_top;

  @ffi.Int()
  external int crop_width;

  @ffi.Int()
  external int crop_height;

  @ffi.Int()
  external int use_scaling;

  @ffi.Int()
  external int scaled_width;

  @ffi.Int()
  external int scaled_height;

  @ffi.Int()
  external int use_threads;

  @ffi.Int()
  external int dithering_strength;

  @ffi.Int()
  external int flip;

  @ffi.Int()
  external int alpha_dithering_strength;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> pad;
}

final class WebPDecoderConfig extends ffi.Struct {
  external WebPBitstreamFeatures input;

  external WebPDecBuffer output;

  external WebPDecoderOptions options;
}

enum VP8StatusCode {
  VP8_STATUS_OK(0),
  VP8_STATUS_OUT_OF_MEMORY(1),
  VP8_STATUS_INVALID_PARAM(2),
  VP8_STATUS_BITSTREAM_ERROR(3),
  VP8_STATUS_UNSUPPORTED_FEATURE(4),
  VP8_STATUS_SUSPENDED(5),
  VP8_STATUS_USER_ABORT(6),
  VP8_STATUS_NOT_ENOUGH_DATA(7);

  final int value;
  const VP8StatusCode(this.value);

  static VP8StatusCode fromValue(int value) => switch (value) {
        0 => VP8_STATUS_OK,
        1 => VP8_STATUS_OUT_OF_MEMORY,
        2 => VP8_STATUS_INVALID_PARAM,
        3 => VP8_STATUS_BITSTREAM_ERROR,
        4 => VP8_STATUS_UNSUPPORTED_FEATURE,
        5 => VP8_STATUS_SUSPENDED,
        6 => VP8_STATUS_USER_ABORT,
        7 => VP8_STATUS_NOT_ENOUGH_DATA,
        _ => throw ArgumentError('Unknown value for VP8StatusCode: $value'),
      };
}

typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef rsize_t = __darwin_size_t;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef ssize_t = __darwin_ssize_t;

final class WebPData extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> bytes;

  @ffi.Size()
  external int size;
}

enum WebPFeatureFlags {
  ANIMATION_FLAG(2),
  XMP_FLAG(4),
  EXIF_FLAG(8),
  ALPHA_FLAG(16),
  ICCP_FLAG(32),
  ALL_VALID_FLAGS(62);

  final int value;
  const WebPFeatureFlags(this.value);

  static WebPFeatureFlags fromValue(int value) => switch (value) {
        2 => ANIMATION_FLAG,
        4 => XMP_FLAG,
        8 => EXIF_FLAG,
        16 => ALPHA_FLAG,
        32 => ICCP_FLAG,
        62 => ALL_VALID_FLAGS,
        _ => throw ArgumentError('Unknown value for WebPFeatureFlags: $value'),
      };
}

enum WebPMuxAnimDispose {
  WEBP_MUX_DISPOSE_NONE(0),
  WEBP_MUX_DISPOSE_BACKGROUND(1);

  final int value;
  const WebPMuxAnimDispose(this.value);

  static WebPMuxAnimDispose fromValue(int value) => switch (value) {
        0 => WEBP_MUX_DISPOSE_NONE,
        1 => WEBP_MUX_DISPOSE_BACKGROUND,
        _ =>
          throw ArgumentError('Unknown value for WebPMuxAnimDispose: $value'),
      };
}

enum WebPMuxAnimBlend {
  WEBP_MUX_BLEND(0),
  WEBP_MUX_NO_BLEND(1);

  final int value;
  const WebPMuxAnimBlend(this.value);

  static WebPMuxAnimBlend fromValue(int value) => switch (value) {
        0 => WEBP_MUX_BLEND,
        1 => WEBP_MUX_NO_BLEND,
        _ => throw ArgumentError('Unknown value for WebPMuxAnimBlend: $value'),
      };
}

final class WebPDemuxer extends ffi.Opaque {}

final class WebPIterator extends ffi.Struct {
  @ffi.Int()
  external int frame_num;

  @ffi.Int()
  external int num_frames;

  @ffi.Int()
  external int x_offset;

  @ffi.Int()
  external int y_offset;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int duration;

  @ffi.UnsignedInt()
  external int dispose_methodAsInt;

  WebPMuxAnimDispose get dispose_method =>
      WebPMuxAnimDispose.fromValue(dispose_methodAsInt);

  @ffi.Int()
  external int complete;

  external WebPData fragment;

  @ffi.Int()
  external int has_alpha;

  @ffi.UnsignedInt()
  external int blend_methodAsInt;

  WebPMuxAnimBlend get blend_method =>
      WebPMuxAnimBlend.fromValue(blend_methodAsInt);

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> pad;

  external ffi.Pointer<ffi.Void> private_;
}

final class WebPChunkIterator extends ffi.Struct {
  @ffi.Int()
  external int chunk_num;

  @ffi.Int()
  external int num_chunks;

  external WebPData chunk;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint32> pad;

  external ffi.Pointer<ffi.Void> private_;
}

final class WebPAnimInfo extends ffi.Struct {
  @ffi.Uint32()
  external int canvas_width;

  @ffi.Uint32()
  external int canvas_height;

  @ffi.Uint32()
  external int loop_count;

  @ffi.Uint32()
  external int bgcolor;

  @ffi.Uint32()
  external int frame_count;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> pad;
}

final class WebPAnimDecoderOptions extends ffi.Struct {
  @ffi.UnsignedInt()
  external int color_modeAsInt;

  WEBP_CSP_MODE get color_mode => WEBP_CSP_MODE.fromValue(color_modeAsInt);

  @ffi.Int()
  external int use_threads;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint32> padding;
}

enum WebPDemuxState {
  WEBP_DEMUX_PARSE_ERROR(-1),
  WEBP_DEMUX_PARSING_HEADER(0),
  WEBP_DEMUX_PARSED_HEADER(1),
  WEBP_DEMUX_DONE(2);

  final int value;
  const WebPDemuxState(this.value);

  static WebPDemuxState fromValue(int value) => switch (value) {
        -1 => WEBP_DEMUX_PARSE_ERROR,
        0 => WEBP_DEMUX_PARSING_HEADER,
        1 => WEBP_DEMUX_PARSED_HEADER,
        2 => WEBP_DEMUX_DONE,
        _ => throw ArgumentError('Unknown value for WebPDemuxState: $value'),
      };
}

enum WebPFormatFeature {
  WEBP_FF_FORMAT_FLAGS(0),
  WEBP_FF_CANVAS_WIDTH(1),
  WEBP_FF_CANVAS_HEIGHT(2),
  WEBP_FF_LOOP_COUNT(3),
  WEBP_FF_BACKGROUND_COLOR(4),
  WEBP_FF_FRAME_COUNT(5);

  final int value;
  const WebPFormatFeature(this.value);

  static WebPFormatFeature fromValue(int value) => switch (value) {
        0 => WEBP_FF_FORMAT_FLAGS,
        1 => WEBP_FF_CANVAS_WIDTH,
        2 => WEBP_FF_CANVAS_HEIGHT,
        3 => WEBP_FF_LOOP_COUNT,
        4 => WEBP_FF_BACKGROUND_COLOR,
        5 => WEBP_FF_FRAME_COUNT,
        _ => throw ArgumentError('Unknown value for WebPFormatFeature: $value'),
      };
}

final class WebPAnimDecoder extends ffi.Opaque {}

enum WebPImageHint {
  WEBP_HINT_DEFAULT(0),
  WEBP_HINT_PICTURE(1),
  WEBP_HINT_PHOTO(2),
  WEBP_HINT_GRAPH(3),
  WEBP_HINT_LAST(4);

  final int value;
  const WebPImageHint(this.value);

  static WebPImageHint fromValue(int value) => switch (value) {
        0 => WEBP_HINT_DEFAULT,
        1 => WEBP_HINT_PICTURE,
        2 => WEBP_HINT_PHOTO,
        3 => WEBP_HINT_GRAPH,
        4 => WEBP_HINT_LAST,
        _ => throw ArgumentError('Unknown value for WebPImageHint: $value'),
      };
}

final class WebPConfig extends ffi.Struct {
  @ffi.Int()
  external int lossless;

  @ffi.Float()
  external double quality;

  @ffi.Int()
  external int method;

  @ffi.UnsignedInt()
  external int image_hintAsInt;

  WebPImageHint get image_hint => WebPImageHint.fromValue(image_hintAsInt);

  @ffi.Int()
  external int target_size;

  @ffi.Float()
  external double target_PSNR;

  @ffi.Int()
  external int segments;

  @ffi.Int()
  external int sns_strength;

  @ffi.Int()
  external int filter_strength;

  @ffi.Int()
  external int filter_sharpness;

  @ffi.Int()
  external int filter_type;

  @ffi.Int()
  external int autofilter;

  @ffi.Int()
  external int alpha_compression;

  @ffi.Int()
  external int alpha_filtering;

  @ffi.Int()
  external int alpha_quality;

  @ffi.Int()
  external int pass;

  @ffi.Int()
  external int show_compressed;

  @ffi.Int()
  external int preprocessing;

  @ffi.Int()
  external int partitions;

  @ffi.Int()
  external int partition_limit;

  @ffi.Int()
  external int emulate_jpeg_size;

  @ffi.Int()
  external int thread_level;

  @ffi.Int()
  external int low_memory;

  @ffi.Int()
  external int near_lossless;

  @ffi.Int()
  external int exact;

  @ffi.Int()
  external int use_delta_palette;

  @ffi.Int()
  external int use_sharp_yuv;

  @ffi.Int()
  external int qmin;

  @ffi.Int()
  external int qmax;
}

enum WebPEncCSP {
  WEBP_YUV420(0),
  WEBP_YUV420A(4),
  WEBP_CSP_UV_MASK(3);

  static const WEBP_CSP_ALPHA_BIT = WEBP_YUV420A;

  final int value;
  const WebPEncCSP(this.value);

  static WebPEncCSP fromValue(int value) => switch (value) {
        0 => WEBP_YUV420,
        4 => WEBP_YUV420A,
        3 => WEBP_CSP_UV_MASK,
        _ => throw ArgumentError('Unknown value for WebPEncCSP: $value'),
      };

  @override
  String toString() {
    if (this == WEBP_YUV420A)
      return "WebPEncCSP.WEBP_YUV420A, WebPEncCSP.WEBP_CSP_ALPHA_BIT";
    return super.toString();
  }
}

typedef WebPWriterFunctionFunction = ffi.Int Function(
    ffi.Pointer<ffi.Uint8> data,
    ffi.Size data_size,
    ffi.Pointer<WebPPicture> picture);
typedef DartWebPWriterFunctionFunction = int Function(
    ffi.Pointer<ffi.Uint8> data,
    int data_size,
    ffi.Pointer<WebPPicture> picture);
typedef WebPWriterFunction
    = ffi.Pointer<ffi.NativeFunction<WebPWriterFunctionFunction>>;

final class WebPAuxStats extends ffi.Struct {
  @ffi.Int()
  external int coded_size;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Float> PSNR;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> block_count;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> header_bytes;

  @ffi.Array.multi([3, 4])
  external ffi.Array<ffi.Array<ffi.Int>> residual_bytes;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> segment_size;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> segment_quant;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> segment_level;

  @ffi.Int()
  external int alpha_data_size;

  @ffi.Int()
  external int layer_data_size;

  @ffi.Uint32()
  external int lossless_features;

  @ffi.Int()
  external int histogram_bits;

  @ffi.Int()
  external int transform_bits;

  @ffi.Int()
  external int cache_bits;

  @ffi.Int()
  external int palette_size;

  @ffi.Int()
  external int lossless_size;

  @ffi.Int()
  external int lossless_hdr_size;

  @ffi.Int()
  external int lossless_data_size;

  @ffi.Int()
  external int cross_color_transform_bits;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint32> pad;
}

enum WebPEncodingError {
  VP8_ENC_OK(0),
  VP8_ENC_ERROR_OUT_OF_MEMORY(1),
  VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY(2),
  VP8_ENC_ERROR_NULL_PARAMETER(3),
  VP8_ENC_ERROR_INVALID_CONFIGURATION(4),
  VP8_ENC_ERROR_BAD_DIMENSION(5),
  VP8_ENC_ERROR_PARTITION0_OVERFLOW(6),
  VP8_ENC_ERROR_PARTITION_OVERFLOW(7),
  VP8_ENC_ERROR_BAD_WRITE(8),
  VP8_ENC_ERROR_FILE_TOO_BIG(9),
  VP8_ENC_ERROR_USER_ABORT(10),
  VP8_ENC_ERROR_LAST(11);

  final int value;
  const WebPEncodingError(this.value);

  static WebPEncodingError fromValue(int value) => switch (value) {
        0 => VP8_ENC_OK,
        1 => VP8_ENC_ERROR_OUT_OF_MEMORY,
        2 => VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY,
        3 => VP8_ENC_ERROR_NULL_PARAMETER,
        4 => VP8_ENC_ERROR_INVALID_CONFIGURATION,
        5 => VP8_ENC_ERROR_BAD_DIMENSION,
        6 => VP8_ENC_ERROR_PARTITION0_OVERFLOW,
        7 => VP8_ENC_ERROR_PARTITION_OVERFLOW,
        8 => VP8_ENC_ERROR_BAD_WRITE,
        9 => VP8_ENC_ERROR_FILE_TOO_BIG,
        10 => VP8_ENC_ERROR_USER_ABORT,
        11 => VP8_ENC_ERROR_LAST,
        _ => throw ArgumentError('Unknown value for WebPEncodingError: $value'),
      };
}

typedef WebPProgressHookFunction = ffi.Int Function(
    ffi.Int percent, ffi.Pointer<WebPPicture> picture);
typedef DartWebPProgressHookFunction = int Function(
    int percent, ffi.Pointer<WebPPicture> picture);
typedef WebPProgressHook
    = ffi.Pointer<ffi.NativeFunction<WebPProgressHookFunction>>;

final class WebPPicture extends ffi.Struct {
  /// ///////////
  @ffi.Int()
  external int use_argb;

  @ffi.UnsignedInt()
  external int colorspaceAsInt;

  WebPEncCSP get colorspace => WebPEncCSP.fromValue(colorspaceAsInt);

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  external ffi.Pointer<ffi.Uint8> y;

  external ffi.Pointer<ffi.Uint8> u;

  external ffi.Pointer<ffi.Uint8> v;

  @ffi.Int()
  external int y_stride;

  @ffi.Int()
  external int uv_stride;

  external ffi.Pointer<ffi.Uint8> a;

  @ffi.Int()
  external int a_stride;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> pad1;

  external ffi.Pointer<ffi.Uint32> argb;

  @ffi.Int()
  external int argb_stride;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> pad2;

  /// ////////////
  external WebPWriterFunction writer;

  external ffi.Pointer<ffi.Void> custom_ptr;

  @ffi.Int()
  external int extra_info_type;

  external ffi.Pointer<ffi.Uint8> extra_info;

  /// ////////////////////////
  external ffi.Pointer<WebPAuxStats> stats;

  @ffi.UnsignedInt()
  external int error_codeAsInt;

  WebPEncodingError get error_code =>
      WebPEncodingError.fromValue(error_codeAsInt);

  external WebPProgressHook progress_hook;

  external ffi.Pointer<ffi.Void> user_data;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> pad3;

  external ffi.Pointer<ffi.Uint8> pad4;

  external ffi.Pointer<ffi.Uint8> pad5;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint32> pad6;

  /// /////////////////
  external ffi.Pointer<ffi.Void> memory_;

  external ffi.Pointer<ffi.Void> memory_argb_;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Void>> pad7;
}

final class WebPMemoryWriter extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> mem;

  @ffi.Size()
  external int size;

  @ffi.Size()
  external int max_size;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint32> pad;
}

enum WebPPreset {
  WEBP_PRESET_DEFAULT(0),
  WEBP_PRESET_PICTURE(1),
  WEBP_PRESET_PHOTO(2),
  WEBP_PRESET_DRAWING(3),
  WEBP_PRESET_ICON(4),
  WEBP_PRESET_TEXT(5);

  final int value;
  const WebPPreset(this.value);

  static WebPPreset fromValue(int value) => switch (value) {
        0 => WEBP_PRESET_DEFAULT,
        1 => WEBP_PRESET_PICTURE,
        2 => WEBP_PRESET_PHOTO,
        3 => WEBP_PRESET_DRAWING,
        4 => WEBP_PRESET_ICON,
        5 => WEBP_PRESET_TEXT,
        _ => throw ArgumentError('Unknown value for WebPPreset: $value'),
      };
}

final class WebPMux extends ffi.Opaque {}

enum WebPChunkId {
  WEBP_CHUNK_VP8X(0),
  WEBP_CHUNK_ICCP(1),
  WEBP_CHUNK_ANIM(2),
  WEBP_CHUNK_ANMF(3),
  WEBP_CHUNK_DEPRECATED(4),
  WEBP_CHUNK_ALPHA(5),
  WEBP_CHUNK_IMAGE(6),
  WEBP_CHUNK_EXIF(7),
  WEBP_CHUNK_XMP(8),
  WEBP_CHUNK_UNKNOWN(9),
  WEBP_CHUNK_NIL(10);

  final int value;
  const WebPChunkId(this.value);

  static WebPChunkId fromValue(int value) => switch (value) {
        0 => WEBP_CHUNK_VP8X,
        1 => WEBP_CHUNK_ICCP,
        2 => WEBP_CHUNK_ANIM,
        3 => WEBP_CHUNK_ANMF,
        4 => WEBP_CHUNK_DEPRECATED,
        5 => WEBP_CHUNK_ALPHA,
        6 => WEBP_CHUNK_IMAGE,
        7 => WEBP_CHUNK_EXIF,
        8 => WEBP_CHUNK_XMP,
        9 => WEBP_CHUNK_UNKNOWN,
        10 => WEBP_CHUNK_NIL,
        _ => throw ArgumentError('Unknown value for WebPChunkId: $value'),
      };
}

final class WebPMuxFrameInfo extends ffi.Struct {
  external WebPData bitstream;

  @ffi.Int()
  external int x_offset;

  @ffi.Int()
  external int y_offset;

  @ffi.Int()
  external int duration;

  @ffi.UnsignedInt()
  external int idAsInt;

  WebPChunkId get id => WebPChunkId.fromValue(idAsInt);

  @ffi.UnsignedInt()
  external int dispose_methodAsInt;

  WebPMuxAnimDispose get dispose_method =>
      WebPMuxAnimDispose.fromValue(dispose_methodAsInt);

  @ffi.UnsignedInt()
  external int blend_methodAsInt;

  WebPMuxAnimBlend get blend_method =>
      WebPMuxAnimBlend.fromValue(blend_methodAsInt);

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Uint32> pad;
}

final class WebPMuxAnimParams extends ffi.Struct {
  @ffi.Uint32()
  external int bgcolor;

  @ffi.Int()
  external int loop_count;
}

final class WebPAnimEncoderOptions extends ffi.Struct {
  external WebPMuxAnimParams anim_params;

  @ffi.Int()
  external int minimize_size;

  @ffi.Int()
  external int kmin;

  @ffi.Int()
  external int kmax;

  @ffi.Int()
  external int allow_mixed;

  @ffi.Int()
  external int verbose;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> padding;
}

enum WebPMuxError {
  WEBP_MUX_OK(1),
  WEBP_MUX_NOT_FOUND(0),
  WEBP_MUX_INVALID_ARGUMENT(-1),
  WEBP_MUX_BAD_DATA(-2),
  WEBP_MUX_MEMORY_ERROR(-3),
  WEBP_MUX_NOT_ENOUGH_DATA(-4);

  final int value;
  const WebPMuxError(this.value);

  static WebPMuxError fromValue(int value) => switch (value) {
        1 => WEBP_MUX_OK,
        0 => WEBP_MUX_NOT_FOUND,
        -1 => WEBP_MUX_INVALID_ARGUMENT,
        -2 => WEBP_MUX_BAD_DATA,
        -3 => WEBP_MUX_MEMORY_ERROR,
        -4 => WEBP_MUX_NOT_ENOUGH_DATA,
        _ => throw ArgumentError('Unknown value for WebPMuxError: $value'),
      };
}

final class WebPAnimEncoder extends ffi.Opaque {}

const int NULL = 0;

const String __PRI_8_LENGTH_MODIFIER__ = 'hh';

const String __PRI_64_LENGTH_MODIFIER__ = 'll';

const String __SCN_64_LENGTH_MODIFIER__ = 'll';

const String __PRI_MAX_LENGTH_MODIFIER__ = 'j';

const String __SCN_MAX_LENGTH_MODIFIER__ = 'j';

const String PRId8 = 'hhd';

const String PRIi8 = 'hhi';

const String PRIo8 = 'hho';

const String PRIu8 = 'hhu';

const String PRIx8 = 'hhx';

const String PRIX8 = 'hhX';

const String PRId16 = 'hd';

const String PRIi16 = 'hi';

const String PRIo16 = 'ho';

const String PRIu16 = 'hu';

const String PRIx16 = 'hx';

const String PRIX16 = 'hX';

const String PRId32 = 'd';

const String PRIi32 = 'i';

const String PRIo32 = 'o';

const String PRIu32 = 'u';

const String PRIx32 = 'x';

const String PRIX32 = 'X';

const String PRId64 = 'lld';

const String PRIi64 = 'lli';

const String PRIo64 = 'llo';

const String PRIu64 = 'llu';

const String PRIx64 = 'llx';

const String PRIX64 = 'llX';

const String PRIdLEAST8 = 'hhd';

const String PRIiLEAST8 = 'hhi';

const String PRIoLEAST8 = 'hho';

const String PRIuLEAST8 = 'hhu';

const String PRIxLEAST8 = 'hhx';

const String PRIXLEAST8 = 'hhX';

const String PRIdLEAST16 = 'hd';

const String PRIiLEAST16 = 'hi';

const String PRIoLEAST16 = 'ho';

const String PRIuLEAST16 = 'hu';

const String PRIxLEAST16 = 'hx';

const String PRIXLEAST16 = 'hX';

const String PRIdLEAST32 = 'd';

const String PRIiLEAST32 = 'i';

const String PRIoLEAST32 = 'o';

const String PRIuLEAST32 = 'u';

const String PRIxLEAST32 = 'x';

const String PRIXLEAST32 = 'X';

const String PRIdLEAST64 = 'lld';

const String PRIiLEAST64 = 'lli';

const String PRIoLEAST64 = 'llo';

const String PRIuLEAST64 = 'llu';

const String PRIxLEAST64 = 'llx';

const String PRIXLEAST64 = 'llX';

const String PRIdFAST8 = 'hhd';

const String PRIiFAST8 = 'hhi';

const String PRIoFAST8 = 'hho';

const String PRIuFAST8 = 'hhu';

const String PRIxFAST8 = 'hhx';

const String PRIXFAST8 = 'hhX';

const String PRIdFAST16 = 'hd';

const String PRIiFAST16 = 'hi';

const String PRIoFAST16 = 'ho';

const String PRIuFAST16 = 'hu';

const String PRIxFAST16 = 'hx';

const String PRIXFAST16 = 'hX';

const String PRIdFAST32 = 'd';

const String PRIiFAST32 = 'i';

const String PRIoFAST32 = 'o';

const String PRIuFAST32 = 'u';

const String PRIxFAST32 = 'x';

const String PRIXFAST32 = 'X';

const String PRIdFAST64 = 'lld';

const String PRIiFAST64 = 'lli';

const String PRIoFAST64 = 'llo';

const String PRIuFAST64 = 'llu';

const String PRIxFAST64 = 'llx';

const String PRIXFAST64 = 'llX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String PRIdMAX = 'jd';

const String PRIiMAX = 'ji';

const String PRIoMAX = 'jo';

const String PRIuMAX = 'ju';

const String PRIxMAX = 'jx';

const String PRIXMAX = 'jX';

const String SCNd8 = 'hhd';

const String SCNi8 = 'hhi';

const String SCNo8 = 'hho';

const String SCNu8 = 'hhu';

const String SCNx8 = 'hhx';

const String SCNd16 = 'hd';

const String SCNi16 = 'hi';

const String SCNo16 = 'ho';

const String SCNu16 = 'hu';

const String SCNx16 = 'hx';

const String SCNd32 = 'd';

const String SCNi32 = 'i';

const String SCNo32 = 'o';

const String SCNu32 = 'u';

const String SCNx32 = 'x';

const String SCNd64 = 'lld';

const String SCNi64 = 'lli';

const String SCNo64 = 'llo';

const String SCNu64 = 'llu';

const String SCNx64 = 'llx';

const String SCNdLEAST8 = 'hhd';

const String SCNiLEAST8 = 'hhi';

const String SCNoLEAST8 = 'hho';

const String SCNuLEAST8 = 'hhu';

const String SCNxLEAST8 = 'hhx';

const String SCNdLEAST16 = 'hd';

const String SCNiLEAST16 = 'hi';

const String SCNoLEAST16 = 'ho';

const String SCNuLEAST16 = 'hu';

const String SCNxLEAST16 = 'hx';

const String SCNdLEAST32 = 'd';

const String SCNiLEAST32 = 'i';

const String SCNoLEAST32 = 'o';

const String SCNuLEAST32 = 'u';

const String SCNxLEAST32 = 'x';

const String SCNdLEAST64 = 'lld';

const String SCNiLEAST64 = 'lli';

const String SCNoLEAST64 = 'llo';

const String SCNuLEAST64 = 'llu';

const String SCNxLEAST64 = 'llx';

const String SCNdFAST8 = 'hhd';

const String SCNiFAST8 = 'hhi';

const String SCNoFAST8 = 'hho';

const String SCNuFAST8 = 'hhu';

const String SCNxFAST8 = 'hhx';

const String SCNdFAST16 = 'hd';

const String SCNiFAST16 = 'hi';

const String SCNoFAST16 = 'ho';

const String SCNuFAST16 = 'hu';

const String SCNxFAST16 = 'hx';

const String SCNdFAST32 = 'd';

const String SCNiFAST32 = 'i';

const String SCNoFAST32 = 'o';

const String SCNuFAST32 = 'u';

const String SCNxFAST32 = 'x';

const String SCNdFAST64 = 'lld';

const String SCNiFAST64 = 'lli';

const String SCNoFAST64 = 'llo';

const String SCNuFAST64 = 'llu';

const String SCNxFAST64 = 'llx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const String SCNdMAX = 'jd';

const String SCNiMAX = 'ji';

const String SCNoMAX = 'jo';

const String SCNuMAX = 'ju';

const String SCNxMAX = 'jx';

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __MAC_15_2 = 150200;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __IPHONE_18_2 = 180200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __WATCHOS_11_2 = 110200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __TVOS_18_2 = 180200;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __BRIDGEOS_9_2 = 90200;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __DRIVERKIT_24_2 = 240200;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int __VISIONOS_2_2 = 20200;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int MAC_OS_VERSION_15_2 = 150200;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 150000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150200;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WEBP_DECODER_ABI_VERSION = 521;

const int USER_ADDR_NULL = 0;

const int WEBP_DEMUX_ABI_VERSION = 263;

const int WEBP_ENCODER_ABI_VERSION = 528;

const int WEBP_MAX_DIMENSION = 16383;

const int WEBP_MUX_ABI_VERSION = 265;
