// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

/// Bindings for CoreImage.
class CoreGraphicsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CoreGraphicsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CoreGraphicsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_copy(
      aBlock,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_release(
      aBlock,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void _Block_object_assign(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __Block_object_assign(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Block_object_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('_Block_object_assign');
  late final __Block_object_assign = __Block_object_assignPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void _Block_object_dispose(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __Block_object_dispose(
      arg0,
      arg1,
    );
  }

  late final __Block_object_disposePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      '_Block_object_dispose');
  late final __Block_object_dispose = __Block_object_disposePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Void>> __NSConcreteGlobalBlock =
      _lookup<ffi.Pointer<ffi.Void>>('_NSConcreteGlobalBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteGlobalBlock =>
      __NSConcreteGlobalBlock;

  late final ffi.Pointer<ffi.Pointer<ffi.Void>> __NSConcreteStackBlock =
      _lookup<ffi.Pointer<ffi.Void>>('_NSConcreteStackBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteStackBlock =>
      __NSConcreteStackBlock;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  void Debugger() {
    return _Debugger();
  }

  late final _DebuggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Debugger');
  late final _Debugger = _DebuggerPtr.asFunction<void Function()>();

  void DebugStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _DebugStr(
      debuggerMsg,
    );
  }

  late final _DebugStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'DebugStr');
  late final _DebugStr =
      _DebugStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreak() {
    return _SysBreak();
  }

  late final _SysBreakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SysBreak');
  late final _SysBreak = _SysBreakPtr.asFunction<void Function()>();

  void SysBreakStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakStr(
      debuggerMsg,
    );
  }

  late final _SysBreakStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakStr');
  late final _SysBreakStr =
      _SysBreakStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreakFunc(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakFunc(
      debuggerMsg,
    );
  }

  late final _SysBreakFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakFunc');
  late final _SysBreakFunc =
      _SysBreakFuncPtr.asFunction<void Function(ConstStr255Param)>();

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  DartCFIndex get kCFNotFound => _kCFNotFound.value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocateTyped(
    CFAllocatorRef allocator,
    int size,
    int descriptor,
    int hint,
  ) {
    return _CFAllocatorAllocateTyped(
      allocator,
      size,
      descriptor,
      hint,
    );
  }

  late final _CFAllocatorAllocateTypedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFIndex,
              CFAllocatorTypeID, CFOptionFlags)>>('CFAllocatorAllocateTyped');
  late final _CFAllocatorAllocateTyped =
      _CFAllocatorAllocateTypedPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocateTyped(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int descriptor,
    int hint,
  ) {
    return _CFAllocatorReallocateTyped(
      allocator,
      ptr,
      newsize,
      descriptor,
      hint,
    );
  }

  late final _CFAllocatorReallocateTypedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Void>,
              CFIndex,
              CFAllocatorTypeID,
              CFOptionFlags)>>('CFAllocatorReallocateTyped');
  late final _CFAllocatorReallocateTyped =
      _CFAllocatorReallocateTypedPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocateBytes(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocateBytes(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocateBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorAllocateBytes');
  late final _CFAllocatorAllocateBytes = _CFAllocatorAllocateBytesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocateBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocateBytes(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocateBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocateBytes');
  late final _CFAllocatorReallocateBytes =
      _CFAllocatorReallocateBytesPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFTypeDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFTypeDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFTypeDictionaryKeyCallBacks =>
      _kCFTypeDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFCopyStringDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFCopyStringDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFCopyStringDictionaryKeyCallBacks =>
      _kCFCopyStringDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryValueCallBacks>
      _kCFTypeDictionaryValueCallBacks =
      _lookup<CFDictionaryValueCallBacks>('kCFTypeDictionaryValueCallBacks');

  CFDictionaryValueCallBacks get kCFTypeDictionaryValueCallBacks =>
      _kCFTypeDictionaryValueCallBacks.ref;

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  late final ffi.Pointer<CGPoint> _CGPointZero =
      _lookup<CGPoint>('CGPointZero');

  CGPoint get CGPointZero => _CGPointZero.ref;

  late final ffi.Pointer<CGSize> _CGSizeZero = _lookup<CGSize>('CGSizeZero');

  CGSize get CGSizeZero => _CGSizeZero.ref;

  late final ffi.Pointer<CGRect> _CGRectZero = _lookup<CGRect>('CGRectZero');

  CGRect get CGRectZero => _CGRectZero.ref;

  late final ffi.Pointer<CGRect> _CGRectNull = _lookup<CGRect>('CGRectNull');

  CGRect get CGRectNull => _CGRectNull.ref;

  late final ffi.Pointer<CGRect> _CGRectInfinite =
      _lookup<CGRect>('CGRectInfinite');

  CGRect get CGRectInfinite => _CGRectInfinite.ref;

  double CGRectGetMinX(
    CGRect rect,
  ) {
    return _CGRectGetMinX(
      rect,
    );
  }

  late final _CGRectGetMinXPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetMinX');
  late final _CGRectGetMinX =
      _CGRectGetMinXPtr.asFunction<double Function(CGRect)>();

  double CGRectGetMidX(
    CGRect rect,
  ) {
    return _CGRectGetMidX(
      rect,
    );
  }

  late final _CGRectGetMidXPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetMidX');
  late final _CGRectGetMidX =
      _CGRectGetMidXPtr.asFunction<double Function(CGRect)>();

  double CGRectGetMaxX(
    CGRect rect,
  ) {
    return _CGRectGetMaxX(
      rect,
    );
  }

  late final _CGRectGetMaxXPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetMaxX');
  late final _CGRectGetMaxX =
      _CGRectGetMaxXPtr.asFunction<double Function(CGRect)>();

  double CGRectGetMinY(
    CGRect rect,
  ) {
    return _CGRectGetMinY(
      rect,
    );
  }

  late final _CGRectGetMinYPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetMinY');
  late final _CGRectGetMinY =
      _CGRectGetMinYPtr.asFunction<double Function(CGRect)>();

  double CGRectGetMidY(
    CGRect rect,
  ) {
    return _CGRectGetMidY(
      rect,
    );
  }

  late final _CGRectGetMidYPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetMidY');
  late final _CGRectGetMidY =
      _CGRectGetMidYPtr.asFunction<double Function(CGRect)>();

  double CGRectGetMaxY(
    CGRect rect,
  ) {
    return _CGRectGetMaxY(
      rect,
    );
  }

  late final _CGRectGetMaxYPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetMaxY');
  late final _CGRectGetMaxY =
      _CGRectGetMaxYPtr.asFunction<double Function(CGRect)>();

  double CGRectGetWidth(
    CGRect rect,
  ) {
    return _CGRectGetWidth(
      rect,
    );
  }

  late final _CGRectGetWidthPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetWidth');
  late final _CGRectGetWidth =
      _CGRectGetWidthPtr.asFunction<double Function(CGRect)>();

  double CGRectGetHeight(
    CGRect rect,
  ) {
    return _CGRectGetHeight(
      rect,
    );
  }

  late final _CGRectGetHeightPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGRect)>>('CGRectGetHeight');
  late final _CGRectGetHeight =
      _CGRectGetHeightPtr.asFunction<double Function(CGRect)>();

  bool CGPointEqualToPoint(
    CGPoint point1,
    CGPoint point2,
  ) {
    return _CGPointEqualToPoint(
      point1,
      point2,
    );
  }

  late final _CGPointEqualToPointPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPoint, CGPoint)>>(
          'CGPointEqualToPoint');
  late final _CGPointEqualToPoint =
      _CGPointEqualToPointPtr.asFunction<bool Function(CGPoint, CGPoint)>();

  bool CGSizeEqualToSize(
    CGSize size1,
    CGSize size2,
  ) {
    return _CGSizeEqualToSize(
      size1,
      size2,
    );
  }

  late final _CGSizeEqualToSizePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGSize, CGSize)>>(
          'CGSizeEqualToSize');
  late final _CGSizeEqualToSize =
      _CGSizeEqualToSizePtr.asFunction<bool Function(CGSize, CGSize)>();

  bool CGRectEqualToRect(
    CGRect rect1,
    CGRect rect2,
  ) {
    return _CGRectEqualToRect(
      rect1,
      rect2,
    );
  }

  late final _CGRectEqualToRectPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect, CGRect)>>(
          'CGRectEqualToRect');
  late final _CGRectEqualToRect =
      _CGRectEqualToRectPtr.asFunction<bool Function(CGRect, CGRect)>();

  CGRect CGRectStandardize(
    CGRect rect,
  ) {
    return _CGRectStandardize(
      rect,
    );
  }

  late final _CGRectStandardizePtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect)>>('CGRectStandardize');
  late final _CGRectStandardize =
      _CGRectStandardizePtr.asFunction<CGRect Function(CGRect)>();

  bool CGRectIsEmpty(
    CGRect rect,
  ) {
    return _CGRectIsEmpty(
      rect,
    );
  }

  late final _CGRectIsEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect)>>('CGRectIsEmpty');
  late final _CGRectIsEmpty =
      _CGRectIsEmptyPtr.asFunction<bool Function(CGRect)>();

  bool CGRectIsNull(
    CGRect rect,
  ) {
    return _CGRectIsNull(
      rect,
    );
  }

  late final _CGRectIsNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect)>>('CGRectIsNull');
  late final _CGRectIsNull =
      _CGRectIsNullPtr.asFunction<bool Function(CGRect)>();

  bool CGRectIsInfinite(
    CGRect rect,
  ) {
    return _CGRectIsInfinite(
      rect,
    );
  }

  late final _CGRectIsInfinitePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect)>>(
          'CGRectIsInfinite');
  late final _CGRectIsInfinite =
      _CGRectIsInfinitePtr.asFunction<bool Function(CGRect)>();

  CGRect CGRectInset(
    CGRect rect,
    double dx,
    double dy,
  ) {
    return _CGRectInset(
      rect,
      dx,
      dy,
    );
  }

  late final _CGRectInsetPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect, CGFloat, CGFloat)>>(
          'CGRectInset');
  late final _CGRectInset =
      _CGRectInsetPtr.asFunction<CGRect Function(CGRect, double, double)>();

  CGRect CGRectIntegral(
    CGRect rect,
  ) {
    return _CGRectIntegral(
      rect,
    );
  }

  late final _CGRectIntegralPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect)>>('CGRectIntegral');
  late final _CGRectIntegral =
      _CGRectIntegralPtr.asFunction<CGRect Function(CGRect)>();

  CGRect CGRectUnion(
    CGRect r1,
    CGRect r2,
  ) {
    return _CGRectUnion(
      r1,
      r2,
    );
  }

  late final _CGRectUnionPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect, CGRect)>>(
          'CGRectUnion');
  late final _CGRectUnion =
      _CGRectUnionPtr.asFunction<CGRect Function(CGRect, CGRect)>();

  CGRect CGRectIntersection(
    CGRect r1,
    CGRect r2,
  ) {
    return _CGRectIntersection(
      r1,
      r2,
    );
  }

  late final _CGRectIntersectionPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect, CGRect)>>(
          'CGRectIntersection');
  late final _CGRectIntersection =
      _CGRectIntersectionPtr.asFunction<CGRect Function(CGRect, CGRect)>();

  CGRect CGRectOffset(
    CGRect rect,
    double dx,
    double dy,
  ) {
    return _CGRectOffset(
      rect,
      dx,
      dy,
    );
  }

  late final _CGRectOffsetPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect, CGFloat, CGFloat)>>(
          'CGRectOffset');
  late final _CGRectOffset =
      _CGRectOffsetPtr.asFunction<CGRect Function(CGRect, double, double)>();

  void CGRectDivide(
    CGRect rect,
    ffi.Pointer<CGRect> slice,
    ffi.Pointer<CGRect> remainder,
    DartCGFloat amount,
    CGRectEdge edge,
  ) {
    return _CGRectDivide(
      rect,
      slice,
      remainder,
      amount,
      edge.value,
    );
  }

  late final _CGRectDividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGRect, ffi.Pointer<CGRect>, ffi.Pointer<CGRect>,
              CGFloat, ffi.Uint32)>>('CGRectDivide');
  late final _CGRectDivide = _CGRectDividePtr.asFunction<
      void Function(
          CGRect, ffi.Pointer<CGRect>, ffi.Pointer<CGRect>, double, int)>();

  bool CGRectContainsPoint(
    CGRect rect,
    CGPoint point,
  ) {
    return _CGRectContainsPoint(
      rect,
      point,
    );
  }

  late final _CGRectContainsPointPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect, CGPoint)>>(
          'CGRectContainsPoint');
  late final _CGRectContainsPoint =
      _CGRectContainsPointPtr.asFunction<bool Function(CGRect, CGPoint)>();

  bool CGRectContainsRect(
    CGRect rect1,
    CGRect rect2,
  ) {
    return _CGRectContainsRect(
      rect1,
      rect2,
    );
  }

  late final _CGRectContainsRectPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect, CGRect)>>(
          'CGRectContainsRect');
  late final _CGRectContainsRect =
      _CGRectContainsRectPtr.asFunction<bool Function(CGRect, CGRect)>();

  bool CGRectIntersectsRect(
    CGRect rect1,
    CGRect rect2,
  ) {
    return _CGRectIntersectsRect(
      rect1,
      rect2,
    );
  }

  late final _CGRectIntersectsRectPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGRect, CGRect)>>(
          'CGRectIntersectsRect');
  late final _CGRectIntersectsRect =
      _CGRectIntersectsRectPtr.asFunction<bool Function(CGRect, CGRect)>();

  CFDictionaryRef CGPointCreateDictionaryRepresentation(
    CGPoint point,
  ) {
    return _CGPointCreateDictionaryRepresentation(
      point,
    );
  }

  late final _CGPointCreateDictionaryRepresentationPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CGPoint)>>(
          'CGPointCreateDictionaryRepresentation');
  late final _CGPointCreateDictionaryRepresentation =
      _CGPointCreateDictionaryRepresentationPtr.asFunction<
          CFDictionaryRef Function(CGPoint)>();

  bool CGPointMakeWithDictionaryRepresentation(
    CFDictionaryRef dict,
    ffi.Pointer<CGPoint> point,
  ) {
    return _CGPointMakeWithDictionaryRepresentation(
      dict,
      point,
    );
  }

  late final _CGPointMakeWithDictionaryRepresentationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(CFDictionaryRef, ffi.Pointer<CGPoint>)>>(
      'CGPointMakeWithDictionaryRepresentation');
  late final _CGPointMakeWithDictionaryRepresentation =
      _CGPointMakeWithDictionaryRepresentationPtr.asFunction<
          bool Function(CFDictionaryRef, ffi.Pointer<CGPoint>)>();

  CFDictionaryRef CGSizeCreateDictionaryRepresentation(
    CGSize size,
  ) {
    return _CGSizeCreateDictionaryRepresentation(
      size,
    );
  }

  late final _CGSizeCreateDictionaryRepresentationPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CGSize)>>(
          'CGSizeCreateDictionaryRepresentation');
  late final _CGSizeCreateDictionaryRepresentation =
      _CGSizeCreateDictionaryRepresentationPtr.asFunction<
          CFDictionaryRef Function(CGSize)>();

  bool CGSizeMakeWithDictionaryRepresentation(
    CFDictionaryRef dict,
    ffi.Pointer<CGSize> size,
  ) {
    return _CGSizeMakeWithDictionaryRepresentation(
      dict,
      size,
    );
  }

  late final _CGSizeMakeWithDictionaryRepresentationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CFDictionaryRef,
              ffi.Pointer<CGSize>)>>('CGSizeMakeWithDictionaryRepresentation');
  late final _CGSizeMakeWithDictionaryRepresentation =
      _CGSizeMakeWithDictionaryRepresentationPtr.asFunction<
          bool Function(CFDictionaryRef, ffi.Pointer<CGSize>)>();

  CFDictionaryRef CGRectCreateDictionaryRepresentation(
    CGRect arg0,
  ) {
    return _CGRectCreateDictionaryRepresentation(
      arg0,
    );
  }

  late final _CGRectCreateDictionaryRepresentationPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CGRect)>>(
          'CGRectCreateDictionaryRepresentation');
  late final _CGRectCreateDictionaryRepresentation =
      _CGRectCreateDictionaryRepresentationPtr.asFunction<
          CFDictionaryRef Function(CGRect)>();

  bool CGRectMakeWithDictionaryRepresentation(
    CFDictionaryRef dict,
    ffi.Pointer<CGRect> rect,
  ) {
    return _CGRectMakeWithDictionaryRepresentation(
      dict,
      rect,
    );
  }

  late final _CGRectMakeWithDictionaryRepresentationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CFDictionaryRef,
              ffi.Pointer<CGRect>)>>('CGRectMakeWithDictionaryRepresentation');
  late final _CGRectMakeWithDictionaryRepresentation =
      _CGRectMakeWithDictionaryRepresentationPtr.asFunction<
          bool Function(CFDictionaryRef, ffi.Pointer<CGRect>)>();

  late final ffi.Pointer<CGAffineTransform> _CGAffineTransformIdentity =
      _lookup<CGAffineTransform>('CGAffineTransformIdentity');

  CGAffineTransform get CGAffineTransformIdentity =>
      _CGAffineTransformIdentity.ref;

  CGAffineTransform CGAffineTransformMake(
    double a,
    double b,
    double c,
    double d,
    double tx,
    double ty,
  ) {
    return _CGAffineTransformMake(
      a,
      b,
      c,
      d,
      tx,
      ty,
    );
  }

  late final _CGAffineTransformMakePtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat, CGFloat)>>('CGAffineTransformMake');
  late final _CGAffineTransformMake = _CGAffineTransformMakePtr.asFunction<
      CGAffineTransform Function(
          double, double, double, double, double, double)>();

  CGAffineTransform CGAffineTransformMakeTranslation(
    double tx,
    double ty,
  ) {
    return _CGAffineTransformMakeTranslation(
      tx,
      ty,
    );
  }

  late final _CGAffineTransformMakeTranslationPtr =
      _lookup<ffi.NativeFunction<CGAffineTransform Function(CGFloat, CGFloat)>>(
          'CGAffineTransformMakeTranslation');
  late final _CGAffineTransformMakeTranslation =
      _CGAffineTransformMakeTranslationPtr.asFunction<
          CGAffineTransform Function(double, double)>();

  CGAffineTransform CGAffineTransformMakeScale(
    double sx,
    double sy,
  ) {
    return _CGAffineTransformMakeScale(
      sx,
      sy,
    );
  }

  late final _CGAffineTransformMakeScalePtr =
      _lookup<ffi.NativeFunction<CGAffineTransform Function(CGFloat, CGFloat)>>(
          'CGAffineTransformMakeScale');
  late final _CGAffineTransformMakeScale = _CGAffineTransformMakeScalePtr
      .asFunction<CGAffineTransform Function(double, double)>();

  CGAffineTransform CGAffineTransformMakeRotation(
    double angle,
  ) {
    return _CGAffineTransformMakeRotation(
      angle,
    );
  }

  late final _CGAffineTransformMakeRotationPtr =
      _lookup<ffi.NativeFunction<CGAffineTransform Function(CGFloat)>>(
          'CGAffineTransformMakeRotation');
  late final _CGAffineTransformMakeRotation = _CGAffineTransformMakeRotationPtr
      .asFunction<CGAffineTransform Function(double)>();

  bool CGAffineTransformIsIdentity(
    CGAffineTransform t,
  ) {
    return _CGAffineTransformIsIdentity(
      t,
    );
  }

  late final _CGAffineTransformIsIdentityPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGAffineTransform)>>(
          'CGAffineTransformIsIdentity');
  late final _CGAffineTransformIsIdentity = _CGAffineTransformIsIdentityPtr
      .asFunction<bool Function(CGAffineTransform)>();

  CGAffineTransform CGAffineTransformTranslate(
    CGAffineTransform t,
    double tx,
    double ty,
  ) {
    return _CGAffineTransformTranslate(
      t,
      tx,
      ty,
    );
  }

  late final _CGAffineTransformTranslatePtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(CGAffineTransform, CGFloat,
              CGFloat)>>('CGAffineTransformTranslate');
  late final _CGAffineTransformTranslate =
      _CGAffineTransformTranslatePtr.asFunction<
          CGAffineTransform Function(CGAffineTransform, double, double)>();

  CGAffineTransform CGAffineTransformScale(
    CGAffineTransform t,
    double sx,
    double sy,
  ) {
    return _CGAffineTransformScale(
      t,
      sx,
      sy,
    );
  }

  late final _CGAffineTransformScalePtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(
              CGAffineTransform, CGFloat, CGFloat)>>('CGAffineTransformScale');
  late final _CGAffineTransformScale = _CGAffineTransformScalePtr.asFunction<
      CGAffineTransform Function(CGAffineTransform, double, double)>();

  CGAffineTransform CGAffineTransformRotate(
    CGAffineTransform t,
    double angle,
  ) {
    return _CGAffineTransformRotate(
      t,
      angle,
    );
  }

  late final _CGAffineTransformRotatePtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(
              CGAffineTransform, CGFloat)>>('CGAffineTransformRotate');
  late final _CGAffineTransformRotate = _CGAffineTransformRotatePtr.asFunction<
      CGAffineTransform Function(CGAffineTransform, double)>();

  CGAffineTransform CGAffineTransformInvert(
    CGAffineTransform t,
  ) {
    return _CGAffineTransformInvert(
      t,
    );
  }

  late final _CGAffineTransformInvertPtr = _lookup<
          ffi.NativeFunction<CGAffineTransform Function(CGAffineTransform)>>(
      'CGAffineTransformInvert');
  late final _CGAffineTransformInvert = _CGAffineTransformInvertPtr.asFunction<
      CGAffineTransform Function(CGAffineTransform)>();

  CGAffineTransform CGAffineTransformConcat(
    CGAffineTransform t1,
    CGAffineTransform t2,
  ) {
    return _CGAffineTransformConcat(
      t1,
      t2,
    );
  }

  late final _CGAffineTransformConcatPtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(CGAffineTransform,
              CGAffineTransform)>>('CGAffineTransformConcat');
  late final _CGAffineTransformConcat = _CGAffineTransformConcatPtr.asFunction<
      CGAffineTransform Function(CGAffineTransform, CGAffineTransform)>();

  bool CGAffineTransformEqualToTransform(
    CGAffineTransform t1,
    CGAffineTransform t2,
  ) {
    return _CGAffineTransformEqualToTransform(
      t1,
      t2,
    );
  }

  late final _CGAffineTransformEqualToTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGAffineTransform,
              CGAffineTransform)>>('CGAffineTransformEqualToTransform');
  late final _CGAffineTransformEqualToTransform =
      _CGAffineTransformEqualToTransformPtr.asFunction<
          bool Function(CGAffineTransform, CGAffineTransform)>();

  CGPoint CGPointApplyAffineTransform(
    CGPoint point,
    CGAffineTransform t,
  ) {
    return _CGPointApplyAffineTransform(
      point,
      t,
    );
  }

  late final _CGPointApplyAffineTransformPtr =
      _lookup<ffi.NativeFunction<CGPoint Function(CGPoint, CGAffineTransform)>>(
          'CGPointApplyAffineTransform');
  late final _CGPointApplyAffineTransform = _CGPointApplyAffineTransformPtr
      .asFunction<CGPoint Function(CGPoint, CGAffineTransform)>();

  CGSize CGSizeApplyAffineTransform(
    CGSize size,
    CGAffineTransform t,
  ) {
    return _CGSizeApplyAffineTransform(
      size,
      t,
    );
  }

  late final _CGSizeApplyAffineTransformPtr =
      _lookup<ffi.NativeFunction<CGSize Function(CGSize, CGAffineTransform)>>(
          'CGSizeApplyAffineTransform');
  late final _CGSizeApplyAffineTransform = _CGSizeApplyAffineTransformPtr
      .asFunction<CGSize Function(CGSize, CGAffineTransform)>();

  CGRect CGRectApplyAffineTransform(
    CGRect rect,
    CGAffineTransform t,
  ) {
    return _CGRectApplyAffineTransform(
      rect,
      t,
    );
  }

  late final _CGRectApplyAffineTransformPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGRect, CGAffineTransform)>>(
          'CGRectApplyAffineTransform');
  late final _CGRectApplyAffineTransform = _CGRectApplyAffineTransformPtr
      .asFunction<CGRect Function(CGRect, CGAffineTransform)>();

  CGAffineTransformComponents CGAffineTransformDecompose(
    CGAffineTransform transform,
  ) {
    return _CGAffineTransformDecompose(
      transform,
    );
  }

  late final _CGAffineTransformDecomposePtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransformComponents Function(
              CGAffineTransform)>>('CGAffineTransformDecompose');
  late final _CGAffineTransformDecompose = _CGAffineTransformDecomposePtr
      .asFunction<CGAffineTransformComponents Function(CGAffineTransform)>();

  CGAffineTransform CGAffineTransformMakeWithComponents(
    CGAffineTransformComponents components,
  ) {
    return _CGAffineTransformMakeWithComponents(
      components,
    );
  }

  late final _CGAffineTransformMakeWithComponentsPtr = _lookup<
          ffi.NativeFunction<
              CGAffineTransform Function(CGAffineTransformComponents)>>(
      'CGAffineTransformMakeWithComponents');
  late final _CGAffineTransformMakeWithComponents =
      _CGAffineTransformMakeWithComponentsPtr.asFunction<
          CGAffineTransform Function(CGAffineTransformComponents)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
          ffi
          .NativeFunction<CFMutableDataRef Function(CFAllocatorRef, CFIndex)>>(
      'CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength =
      _CFDataSetLengthPtr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    CFDataSearchFlags compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions.value,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, CFOptionFlags)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFErrorGetTypeID() {
    return _CFErrorGetTypeID();
  }

  late final _CFErrorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID =
      _CFErrorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainPOSIX =
      _lookup<CFErrorDomain>('kCFErrorDomainPOSIX');

  CFErrorDomain get kCFErrorDomainPOSIX => _kCFErrorDomainPOSIX.value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainOSStatus =
      _lookup<CFErrorDomain>('kCFErrorDomainOSStatus');

  CFErrorDomain get kCFErrorDomainOSStatus => _kCFErrorDomainOSStatus.value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainMach =
      _lookup<CFErrorDomain>('kCFErrorDomainMach');

  CFErrorDomain get kCFErrorDomainMach => _kCFErrorDomainMach.value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainCocoa =
      _lookup<CFErrorDomain>('kCFErrorDomainCocoa');

  CFErrorDomain get kCFErrorDomainCocoa => _kCFErrorDomainCocoa.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedDescriptionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedDescriptionKey');

  CFStringRef get kCFErrorLocalizedDescriptionKey =>
      _kCFErrorLocalizedDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureKey');

  CFStringRef get kCFErrorLocalizedFailureKey =>
      _kCFErrorLocalizedFailureKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureReasonKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureReasonKey');

  CFStringRef get kCFErrorLocalizedFailureReasonKey =>
      _kCFErrorLocalizedFailureReasonKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedRecoverySuggestionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedRecoverySuggestionKey');

  CFStringRef get kCFErrorLocalizedRecoverySuggestionKey =>
      _kCFErrorLocalizedRecoverySuggestionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorDescriptionKey =
      _lookup<CFStringRef>('kCFErrorDescriptionKey');

  CFStringRef get kCFErrorDescriptionKey => _kCFErrorDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorUnderlyingErrorKey =
      _lookup<CFStringRef>('kCFErrorUnderlyingErrorKey');

  CFStringRef get kCFErrorUnderlyingErrorKey =>
      _kCFErrorUnderlyingErrorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorURLKey =
      _lookup<CFStringRef>('kCFErrorURLKey');

  CFStringRef get kCFErrorURLKey => _kCFErrorURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFErrorFilePathKey =
      _lookup<CFStringRef>('kCFErrorFilePathKey');

  CFStringRef get kCFErrorFilePathKey => _kCFErrorFilePathKey.value;

  CFErrorRef CFErrorCreate(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate = _CFErrorCreatePtr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValuesPtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues =
      _CFErrorCreateWithUserInfoKeysAndValuesPtr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain(
      err,
    );
  }

  late final _CFErrorGetDomainPtr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain =
      _CFErrorGetDomainPtr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode(
      err,
    );
  }

  late final _CFErrorGetCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode =
      _CFErrorGetCodePtr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo(
      err,
    );
  }

  late final _CFErrorCopyUserInfoPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo = _CFErrorCopyUserInfoPtr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription(
      err,
    );
  }

  late final _CFErrorCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription =
      _CFErrorCopyDescriptionPtr.asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason(
      err,
    );
  }

  late final _CFErrorCopyFailureReasonPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason = _CFErrorCopyFailureReasonPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion = _CFErrorCopyRecoverySuggestionPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  late final ffi.Pointer<CFArrayCallBacks> _kCFTypeArrayCallBacks =
      _lookup<CFArrayCallBacks>('kCFTypeArrayCallBacks');

  CFArrayCallBacks get kCFTypeArrayCallBacks => _kCFTypeArrayCallBacks.ref;

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate = _CFArrayCreatePtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy = _CFArrayCreateCopyPtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable = _CFArrayCreateMutablePtr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy =
      _CFArrayCreateMutableCopyPtr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue = _CFArrayGetCountOfValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue = _CFArrayContainsValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(CFArrayRef, CFIndex)>>(
      'CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues = _CFArrayGetValuesPtr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction = _CFArrayApplyFunctionPtr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue = _CFArrayGetFirstIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue = _CFArrayGetLastIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValuesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues = _CFArrayBSearchValuesPtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue = _CFArrayAppendValuePtr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex =
      _CFArrayInsertValueAtIndexPtr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex = _CFArraySetValueAtIndexPtr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex = _CFArrayRemoveValueAtIndexPtr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues =
      _CFArrayRemoveAllValuesPtr.asFunction<void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues = _CFArrayReplaceValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices =
      _CFArrayExchangeValuesAtIndicesPtr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues = _CFArraySortValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray = _CFArrayAppendArrayPtr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  int CFCharacterSetGetTypeID() {
    return _CFCharacterSetGetTypeID();
  }

  late final _CFCharacterSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID =
      _CFCharacterSetGetTypeIDPtr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined(
    CFCharacterSetPredefinedSet theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined(
      theSetIdentifier.value,
    );
  }

  late final _CFCharacterSetGetPredefinedPtr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(CFIndex)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined = _CFCharacterSetGetPredefinedPtr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRangePtr = _lookup<
          ffi
          .NativeFunction<CFCharacterSetRef Function(CFAllocatorRef, CFRange)>>(
      'CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange =
      _CFCharacterSetCreateWithCharactersInRangePtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString =
      _CFCharacterSetCreateWithCharactersInStringPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation =
      _CFCharacterSetCreateWithBitmapRepresentationPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSetPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet =
      _CFCharacterSetCreateInvertedSetPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet = _CFCharacterSetIsSupersetOfSetPtr
      .asFunction<int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlanePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane =
      _CFCharacterSetHasMemberInPlanePtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutablePtr = _lookup<
          ffi
          .NativeFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>>(
      'CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable = _CFCharacterSetCreateMutablePtr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy =
      _CFCharacterSetCreateCopyPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy =
      _CFCharacterSetCreateMutableCopyPtr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMemberPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember =
      _CFCharacterSetIsCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMemberPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember =
      _CFCharacterSetIsLongCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation =
      _CFCharacterSetCreateBitmapRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange =
      _CFCharacterSetAddCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange =
      _CFCharacterSetRemoveCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString =
      _CFCharacterSetAddCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString =
      _CFCharacterSetRemoveCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion = _CFCharacterSetUnionPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect = _CFCharacterSetIntersectPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert(
      theSet,
    );
  }

  late final _CFCharacterSetInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert = _CFCharacterSetInvertPtr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFNotificationCenterGetTypeID() {
    return _CFNotificationCenterGetTypeID();
  }

  late final _CFNotificationCenterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID =
      _CFNotificationCenterGetTypeIDPtr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter() {
    return _CFNotificationCenterGetLocalCenter();
  }

  late final _CFNotificationCenterGetLocalCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter =
      _CFNotificationCenterGetLocalCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter() {
    return _CFNotificationCenterGetDistributedCenter();
  }

  late final _CFNotificationCenterGetDistributedCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter =
      _CFNotificationCenterGetDistributedCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter() {
    return _CFNotificationCenterGetDarwinNotifyCenter();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter =
      _CFNotificationCenterGetDarwinNotifyCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    CFNotificationSuspensionBehavior suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior.value,
    );
  }

  late final _CFNotificationCenterAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              CFIndex)>>('CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver =
      _CFNotificationCenterAddObserverPtr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver =
      _CFNotificationCenterRemoveObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver =
      _CFNotificationCenterRemoveEveryObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification =
      _CFNotificationCenterPostNotificationPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions =
      _CFNotificationCenterPostNotificationWithOptionsPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID() {
    return _CFLocaleGetTypeID();
  }

  late final _CFLocaleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID =
      _CFLocaleGetTypeIDPtr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem() {
    return _CFLocaleGetSystem();
  }

  late final _CFLocaleGetSystemPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem =
      _CFLocaleGetSystemPtr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent() {
    return _CFLocaleCopyCurrent();
  }

  late final _CFLocaleCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent =
      _CFLocaleCopyCurrentPtr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers() {
    return _CFLocaleCopyAvailableLocaleIdentifiers();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiersPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers =
      _CFLocaleCopyAvailableLocaleIdentifiersPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes() {
    return _CFLocaleCopyISOLanguageCodes();
  }

  late final _CFLocaleCopyISOLanguageCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes =
      _CFLocaleCopyISOLanguageCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes() {
    return _CFLocaleCopyISOCountryCodes();
  }

  late final _CFLocaleCopyISOCountryCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes =
      _CFLocaleCopyISOCountryCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes() {
    return _CFLocaleCopyISOCurrencyCodes();
  }

  late final _CFLocaleCopyISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes =
      _CFLocaleCopyISOCurrencyCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes() {
    return _CFLocaleCopyCommonISOCurrencyCodes();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes =
      _CFLocaleCopyCommonISOCurrencyCodesPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages() {
    return _CFLocaleCopyPreferredLanguages();
  }

  late final _CFLocaleCopyPreferredLanguagesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages =
      _CFLocaleCopyPreferredLanguagesPtr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString =
      _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString =
      _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr.asFunction<
          int Function(CFLocaleIdentifier)>();

  CFLocaleLanguageDirection CFLocaleGetLanguageCharacterDirection(
    CFStringRef isoLangCode,
  ) {
    return CFLocaleLanguageDirection.fromValue(
        _CFLocaleGetLanguageCharacterDirection(
      isoLangCode,
    ));
  }

  late final _CFLocaleGetLanguageCharacterDirectionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection =
      _CFLocaleGetLanguageCharacterDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFLocaleLanguageDirection CFLocaleGetLanguageLineDirection(
    CFStringRef isoLangCode,
  ) {
    return CFLocaleLanguageDirection.fromValue(
        _CFLocaleGetLanguageLineDirection(
      isoLangCode,
    ));
  }

  late final _CFLocaleGetLanguageLineDirectionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection =
      _CFLocaleGetLanguageLineDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifierPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier =
      _CFLocaleCreateComponentsFromLocaleIdentifierPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponentsPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents =
      _CFLocaleCreateLocaleIdentifierFromComponentsPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreatePtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate = _CFLocaleCreatePtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopyPtr = _lookup<
          ffi
          .NativeFunction<CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>>(
      'CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy = _CFLocaleCreateCopyPtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier(
      locale,
    );
  }

  late final _CFLocaleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier = _CFLocaleGetIdentifierPtr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValuePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue = _CFLocaleGetValuePtr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue =
      _CFLocaleCopyDisplayNameForPropertyValuePtr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFLocaleCurrentLocaleDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFLocaleCurrentLocaleDidChangeNotification');

  CFNotificationName get kCFLocaleCurrentLocaleDidChangeNotification =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleIdentifier');

  CFLocaleKey get kCFLocaleIdentifier => _kCFLocaleIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleLanguageCode =
      _lookup<CFLocaleKey>('kCFLocaleLanguageCode');

  CFLocaleKey get kCFLocaleLanguageCode => _kCFLocaleLanguageCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCountryCode =
      _lookup<CFLocaleKey>('kCFLocaleCountryCode');

  CFLocaleKey get kCFLocaleCountryCode => _kCFLocaleCountryCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleScriptCode =
      _lookup<CFLocaleKey>('kCFLocaleScriptCode');

  CFLocaleKey get kCFLocaleScriptCode => _kCFLocaleScriptCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleVariantCode =
      _lookup<CFLocaleKey>('kCFLocaleVariantCode');

  CFLocaleKey get kCFLocaleVariantCode => _kCFLocaleVariantCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleExemplarCharacterSet =
      _lookup<CFLocaleKey>('kCFLocaleExemplarCharacterSet');

  CFLocaleKey get kCFLocaleExemplarCharacterSet =>
      _kCFLocaleExemplarCharacterSet.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendarIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCalendarIdentifier');

  CFLocaleKey get kCFLocaleCalendarIdentifier =>
      _kCFLocaleCalendarIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendar =
      _lookup<CFLocaleKey>('kCFLocaleCalendar');

  CFLocaleKey get kCFLocaleCalendar => _kCFLocaleCalendar.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollationIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollationIdentifier');

  CFLocaleKey get kCFLocaleCollationIdentifier =>
      _kCFLocaleCollationIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleUsesMetricSystem =
      _lookup<CFLocaleKey>('kCFLocaleUsesMetricSystem');

  CFLocaleKey get kCFLocaleUsesMetricSystem => _kCFLocaleUsesMetricSystem.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleMeasurementSystem =
      _lookup<CFLocaleKey>('kCFLocaleMeasurementSystem');

  CFLocaleKey get kCFLocaleMeasurementSystem =>
      _kCFLocaleMeasurementSystem.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleDecimalSeparator =
      _lookup<CFLocaleKey>('kCFLocaleDecimalSeparator');

  CFLocaleKey get kCFLocaleDecimalSeparator => _kCFLocaleDecimalSeparator.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleGroupingSeparator =
      _lookup<CFLocaleKey>('kCFLocaleGroupingSeparator');

  CFLocaleKey get kCFLocaleGroupingSeparator =>
      _kCFLocaleGroupingSeparator.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencySymbol =
      _lookup<CFLocaleKey>('kCFLocaleCurrencySymbol');

  CFLocaleKey get kCFLocaleCurrencySymbol => _kCFLocaleCurrencySymbol.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencyCode =
      _lookup<CFLocaleKey>('kCFLocaleCurrencyCode');

  CFLocaleKey get kCFLocaleCurrencyCode => _kCFLocaleCurrencyCode.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollatorIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollatorIdentifier');

  CFLocaleKey get kCFLocaleCollatorIdentifier =>
      _kCFLocaleCollatorIdentifier.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationBeginDelimiterKey =>
      _kCFLocaleQuotationBeginDelimiterKey.value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationEndDelimiterKey =>
      _kCFLocaleQuotationEndDelimiterKey.value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationBeginDelimiterKey =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationEndDelimiterKey =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFGregorianCalendar =
      _lookup<CFCalendarIdentifier>('kCFGregorianCalendar');

  CFCalendarIdentifier get kCFGregorianCalendar => _kCFGregorianCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFBuddhistCalendar =
      _lookup<CFCalendarIdentifier>('kCFBuddhistCalendar');

  CFCalendarIdentifier get kCFBuddhistCalendar => _kCFBuddhistCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFChineseCalendar =
      _lookup<CFCalendarIdentifier>('kCFChineseCalendar');

  CFCalendarIdentifier get kCFChineseCalendar => _kCFChineseCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFHebrewCalendar =
      _lookup<CFCalendarIdentifier>('kCFHebrewCalendar');

  CFCalendarIdentifier get kCFHebrewCalendar => _kCFHebrewCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCalendar');

  CFCalendarIdentifier get kCFIslamicCalendar => _kCFIslamicCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCivilCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCivilCalendar');

  CFCalendarIdentifier get kCFIslamicCivilCalendar =>
      _kCFIslamicCivilCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFJapaneseCalendar =
      _lookup<CFCalendarIdentifier>('kCFJapaneseCalendar');

  CFCalendarIdentifier get kCFJapaneseCalendar => _kCFJapaneseCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFRepublicOfChinaCalendar =
      _lookup<CFCalendarIdentifier>('kCFRepublicOfChinaCalendar');

  CFCalendarIdentifier get kCFRepublicOfChinaCalendar =>
      _kCFRepublicOfChinaCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFPersianCalendar =
      _lookup<CFCalendarIdentifier>('kCFPersianCalendar');

  CFCalendarIdentifier get kCFPersianCalendar => _kCFPersianCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIndianCalendar =
      _lookup<CFCalendarIdentifier>('kCFIndianCalendar');

  CFCalendarIdentifier get kCFIndianCalendar => _kCFIndianCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFISO8601Calendar =
      _lookup<CFCalendarIdentifier>('kCFISO8601Calendar');

  CFCalendarIdentifier get kCFISO8601Calendar => _kCFISO8601Calendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicTabularCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicTabularCalendar');

  CFCalendarIdentifier get kCFIslamicTabularCalendar =>
      _kCFIslamicTabularCalendar.value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicUmmAlQuraCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicUmmAlQuraCalendar');

  CFCalendarIdentifier get kCFIslamicUmmAlQuraCalendar =>
      _kCFIslamicUmmAlQuraCalendar.value;

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<ffi.Char>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring = _CFStringCreateWithSubstringPtr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
          ffi
          .NativeFunction<CFStringRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFStringRef CFStringCreateStringWithValidatedFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef validFormatSpecifiers,
    CFStringRef format,
    ffi.Pointer<CFErrorRef> errorPtr,
  ) {
    return _CFStringCreateStringWithValidatedFormat(
      alloc,
      formatOptions,
      validFormatSpecifiers,
      format,
      errorPtr,
    );
  }

  late final _CFStringCreateStringWithValidatedFormatPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
                  CFStringRef, ffi.Pointer<CFErrorRef>)>>(
      'CFStringCreateStringWithValidatedFormat');
  late final _CFStringCreateStringWithValidatedFormat =
      _CFStringCreateStringWithValidatedFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              CFStringRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef CFStringCreateStringWithValidatedFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef validFormatSpecifiers,
    CFStringRef format,
    va_list arguments,
    ffi.Pointer<CFErrorRef> errorPtr,
  ) {
    return _CFStringCreateStringWithValidatedFormatAndArguments(
      alloc,
      formatOptions,
      validFormatSpecifiers,
      format,
      arguments,
      errorPtr,
    );
  }

  late final _CFStringCreateStringWithValidatedFormatAndArgumentsPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
                  CFStringRef, va_list, ffi.Pointer<CFErrorRef>)>>(
      'CFStringCreateStringWithValidatedFormatAndArguments');
  late final _CFStringCreateStringWithValidatedFormatAndArguments =
      _CFStringCreateStringWithValidatedFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              CFStringRef, va_list, ffi.Pointer<CFErrorRef>)>();

  CFMutableStringRef CFStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr$1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr$1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr$1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr$1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr$1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr$1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Char>)>();

  CFComparisonResult CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    CFStringCompareFlags compareOptions,
    CFLocaleRef locale,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions.value,
      locale,
    ));
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef, CFRange, CFOptionFlags,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  CFComparisonResult CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    CFStringCompareFlags compareOptions,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions.value,
    ));
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef, CFRange,
              CFOptionFlags)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  CFComparisonResult CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    CFStringCompareFlags compareOptions,
  ) {
    return CFComparisonResult.fromValue(_CFStringCompare(
      theString1,
      theString2,
      compareOptions.value,
    ));
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef, CFStringRef, CFOptionFlags)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  DartBoolean CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions.value,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFOptionFlags,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  DartBoolean CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions.value,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef, CFRange, CFOptionFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions.value,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              CFOptionFlags)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions.value,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, CFOptionFlags)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  DartBoolean CFStringFindCharacterFromSet(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    CFStringCompareFlags searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions.value,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFCharacterSetRef,
              CFRange,
              CFOptionFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFStringRef)>>(
      'CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString = _CFStringAppendPascalStringPtr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString(
    CFMutableStringRef theString,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<ffi.Char>, int)>();

  void CFStringAppendFormat(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFStringRef)>>(
      'CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  DartCFIndex CFStringFindAndReplace(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    CFStringCompareFlags compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions.value,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, CFOptionFlags)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFLocaleRef)>>(
      'CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFLocaleRef)>>(
      'CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableStringRef, CFLocaleRef)>>(
      'CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize(
    CFMutableStringRef theString,
    CFStringNormalizationForm theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm.value,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFIndex)>>(
      'CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold(
    CFMutableStringRef theString,
    CFStringCompareFlags theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags.value,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFOptionFlags, CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(ffi.UnsignedLong)>>(
          'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  void CFShow(
    CFTypeRef obj,
  ) {
    return _CFShow(
      obj,
    );
  }

  late final _CFShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow = _CFShowPtr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr(
    CFStringRef str,
  ) {
    return _CFShowStr(
      str,
    );
  }

  late final _CFShowStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr =
      _CFShowStrPtr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString(
    ffi.Pointer<ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString(
      cStr,
    );
  }

  late final ___CFStringMakeConstantStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Char>)>>(
          '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString = ___CFStringMakeConstantStringPtr
      .asFunction<CFStringRef Function(ffi.Pointer<ffi.Char>)>();

  int CFURLGetTypeID() {
    return _CFURLGetTypeID();
  }

  late final _CFURLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID = _CFURLGetTypeIDPtr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes = _CFURLCreateWithBytesPtr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData = _CFURLCreateDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes =
      _CFURLCreateAbsoluteURLWithBytesPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    CFURLPathStyle pathStyle,
    DartBoolean isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath(
      allocator,
      filePath,
      pathStyle.value,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPathPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, CFIndex,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath = _CFURLCreateWithFileSystemPathPtr
      .asFunction<CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation =
      _CFURLCreateFromFileSystemRepresentationPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    CFURLPathStyle pathStyle,
    DartBoolean isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase(
      allocator,
      filePath,
      pathStyle.value,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBasePtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, CFIndex, Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase =
      _CFURLCreateWithFileSystemPathRelativeToBasePtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase =
      _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation =
      _CFURLGetFileSystemRepresentationPtr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL =
      _CFURLCopyAbsoluteURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString(
    CFURLRef anURL,
  ) {
    return _CFURLGetString(
      anURL,
    );
  }

  late final _CFURLGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString =
      _CFURLGetStringPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL(
      anURL,
    );
  }

  late final _CFURLGetBaseURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL =
      _CFURLGetBaseURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed =
      _CFURLCanBeDecomposedPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme(
      anURL,
    );
  }

  late final _CFURLCopySchemePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme =
      _CFURLCopySchemePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation(
      anURL,
    );
  }

  late final _CFURLCopyNetLocationPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation =
      _CFURLCopyNetLocationPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath(
      anURL,
    );
  }

  late final _CFURLCopyPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath =
      _CFURLCopyPathPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath = _CFURLCopyStrictPathPtr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath(
    CFURLRef anURL,
    CFURLPathStyle pathStyle,
  ) {
    return _CFURLCopyFileSystemPath(
      anURL,
      pathStyle.value,
    );
  }

  late final _CFURLCopyFileSystemPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFIndex)>>(
          'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath = _CFURLCopyFileSystemPathPtr.asFunction<
      CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPathPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath =
      _CFURLHasDirectoryPathPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier = _CFURLCopyResourceSpecifierPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName(
      anURL,
    );
  }

  late final _CFURLCopyHostNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName =
      _CFURLCopyHostNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber(
      anURL,
    );
  }

  late final _CFURLGetPortNumberPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber =
      _CFURLGetPortNumberPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName(
      anURL,
    );
  }

  late final _CFURLCopyUserNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName =
      _CFURLCopyUserNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword(
      anURL,
    );
  }

  late final _CFURLCopyPasswordPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword =
      _CFURLCopyPasswordPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString = _CFURLCopyParameterStringPtr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString = _CFURLCopyQueryStringPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragmentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment = _CFURLCopyFragmentPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent(
      url,
    );
  }

  late final _CFURLCopyLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent = _CFURLCopyLastPathComponentPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension(
      url,
    );
  }

  late final _CFURLCopyPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension =
      _CFURLCopyPathExtensionPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponentPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent =
      _CFURLCreateCopyAppendingPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent =
      _CFURLCreateCopyDeletingLastPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension$,
  ) {
    return _CFURLCreateCopyAppendingPathExtension(
      allocator,
      url,
      extension$,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtensionPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension =
      _CFURLCreateCopyAppendingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension =
      _CFURLCreateCopyDeletingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes = _CFURLGetBytesPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent(
    CFURLRef url,
    CFURLComponentType component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent(
      url,
      component.value,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponentPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent = _CFURLGetByteRangeForComponentPtr
      .asFunction<CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes =
      _CFURLCreateStringByReplacingPercentEscapesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes =
      _CFURLCreateStringByAddingPercentEscapesPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL(
      url,
    );
  }

  late final _CFURLIsFileReferenceURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL =
      _CFURLIsFileReferenceURLPtr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL =
      _CFURLCreateFileReferenceURLPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL = _CFURLCreateFilePathURLPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRefPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef = _CFURLCreateFromFSRefPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRefPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef = _CFURLGetFSRefPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey =
      _CFURLCopyResourcePropertyForKeyPtr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys =
      _CFURLCopyResourcePropertiesForKeysPtr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey =
      _CFURLSetResourcePropertyForKeyPtr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys =
      _CFURLSetResourcePropertiesForKeysPtr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLKeysOfUnsetValuesKey =
      _lookup<CFStringRef>('kCFURLKeysOfUnsetValuesKey');

  CFStringRef get kCFURLKeysOfUnsetValuesKey =>
      _kCFURLKeysOfUnsetValuesKey.value;

  void CFURLClearResourcePropertyCacheForKey(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey =
      _CFURLClearResourcePropertyCacheForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache =
      _CFURLClearResourcePropertyCachePtr.asFunction<void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKeyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFURLRef, CFStringRef, CFTypeRef)>>(
      'CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey =
      _CFURLSetTemporaryResourcePropertyForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachablePtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<CFErrorRef>)>>(
      'CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable = _CFURLResourceIsReachablePtr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLNameKey =
      _lookup<CFStringRef>('kCFURLNameKey');

  CFStringRef get kCFURLNameKey => _kCFURLNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLLocalizedNameKey');

  CFStringRef get kCFURLLocalizedNameKey => _kCFURLLocalizedNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsRegularFileKey =
      _lookup<CFStringRef>('kCFURLIsRegularFileKey');

  CFStringRef get kCFURLIsRegularFileKey => _kCFURLIsRegularFileKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsDirectoryKey =
      _lookup<CFStringRef>('kCFURLIsDirectoryKey');

  CFStringRef get kCFURLIsDirectoryKey => _kCFURLIsDirectoryKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSymbolicLinkKey =
      _lookup<CFStringRef>('kCFURLIsSymbolicLinkKey');

  CFStringRef get kCFURLIsSymbolicLinkKey => _kCFURLIsSymbolicLinkKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsVolumeKey =
      _lookup<CFStringRef>('kCFURLIsVolumeKey');

  CFStringRef get kCFURLIsVolumeKey => _kCFURLIsVolumeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPackageKey =
      _lookup<CFStringRef>('kCFURLIsPackageKey');

  CFStringRef get kCFURLIsPackageKey => _kCFURLIsPackageKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsApplicationKey =
      _lookup<CFStringRef>('kCFURLIsApplicationKey');

  CFStringRef get kCFURLIsApplicationKey => _kCFURLIsApplicationKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLApplicationIsScriptableKey =
      _lookup<CFStringRef>('kCFURLApplicationIsScriptableKey');

  CFStringRef get kCFURLApplicationIsScriptableKey =>
      _kCFURLApplicationIsScriptableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSystemImmutableKey =
      _lookup<CFStringRef>('kCFURLIsSystemImmutableKey');

  CFStringRef get kCFURLIsSystemImmutableKey =>
      _kCFURLIsSystemImmutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUserImmutableKey =
      _lookup<CFStringRef>('kCFURLIsUserImmutableKey');

  CFStringRef get kCFURLIsUserImmutableKey => _kCFURLIsUserImmutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsHiddenKey =
      _lookup<CFStringRef>('kCFURLIsHiddenKey');

  CFStringRef get kCFURLIsHiddenKey => _kCFURLIsHiddenKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLHasHiddenExtensionKey =
      _lookup<CFStringRef>('kCFURLHasHiddenExtensionKey');

  CFStringRef get kCFURLHasHiddenExtensionKey =>
      _kCFURLHasHiddenExtensionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLCreationDateKey =
      _lookup<CFStringRef>('kCFURLCreationDateKey');

  CFStringRef get kCFURLCreationDateKey => _kCFURLCreationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentAccessDateKey =
      _lookup<CFStringRef>('kCFURLContentAccessDateKey');

  CFStringRef get kCFURLContentAccessDateKey =>
      _kCFURLContentAccessDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentModificationDateKey =
      _lookup<CFStringRef>('kCFURLContentModificationDateKey');

  CFStringRef get kCFURLContentModificationDateKey =>
      _kCFURLContentModificationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLAttributeModificationDateKey =
      _lookup<CFStringRef>('kCFURLAttributeModificationDateKey');

  CFStringRef get kCFURLAttributeModificationDateKey =>
      _kCFURLAttributeModificationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileIdentifierKey');

  CFStringRef get kCFURLFileIdentifierKey => _kCFURLFileIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileContentIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileContentIdentifierKey');

  CFStringRef get kCFURLFileContentIdentifierKey =>
      _kCFURLFileContentIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayShareFileContentKey =
      _lookup<CFStringRef>('kCFURLMayShareFileContentKey');

  CFStringRef get kCFURLMayShareFileContentKey =>
      _kCFURLMayShareFileContentKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayHaveExtendedAttributesKey =
      _lookup<CFStringRef>('kCFURLMayHaveExtendedAttributesKey');

  CFStringRef get kCFURLMayHaveExtendedAttributesKey =>
      _kCFURLMayHaveExtendedAttributesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPurgeableKey =
      _lookup<CFStringRef>('kCFURLIsPurgeableKey');

  CFStringRef get kCFURLIsPurgeableKey => _kCFURLIsPurgeableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSparseKey =
      _lookup<CFStringRef>('kCFURLIsSparseKey');

  CFStringRef get kCFURLIsSparseKey => _kCFURLIsSparseKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLinkCountKey =
      _lookup<CFStringRef>('kCFURLLinkCountKey');

  CFStringRef get kCFURLLinkCountKey => _kCFURLLinkCountKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLParentDirectoryURLKey =
      _lookup<CFStringRef>('kCFURLParentDirectoryURLKey');

  CFStringRef get kCFURLParentDirectoryURLKey =>
      _kCFURLParentDirectoryURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLKey =
      _lookup<CFStringRef>('kCFURLVolumeURLKey');

  CFStringRef get kCFURLVolumeURLKey => _kCFURLVolumeURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTypeIdentifierKey =
      _lookup<CFStringRef>('kCFURLTypeIdentifierKey');

  CFStringRef get kCFURLTypeIdentifierKey => _kCFURLTypeIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedTypeDescriptionKey =
      _lookup<CFStringRef>('kCFURLLocalizedTypeDescriptionKey');

  CFStringRef get kCFURLLocalizedTypeDescriptionKey =>
      _kCFURLLocalizedTypeDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelNumberKey =
      _lookup<CFStringRef>('kCFURLLabelNumberKey');

  CFStringRef get kCFURLLabelNumberKey => _kCFURLLabelNumberKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelColorKey =
      _lookup<CFStringRef>('kCFURLLabelColorKey');

  CFStringRef get kCFURLLabelColorKey => _kCFURLLabelColorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedLabelKey =
      _lookup<CFStringRef>('kCFURLLocalizedLabelKey');

  CFStringRef get kCFURLLocalizedLabelKey => _kCFURLLocalizedLabelKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLEffectiveIconKey =
      _lookup<CFStringRef>('kCFURLEffectiveIconKey');

  CFStringRef get kCFURLEffectiveIconKey => _kCFURLEffectiveIconKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLCustomIconKey =
      _lookup<CFStringRef>('kCFURLCustomIconKey');

  CFStringRef get kCFURLCustomIconKey => _kCFURLCustomIconKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileResourceIdentifierKey');

  CFStringRef get kCFURLFileResourceIdentifierKey =>
      _kCFURLFileResourceIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIdentifierKey =
      _lookup<CFStringRef>('kCFURLVolumeIdentifierKey');

  CFStringRef get kCFURLVolumeIdentifierKey => _kCFURLVolumeIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLPreferredIOBlockSizeKey =
      _lookup<CFStringRef>('kCFURLPreferredIOBlockSizeKey');

  CFStringRef get kCFURLPreferredIOBlockSizeKey =>
      _kCFURLPreferredIOBlockSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsReadableKey =
      _lookup<CFStringRef>('kCFURLIsReadableKey');

  CFStringRef get kCFURLIsReadableKey => _kCFURLIsReadableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsWritableKey =
      _lookup<CFStringRef>('kCFURLIsWritableKey');

  CFStringRef get kCFURLIsWritableKey => _kCFURLIsWritableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExecutableKey =
      _lookup<CFStringRef>('kCFURLIsExecutableKey');

  CFStringRef get kCFURLIsExecutableKey => _kCFURLIsExecutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSecurityKey =
      _lookup<CFStringRef>('kCFURLFileSecurityKey');

  CFStringRef get kCFURLFileSecurityKey => _kCFURLFileSecurityKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExcludedFromBackupKey =
      _lookup<CFStringRef>('kCFURLIsExcludedFromBackupKey');

  CFStringRef get kCFURLIsExcludedFromBackupKey =>
      _kCFURLIsExcludedFromBackupKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTagNamesKey =
      _lookup<CFStringRef>('kCFURLTagNamesKey');

  CFStringRef get kCFURLTagNamesKey => _kCFURLTagNamesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLPathKey =
      _lookup<CFStringRef>('kCFURLPathKey');

  CFStringRef get kCFURLPathKey => _kCFURLPathKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLCanonicalPathKey =
      _lookup<CFStringRef>('kCFURLCanonicalPathKey');

  CFStringRef get kCFURLCanonicalPathKey => _kCFURLCanonicalPathKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsMountTriggerKey =
      _lookup<CFStringRef>('kCFURLIsMountTriggerKey');

  CFStringRef get kCFURLIsMountTriggerKey => _kCFURLIsMountTriggerKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLGenerationIdentifierKey =
      _lookup<CFStringRef>('kCFURLGenerationIdentifierKey');

  CFStringRef get kCFURLGenerationIdentifierKey =>
      _kCFURLGenerationIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLDocumentIdentifierKey =
      _lookup<CFStringRef>('kCFURLDocumentIdentifierKey');

  CFStringRef get kCFURLDocumentIdentifierKey =>
      _kCFURLDocumentIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLAddedToDirectoryDateKey =
      _lookup<CFStringRef>('kCFURLAddedToDirectoryDateKey');

  CFStringRef get kCFURLAddedToDirectoryDateKey =>
      _kCFURLAddedToDirectoryDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLQuarantinePropertiesKey =
      _lookup<CFStringRef>('kCFURLQuarantinePropertiesKey');

  CFStringRef get kCFURLQuarantinePropertiesKey =>
      _kCFURLQuarantinePropertiesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeKey =
      _lookup<CFStringRef>('kCFURLFileResourceTypeKey');

  CFStringRef get kCFURLFileResourceTypeKey => _kCFURLFileResourceTypeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeNamedPipe =
      _lookup<CFStringRef>('kCFURLFileResourceTypeNamedPipe');

  CFStringRef get kCFURLFileResourceTypeNamedPipe =>
      _kCFURLFileResourceTypeNamedPipe.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeCharacterSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeCharacterSpecial');

  CFStringRef get kCFURLFileResourceTypeCharacterSpecial =>
      _kCFURLFileResourceTypeCharacterSpecial.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeDirectory =
      _lookup<CFStringRef>('kCFURLFileResourceTypeDirectory');

  CFStringRef get kCFURLFileResourceTypeDirectory =>
      _kCFURLFileResourceTypeDirectory.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeBlockSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeBlockSpecial');

  CFStringRef get kCFURLFileResourceTypeBlockSpecial =>
      _kCFURLFileResourceTypeBlockSpecial.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeRegular =
      _lookup<CFStringRef>('kCFURLFileResourceTypeRegular');

  CFStringRef get kCFURLFileResourceTypeRegular =>
      _kCFURLFileResourceTypeRegular.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSymbolicLink =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSymbolicLink');

  CFStringRef get kCFURLFileResourceTypeSymbolicLink =>
      _kCFURLFileResourceTypeSymbolicLink.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSocket =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSocket');

  CFStringRef get kCFURLFileResourceTypeSocket =>
      _kCFURLFileResourceTypeSocket.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeUnknown =
      _lookup<CFStringRef>('kCFURLFileResourceTypeUnknown');

  CFStringRef get kCFURLFileResourceTypeUnknown =>
      _kCFURLFileResourceTypeUnknown.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSizeKey =
      _lookup<CFStringRef>('kCFURLFileSizeKey');

  CFStringRef get kCFURLFileSizeKey => _kCFURLFileSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLFileAllocatedSizeKey');

  CFStringRef get kCFURLFileAllocatedSizeKey =>
      _kCFURLFileAllocatedSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileSizeKey');

  CFStringRef get kCFURLTotalFileSizeKey => _kCFURLTotalFileSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileAllocatedSizeKey');

  CFStringRef get kCFURLTotalFileAllocatedSizeKey =>
      _kCFURLTotalFileAllocatedSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsAliasFileKey =
      _lookup<CFStringRef>('kCFURLIsAliasFileKey');

  CFStringRef get kCFURLIsAliasFileKey => _kCFURLIsAliasFileKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionKey =
      _lookup<CFStringRef>('kCFURLFileProtectionKey');

  CFStringRef get kCFURLFileProtectionKey => _kCFURLFileProtectionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionNone =
      _lookup<CFStringRef>('kCFURLFileProtectionNone');

  CFStringRef get kCFURLFileProtectionNone => _kCFURLFileProtectionNone.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionComplete =
      _lookup<CFStringRef>('kCFURLFileProtectionComplete');

  CFStringRef get kCFURLFileProtectionComplete =>
      _kCFURLFileProtectionComplete.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionCompleteUnlessOpen =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteUnlessOpen');

  CFStringRef get kCFURLFileProtectionCompleteUnlessOpen =>
      _kCFURLFileProtectionCompleteUnlessOpen.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<CFStringRef>(
          'kCFURLFileProtectionCompleteUntilFirstUserAuthentication');

  CFStringRef get kCFURLFileProtectionCompleteUntilFirstUserAuthentication =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteWhenUserInactive =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteWhenUserInactive');

  CFStringRef get kCFURLFileProtectionCompleteWhenUserInactive =>
      _kCFURLFileProtectionCompleteWhenUserInactive.value;

  late final ffi.Pointer<CFStringRef> _kCFURLDirectoryEntryCountKey =
      _lookup<CFStringRef>('kCFURLDirectoryEntryCountKey');

  CFStringRef get kCFURLDirectoryEntryCountKey =>
      _kCFURLDirectoryEntryCountKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeLocalizedFormatDescriptionKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedFormatDescriptionKey');

  CFStringRef get kCFURLVolumeLocalizedFormatDescriptionKey =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTotalCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeTotalCapacityKey');

  CFStringRef get kCFURLVolumeTotalCapacityKey =>
      _kCFURLVolumeTotalCapacityKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeAvailableCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityKey');

  CFStringRef get kCFURLVolumeAvailableCapacityKey =>
      _kCFURLVolumeAvailableCapacityKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityForImportantUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForImportantUsageKey =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<CFStringRef>(
          'kCFURLVolumeAvailableCapacityForOpportunisticUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeResourceCountKey =
      _lookup<CFStringRef>('kCFURLVolumeResourceCountKey');

  CFStringRef get kCFURLVolumeResourceCountKey =>
      _kCFURLVolumeResourceCountKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsPersistentIDsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsPersistentIDsKey');

  CFStringRef get kCFURLVolumeSupportsPersistentIDsKey =>
      _kCFURLVolumeSupportsPersistentIDsKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSymbolicLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSymbolicLinksKey');

  CFStringRef get kCFURLVolumeSupportsSymbolicLinksKey =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsHardLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsHardLinksKey');

  CFStringRef get kCFURLVolumeSupportsHardLinksKey =>
      _kCFURLVolumeSupportsHardLinksKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsJournalingKey');

  CFStringRef get kCFURLVolumeSupportsJournalingKey =>
      _kCFURLVolumeSupportsJournalingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeIsJournalingKey');

  CFStringRef get kCFURLVolumeIsJournalingKey =>
      _kCFURLVolumeIsJournalingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSparseFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSparseFilesKey');

  CFStringRef get kCFURLVolumeSupportsSparseFilesKey =>
      _kCFURLVolumeSupportsSparseFilesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsZeroRunsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsZeroRunsKey');

  CFStringRef get kCFURLVolumeSupportsZeroRunsKey =>
      _kCFURLVolumeSupportsZeroRunsKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCaseSensitiveNamesKey');

  CFStringRef get kCFURLVolumeSupportsCaseSensitiveNamesKey =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCasePreservedNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCasePreservedNamesKey');

  CFStringRef get kCFURLVolumeSupportsCasePreservedNamesKey =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRootDirectoryDatesKey');

  CFStringRef get kCFURLVolumeSupportsRootDirectoryDatesKey =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsVolumeSizesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsVolumeSizesKey');

  CFStringRef get kCFURLVolumeSupportsVolumeSizesKey =>
      _kCFURLVolumeSupportsVolumeSizesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRenamingKey');

  CFStringRef get kCFURLVolumeSupportsRenamingKey =>
      _kCFURLVolumeSupportsRenamingKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAdvisoryFileLockingKey');

  CFStringRef get kCFURLVolumeSupportsAdvisoryFileLockingKey =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsExtendedSecurityKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExtendedSecurityKey');

  CFStringRef get kCFURLVolumeSupportsExtendedSecurityKey =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsBrowsableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsBrowsableKey');

  CFStringRef get kCFURLVolumeIsBrowsableKey =>
      _kCFURLVolumeIsBrowsableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMaximumFileSizeKey =
      _lookup<CFStringRef>('kCFURLVolumeMaximumFileSizeKey');

  CFStringRef get kCFURLVolumeMaximumFileSizeKey =>
      _kCFURLVolumeMaximumFileSizeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEjectableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEjectableKey');

  CFStringRef get kCFURLVolumeIsEjectableKey =>
      _kCFURLVolumeIsEjectableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRemovableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRemovableKey');

  CFStringRef get kCFURLVolumeIsRemovableKey =>
      _kCFURLVolumeIsRemovableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsInternalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsInternalKey');

  CFStringRef get kCFURLVolumeIsInternalKey => _kCFURLVolumeIsInternalKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsAutomountedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsAutomountedKey');

  CFStringRef get kCFURLVolumeIsAutomountedKey =>
      _kCFURLVolumeIsAutomountedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsLocalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsLocalKey');

  CFStringRef get kCFURLVolumeIsLocalKey => _kCFURLVolumeIsLocalKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsReadOnlyKey =
      _lookup<CFStringRef>('kCFURLVolumeIsReadOnlyKey');

  CFStringRef get kCFURLVolumeIsReadOnlyKey => _kCFURLVolumeIsReadOnlyKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeCreationDateKey =
      _lookup<CFStringRef>('kCFURLVolumeCreationDateKey');

  CFStringRef get kCFURLVolumeCreationDateKey =>
      _kCFURLVolumeCreationDateKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLForRemountingKey =
      _lookup<CFStringRef>('kCFURLVolumeURLForRemountingKey');

  CFStringRef get kCFURLVolumeURLForRemountingKey =>
      _kCFURLVolumeURLForRemountingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeUUIDStringKey =
      _lookup<CFStringRef>('kCFURLVolumeUUIDStringKey');

  CFStringRef get kCFURLVolumeUUIDStringKey => _kCFURLVolumeUUIDStringKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeNameKey');

  CFStringRef get kCFURLVolumeNameKey => _kCFURLVolumeNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedNameKey');

  CFStringRef get kCFURLVolumeLocalizedNameKey =>
      _kCFURLVolumeLocalizedNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEncryptedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEncryptedKey');

  CFStringRef get kCFURLVolumeIsEncryptedKey =>
      _kCFURLVolumeIsEncryptedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRootFileSystemKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRootFileSystemKey');

  CFStringRef get kCFURLVolumeIsRootFileSystemKey =>
      _kCFURLVolumeIsRootFileSystemKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsCompressionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCompressionKey');

  CFStringRef get kCFURLVolumeSupportsCompressionKey =>
      _kCFURLVolumeSupportsCompressionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileCloningKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileCloningKey');

  CFStringRef get kCFURLVolumeSupportsFileCloningKey =>
      _kCFURLVolumeSupportsFileCloningKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSwapRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSwapRenamingKey');

  CFStringRef get kCFURLVolumeSupportsSwapRenamingKey =>
      _kCFURLVolumeSupportsSwapRenamingKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsExclusiveRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExclusiveRenamingKey');

  CFStringRef get kCFURLVolumeSupportsExclusiveRenamingKey =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsImmutableFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsImmutableFilesKey');

  CFStringRef get kCFURLVolumeSupportsImmutableFilesKey =>
      _kCFURLVolumeSupportsImmutableFilesKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAccessPermissionsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAccessPermissionsKey');

  CFStringRef get kCFURLVolumeSupportsAccessPermissionsKey =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileProtectionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileProtectionKey');

  CFStringRef get kCFURLVolumeSupportsFileProtectionKey =>
      _kCFURLVolumeSupportsFileProtectionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTypeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeTypeNameKey');

  CFStringRef get kCFURLVolumeTypeNameKey => _kCFURLVolumeTypeNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSubtypeKey =
      _lookup<CFStringRef>('kCFURLVolumeSubtypeKey');

  CFStringRef get kCFURLVolumeSubtypeKey => _kCFURLVolumeSubtypeKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMountFromLocationKey =
      _lookup<CFStringRef>('kCFURLVolumeMountFromLocationKey');

  CFStringRef get kCFURLVolumeMountFromLocationKey =>
      _kCFURLVolumeMountFromLocationKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUbiquitousItemKey =
      _lookup<CFStringRef>('kCFURLIsUbiquitousItemKey');

  CFStringRef get kCFURLIsUbiquitousItemKey => _kCFURLIsUbiquitousItemKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemHasUnresolvedConflictsKey');

  CFStringRef get kCFURLUbiquitousItemHasUnresolvedConflictsKey =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadedKey =>
      _kCFURLUbiquitousItemIsDownloadedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadingKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadingKey =>
      _kCFURLUbiquitousItemIsDownloadingKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadedKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadedKey =>
      _kCFURLUbiquitousItemIsUploadedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadingKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadingKey =>
      _kCFURLUbiquitousItemIsUploadingKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemPercentDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentDownloadedKey =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemPercentUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentUploadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentUploadedKey =>
      _kCFURLUbiquitousItemPercentUploadedKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusKey =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemDownloadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingErrorKey =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemUploadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemUploadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemUploadingErrorKey =>
      _kCFURLUbiquitousItemUploadingErrorKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsExcludedFromSyncKey');

  CFStringRef get kCFURLUbiquitousItemIsExcludedFromSyncKey =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<CFStringRef>(
          'kCFURLUbiquitousItemDownloadingStatusNotDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusNotDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusCurrent');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusCurrent =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value;

  CFDataRef CFURLCreateBookmarkData(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFURLBookmarkCreationOptions options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData(
      allocator,
      url,
      options.value,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFURLRef,
              CFOptionFlags,
              CFArrayRef,
              CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData = _CFURLCreateBookmarkDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef, CFURLRef,
          ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    CFURLBookmarkResolutionOptions options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData(
      allocator,
      bookmark,
      options.value,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData =
      _CFURLCreateByResolvingBookmarkDataPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>>(
      'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData =
      _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFilePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile =
      _CFURLCreateBookmarkDataFromFilePtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFilePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile =
      _CFURLWriteBookmarkDataToFilePtr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecordPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord =
      _CFURLCreateBookmarkDataFromAliasRecordPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource =
      _CFURLStartAccessingSecurityScopedResourcePtr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource =
      _CFURLStopAccessingSecurityScopedResourcePtr.asFunction<
          void Function(CFURLRef)>();

  int CGDataProviderGetTypeID() {
    return _CGDataProviderGetTypeID();
  }

  late final _CGDataProviderGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CGDataProviderGetTypeID');
  late final _CGDataProviderGetTypeID =
      _CGDataProviderGetTypeIDPtr.asFunction<int Function()>();

  CGDataProviderRef CGDataProviderCreateSequential(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<CGDataProviderSequentialCallbacks> callbacks,
  ) {
    return _CGDataProviderCreateSequential(
      info,
      callbacks,
    );
  }

  late final _CGDataProviderCreateSequentialPtr = _lookup<
          ffi.NativeFunction<
              CGDataProviderRef Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<CGDataProviderSequentialCallbacks>)>>(
      'CGDataProviderCreateSequential');
  late final _CGDataProviderCreateSequential =
      _CGDataProviderCreateSequentialPtr.asFunction<
          CGDataProviderRef Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<CGDataProviderSequentialCallbacks>)>();

  CGDataProviderRef CGDataProviderCreateDirect(
    ffi.Pointer<ffi.Void> info,
    int size,
    ffi.Pointer<CGDataProviderDirectCallbacks> callbacks,
  ) {
    return _CGDataProviderCreateDirect(
      info,
      size,
      callbacks,
    );
  }

  late final _CGDataProviderCreateDirectPtr = _lookup<
          ffi.NativeFunction<
              CGDataProviderRef Function(ffi.Pointer<ffi.Void>, off_t,
                  ffi.Pointer<CGDataProviderDirectCallbacks>)>>(
      'CGDataProviderCreateDirect');
  late final _CGDataProviderCreateDirect =
      _CGDataProviderCreateDirectPtr.asFunction<
          CGDataProviderRef Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<CGDataProviderDirectCallbacks>)>();

  CGDataProviderRef CGDataProviderCreateWithData(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<ffi.Void> data,
    int size,
    CGDataProviderReleaseDataCallback releaseData,
  ) {
    return _CGDataProviderCreateWithData(
      info,
      data,
      size,
      releaseData,
    );
  }

  late final _CGDataProviderCreateWithDataPtr = _lookup<
          ffi.NativeFunction<
              CGDataProviderRef Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Size,
                  CGDataProviderReleaseDataCallback)>>(
      'CGDataProviderCreateWithData');
  late final _CGDataProviderCreateWithData =
      _CGDataProviderCreateWithDataPtr.asFunction<
          CGDataProviderRef Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, CGDataProviderReleaseDataCallback)>();

  CGDataProviderRef CGDataProviderCreateWithCFData(
    CFDataRef data,
  ) {
    return _CGDataProviderCreateWithCFData(
      data,
    );
  }

  late final _CGDataProviderCreateWithCFDataPtr =
      _lookup<ffi.NativeFunction<CGDataProviderRef Function(CFDataRef)>>(
          'CGDataProviderCreateWithCFData');
  late final _CGDataProviderCreateWithCFData =
      _CGDataProviderCreateWithCFDataPtr.asFunction<
          CGDataProviderRef Function(CFDataRef)>();

  CGDataProviderRef CGDataProviderCreateWithURL(
    CFURLRef url,
  ) {
    return _CGDataProviderCreateWithURL(
      url,
    );
  }

  late final _CGDataProviderCreateWithURLPtr =
      _lookup<ffi.NativeFunction<CGDataProviderRef Function(CFURLRef)>>(
          'CGDataProviderCreateWithURL');
  late final _CGDataProviderCreateWithURL = _CGDataProviderCreateWithURLPtr
      .asFunction<CGDataProviderRef Function(CFURLRef)>();

  CGDataProviderRef CGDataProviderCreateWithFilename(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _CGDataProviderCreateWithFilename(
      filename,
    );
  }

  late final _CGDataProviderCreateWithFilenamePtr = _lookup<
          ffi
          .NativeFunction<CGDataProviderRef Function(ffi.Pointer<ffi.Char>)>>(
      'CGDataProviderCreateWithFilename');
  late final _CGDataProviderCreateWithFilename =
      _CGDataProviderCreateWithFilenamePtr.asFunction<
          CGDataProviderRef Function(ffi.Pointer<ffi.Char>)>();

  CGDataProviderRef CGDataProviderRetain(
    CGDataProviderRef provider,
  ) {
    return _CGDataProviderRetain(
      provider,
    );
  }

  late final _CGDataProviderRetainPtr = _lookup<
          ffi.NativeFunction<CGDataProviderRef Function(CGDataProviderRef)>>(
      'CGDataProviderRetain');
  late final _CGDataProviderRetain = _CGDataProviderRetainPtr.asFunction<
      CGDataProviderRef Function(CGDataProviderRef)>();

  void CGDataProviderRelease(
    CGDataProviderRef provider,
  ) {
    return _CGDataProviderRelease(
      provider,
    );
  }

  late final _CGDataProviderReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGDataProviderRef)>>(
          'CGDataProviderRelease');
  late final _CGDataProviderRelease =
      _CGDataProviderReleasePtr.asFunction<void Function(CGDataProviderRef)>();

  CFDataRef CGDataProviderCopyData(
    CGDataProviderRef provider,
  ) {
    return _CGDataProviderCopyData(
      provider,
    );
  }

  late final _CGDataProviderCopyDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CGDataProviderRef)>>(
          'CGDataProviderCopyData');
  late final _CGDataProviderCopyData = _CGDataProviderCopyDataPtr.asFunction<
      CFDataRef Function(CGDataProviderRef)>();

  ffi.Pointer<ffi.Void> CGDataProviderGetInfo(
    CGDataProviderRef provider,
  ) {
    return _CGDataProviderGetInfo(
      provider,
    );
  }

  late final _CGDataProviderGetInfoPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(CGDataProviderRef)>>(
      'CGDataProviderGetInfo');
  late final _CGDataProviderGetInfo = _CGDataProviderGetInfoPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CGDataProviderRef)>();

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericGray =
      _lookup<CFStringRef>('kCGColorSpaceGenericGray');

  CFStringRef get kCGColorSpaceGenericGray => _kCGColorSpaceGenericGray.value;

  set kCGColorSpaceGenericGray(CFStringRef value) =>
      _kCGColorSpaceGenericGray.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericRGB =
      _lookup<CFStringRef>('kCGColorSpaceGenericRGB');

  CFStringRef get kCGColorSpaceGenericRGB => _kCGColorSpaceGenericRGB.value;

  set kCGColorSpaceGenericRGB(CFStringRef value) =>
      _kCGColorSpaceGenericRGB.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericCMYK =
      _lookup<CFStringRef>('kCGColorSpaceGenericCMYK');

  CFStringRef get kCGColorSpaceGenericCMYK => _kCGColorSpaceGenericCMYK.value;

  set kCGColorSpaceGenericCMYK(CFStringRef value) =>
      _kCGColorSpaceGenericCMYK.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceDisplayP3 =
      _lookup<CFStringRef>('kCGColorSpaceDisplayP3');

  CFStringRef get kCGColorSpaceDisplayP3 => _kCGColorSpaceDisplayP3.value;

  set kCGColorSpaceDisplayP3(CFStringRef value) =>
      _kCGColorSpaceDisplayP3.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericRGBLinear =
      _lookup<CFStringRef>('kCGColorSpaceGenericRGBLinear');

  CFStringRef get kCGColorSpaceGenericRGBLinear =>
      _kCGColorSpaceGenericRGBLinear.value;

  set kCGColorSpaceGenericRGBLinear(CFStringRef value) =>
      _kCGColorSpaceGenericRGBLinear.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceAdobeRGB1998 =
      _lookup<CFStringRef>('kCGColorSpaceAdobeRGB1998');

  CFStringRef get kCGColorSpaceAdobeRGB1998 => _kCGColorSpaceAdobeRGB1998.value;

  set kCGColorSpaceAdobeRGB1998(CFStringRef value) =>
      _kCGColorSpaceAdobeRGB1998.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceSRGB =
      _lookup<CFStringRef>('kCGColorSpaceSRGB');

  CFStringRef get kCGColorSpaceSRGB => _kCGColorSpaceSRGB.value;

  set kCGColorSpaceSRGB(CFStringRef value) => _kCGColorSpaceSRGB.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericGrayGamma2_2 =
      _lookup<CFStringRef>('kCGColorSpaceGenericGrayGamma2_2');

  CFStringRef get kCGColorSpaceGenericGrayGamma2_2 =>
      _kCGColorSpaceGenericGrayGamma2_2.value;

  set kCGColorSpaceGenericGrayGamma2_2(CFStringRef value) =>
      _kCGColorSpaceGenericGrayGamma2_2.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericXYZ =
      _lookup<CFStringRef>('kCGColorSpaceGenericXYZ');

  CFStringRef get kCGColorSpaceGenericXYZ => _kCGColorSpaceGenericXYZ.value;

  set kCGColorSpaceGenericXYZ(CFStringRef value) =>
      _kCGColorSpaceGenericXYZ.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceGenericLab =
      _lookup<CFStringRef>('kCGColorSpaceGenericLab');

  CFStringRef get kCGColorSpaceGenericLab => _kCGColorSpaceGenericLab.value;

  set kCGColorSpaceGenericLab(CFStringRef value) =>
      _kCGColorSpaceGenericLab.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceACESCGLinear =
      _lookup<CFStringRef>('kCGColorSpaceACESCGLinear');

  CFStringRef get kCGColorSpaceACESCGLinear => _kCGColorSpaceACESCGLinear.value;

  set kCGColorSpaceACESCGLinear(CFStringRef value) =>
      _kCGColorSpaceACESCGLinear.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_709 =
      _lookup<CFStringRef>('kCGColorSpaceITUR_709');

  CFStringRef get kCGColorSpaceITUR_709 => _kCGColorSpaceITUR_709.value;

  set kCGColorSpaceITUR_709(CFStringRef value) =>
      _kCGColorSpaceITUR_709.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_709_PQ =
      _lookup<CFStringRef>('kCGColorSpaceITUR_709_PQ');

  CFStringRef get kCGColorSpaceITUR_709_PQ => _kCGColorSpaceITUR_709_PQ.value;

  set kCGColorSpaceITUR_709_PQ(CFStringRef value) =>
      _kCGColorSpaceITUR_709_PQ.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_709_HLG =
      _lookup<CFStringRef>('kCGColorSpaceITUR_709_HLG');

  CFStringRef get kCGColorSpaceITUR_709_HLG => _kCGColorSpaceITUR_709_HLG.value;

  set kCGColorSpaceITUR_709_HLG(CFStringRef value) =>
      _kCGColorSpaceITUR_709_HLG.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2020 =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2020');

  CFStringRef get kCGColorSpaceITUR_2020 => _kCGColorSpaceITUR_2020.value;

  set kCGColorSpaceITUR_2020(CFStringRef value) =>
      _kCGColorSpaceITUR_2020.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2020_sRGBGamma =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2020_sRGBGamma');

  CFStringRef get kCGColorSpaceITUR_2020_sRGBGamma =>
      _kCGColorSpaceITUR_2020_sRGBGamma.value;

  set kCGColorSpaceITUR_2020_sRGBGamma(CFStringRef value) =>
      _kCGColorSpaceITUR_2020_sRGBGamma.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceROMMRGB =
      _lookup<CFStringRef>('kCGColorSpaceROMMRGB');

  CFStringRef get kCGColorSpaceROMMRGB => _kCGColorSpaceROMMRGB.value;

  set kCGColorSpaceROMMRGB(CFStringRef value) =>
      _kCGColorSpaceROMMRGB.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceDCIP3 =
      _lookup<CFStringRef>('kCGColorSpaceDCIP3');

  CFStringRef get kCGColorSpaceDCIP3 => _kCGColorSpaceDCIP3.value;

  set kCGColorSpaceDCIP3(CFStringRef value) =>
      _kCGColorSpaceDCIP3.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceLinearITUR_2020 =
      _lookup<CFStringRef>('kCGColorSpaceLinearITUR_2020');

  CFStringRef get kCGColorSpaceLinearITUR_2020 =>
      _kCGColorSpaceLinearITUR_2020.value;

  set kCGColorSpaceLinearITUR_2020(CFStringRef value) =>
      _kCGColorSpaceLinearITUR_2020.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedITUR_2020 =
      _lookup<CFStringRef>('kCGColorSpaceExtendedITUR_2020');

  CFStringRef get kCGColorSpaceExtendedITUR_2020 =>
      _kCGColorSpaceExtendedITUR_2020.value;

  set kCGColorSpaceExtendedITUR_2020(CFStringRef value) =>
      _kCGColorSpaceExtendedITUR_2020.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedLinearITUR_2020 =
      _lookup<CFStringRef>('kCGColorSpaceExtendedLinearITUR_2020');

  CFStringRef get kCGColorSpaceExtendedLinearITUR_2020 =>
      _kCGColorSpaceExtendedLinearITUR_2020.value;

  set kCGColorSpaceExtendedLinearITUR_2020(CFStringRef value) =>
      _kCGColorSpaceExtendedLinearITUR_2020.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceLinearDisplayP3 =
      _lookup<CFStringRef>('kCGColorSpaceLinearDisplayP3');

  CFStringRef get kCGColorSpaceLinearDisplayP3 =>
      _kCGColorSpaceLinearDisplayP3.value;

  set kCGColorSpaceLinearDisplayP3(CFStringRef value) =>
      _kCGColorSpaceLinearDisplayP3.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedDisplayP3 =
      _lookup<CFStringRef>('kCGColorSpaceExtendedDisplayP3');

  CFStringRef get kCGColorSpaceExtendedDisplayP3 =>
      _kCGColorSpaceExtendedDisplayP3.value;

  set kCGColorSpaceExtendedDisplayP3(CFStringRef value) =>
      _kCGColorSpaceExtendedDisplayP3.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedLinearDisplayP3 =
      _lookup<CFStringRef>('kCGColorSpaceExtendedLinearDisplayP3');

  CFStringRef get kCGColorSpaceExtendedLinearDisplayP3 =>
      _kCGColorSpaceExtendedLinearDisplayP3.value;

  set kCGColorSpaceExtendedLinearDisplayP3(CFStringRef value) =>
      _kCGColorSpaceExtendedLinearDisplayP3.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2100_PQ =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2100_PQ');

  CFStringRef get kCGColorSpaceITUR_2100_PQ => _kCGColorSpaceITUR_2100_PQ.value;

  set kCGColorSpaceITUR_2100_PQ(CFStringRef value) =>
      _kCGColorSpaceITUR_2100_PQ.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2100_HLG =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2100_HLG');

  CFStringRef get kCGColorSpaceITUR_2100_HLG =>
      _kCGColorSpaceITUR_2100_HLG.value;

  set kCGColorSpaceITUR_2100_HLG(CFStringRef value) =>
      _kCGColorSpaceITUR_2100_HLG.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceDisplayP3_PQ =
      _lookup<CFStringRef>('kCGColorSpaceDisplayP3_PQ');

  CFStringRef get kCGColorSpaceDisplayP3_PQ => _kCGColorSpaceDisplayP3_PQ.value;

  set kCGColorSpaceDisplayP3_PQ(CFStringRef value) =>
      _kCGColorSpaceDisplayP3_PQ.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceDisplayP3_HLG =
      _lookup<CFStringRef>('kCGColorSpaceDisplayP3_HLG');

  CFStringRef get kCGColorSpaceDisplayP3_HLG =>
      _kCGColorSpaceDisplayP3_HLG.value;

  set kCGColorSpaceDisplayP3_HLG(CFStringRef value) =>
      _kCGColorSpaceDisplayP3_HLG.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2020_PQ =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2020_PQ');

  CFStringRef get kCGColorSpaceITUR_2020_PQ => _kCGColorSpaceITUR_2020_PQ.value;

  set kCGColorSpaceITUR_2020_PQ(CFStringRef value) =>
      _kCGColorSpaceITUR_2020_PQ.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2020_HLG =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2020_HLG');

  CFStringRef get kCGColorSpaceITUR_2020_HLG =>
      _kCGColorSpaceITUR_2020_HLG.value;

  set kCGColorSpaceITUR_2020_HLG(CFStringRef value) =>
      _kCGColorSpaceITUR_2020_HLG.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceDisplayP3_PQ_EOTF =
      _lookup<CFStringRef>('kCGColorSpaceDisplayP3_PQ_EOTF');

  CFStringRef get kCGColorSpaceDisplayP3_PQ_EOTF =>
      _kCGColorSpaceDisplayP3_PQ_EOTF.value;

  set kCGColorSpaceDisplayP3_PQ_EOTF(CFStringRef value) =>
      _kCGColorSpaceDisplayP3_PQ_EOTF.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceITUR_2020_PQ_EOTF =
      _lookup<CFStringRef>('kCGColorSpaceITUR_2020_PQ_EOTF');

  CFStringRef get kCGColorSpaceITUR_2020_PQ_EOTF =>
      _kCGColorSpaceITUR_2020_PQ_EOTF.value;

  set kCGColorSpaceITUR_2020_PQ_EOTF(CFStringRef value) =>
      _kCGColorSpaceITUR_2020_PQ_EOTF.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedSRGB =
      _lookup<CFStringRef>('kCGColorSpaceExtendedSRGB');

  CFStringRef get kCGColorSpaceExtendedSRGB => _kCGColorSpaceExtendedSRGB.value;

  set kCGColorSpaceExtendedSRGB(CFStringRef value) =>
      _kCGColorSpaceExtendedSRGB.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceLinearSRGB =
      _lookup<CFStringRef>('kCGColorSpaceLinearSRGB');

  CFStringRef get kCGColorSpaceLinearSRGB => _kCGColorSpaceLinearSRGB.value;

  set kCGColorSpaceLinearSRGB(CFStringRef value) =>
      _kCGColorSpaceLinearSRGB.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedLinearSRGB =
      _lookup<CFStringRef>('kCGColorSpaceExtendedLinearSRGB');

  CFStringRef get kCGColorSpaceExtendedLinearSRGB =>
      _kCGColorSpaceExtendedLinearSRGB.value;

  set kCGColorSpaceExtendedLinearSRGB(CFStringRef value) =>
      _kCGColorSpaceExtendedLinearSRGB.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedGray =
      _lookup<CFStringRef>('kCGColorSpaceExtendedGray');

  CFStringRef get kCGColorSpaceExtendedGray => _kCGColorSpaceExtendedGray.value;

  set kCGColorSpaceExtendedGray(CFStringRef value) =>
      _kCGColorSpaceExtendedGray.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceLinearGray =
      _lookup<CFStringRef>('kCGColorSpaceLinearGray');

  CFStringRef get kCGColorSpaceLinearGray => _kCGColorSpaceLinearGray.value;

  set kCGColorSpaceLinearGray(CFStringRef value) =>
      _kCGColorSpaceLinearGray.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedLinearGray =
      _lookup<CFStringRef>('kCGColorSpaceExtendedLinearGray');

  CFStringRef get kCGColorSpaceExtendedLinearGray =>
      _kCGColorSpaceExtendedLinearGray.value;

  set kCGColorSpaceExtendedLinearGray(CFStringRef value) =>
      _kCGColorSpaceExtendedLinearGray.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceCoreMedia709 =
      _lookup<CFStringRef>('kCGColorSpaceCoreMedia709');

  CFStringRef get kCGColorSpaceCoreMedia709 => _kCGColorSpaceCoreMedia709.value;

  set kCGColorSpaceCoreMedia709(CFStringRef value) =>
      _kCGColorSpaceCoreMedia709.value = value;

  CGColorSpaceRef CGColorSpaceCreateDeviceGray() {
    return _CGColorSpaceCreateDeviceGray();
  }

  late final _CGColorSpaceCreateDeviceGrayPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function()>>(
          'CGColorSpaceCreateDeviceGray');
  late final _CGColorSpaceCreateDeviceGray =
      _CGColorSpaceCreateDeviceGrayPtr.asFunction<CGColorSpaceRef Function()>();

  CGColorSpaceRef CGColorSpaceCreateDeviceRGB() {
    return _CGColorSpaceCreateDeviceRGB();
  }

  late final _CGColorSpaceCreateDeviceRGBPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function()>>(
          'CGColorSpaceCreateDeviceRGB');
  late final _CGColorSpaceCreateDeviceRGB =
      _CGColorSpaceCreateDeviceRGBPtr.asFunction<CGColorSpaceRef Function()>();

  CGColorSpaceRef CGColorSpaceCreateDeviceCMYK() {
    return _CGColorSpaceCreateDeviceCMYK();
  }

  late final _CGColorSpaceCreateDeviceCMYKPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function()>>(
          'CGColorSpaceCreateDeviceCMYK');
  late final _CGColorSpaceCreateDeviceCMYK =
      _CGColorSpaceCreateDeviceCMYKPtr.asFunction<CGColorSpaceRef Function()>();

  CGColorSpaceRef CGColorSpaceCreateCalibratedGray(
    ffi.Pointer<CGFloat> whitePoint,
    ffi.Pointer<CGFloat> blackPoint,
    double gamma,
  ) {
    return _CGColorSpaceCreateCalibratedGray(
      whitePoint,
      blackPoint,
      gamma,
    );
  }

  late final _CGColorSpaceCreateCalibratedGrayPtr = _lookup<
      ffi.NativeFunction<
          CGColorSpaceRef Function(ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>,
              CGFloat)>>('CGColorSpaceCreateCalibratedGray');
  late final _CGColorSpaceCreateCalibratedGray =
      _CGColorSpaceCreateCalibratedGrayPtr.asFunction<
          CGColorSpaceRef Function(
              ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>, double)>();

  CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(
    ffi.Pointer<CGFloat> whitePoint,
    ffi.Pointer<CGFloat> blackPoint,
    ffi.Pointer<CGFloat> gamma,
    ffi.Pointer<CGFloat> matrix,
  ) {
    return _CGColorSpaceCreateCalibratedRGB(
      whitePoint,
      blackPoint,
      gamma,
      matrix,
    );
  }

  late final _CGColorSpaceCreateCalibratedRGBPtr = _lookup<
      ffi.NativeFunction<
          CGColorSpaceRef Function(
              ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>)>>('CGColorSpaceCreateCalibratedRGB');
  late final _CGColorSpaceCreateCalibratedRGB =
      _CGColorSpaceCreateCalibratedRGBPtr.asFunction<
          CGColorSpaceRef Function(ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>)>();

  CGColorSpaceRef CGColorSpaceCreateLab(
    ffi.Pointer<CGFloat> whitePoint,
    ffi.Pointer<CGFloat> blackPoint,
    ffi.Pointer<CGFloat> range,
  ) {
    return _CGColorSpaceCreateLab(
      whitePoint,
      blackPoint,
      range,
    );
  }

  late final _CGColorSpaceCreateLabPtr = _lookup<
      ffi.NativeFunction<
          CGColorSpaceRef Function(ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>)>>('CGColorSpaceCreateLab');
  late final _CGColorSpaceCreateLab = _CGColorSpaceCreateLabPtr.asFunction<
      CGColorSpaceRef Function(
          ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>, ffi.Pointer<CGFloat>)>();

  CGColorSpaceRef CGColorSpaceCreateWithICCData(
    CFTypeRef data,
  ) {
    return _CGColorSpaceCreateWithICCData(
      data,
    );
  }

  late final _CGColorSpaceCreateWithICCDataPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CFTypeRef)>>(
          'CGColorSpaceCreateWithICCData');
  late final _CGColorSpaceCreateWithICCData = _CGColorSpaceCreateWithICCDataPtr
      .asFunction<CGColorSpaceRef Function(CFTypeRef)>();

  CGColorSpaceRef CGColorSpaceCreateICCBased(
    int nComponents,
    ffi.Pointer<CGFloat> range,
    CGDataProviderRef profile,
    CGColorSpaceRef alternate,
  ) {
    return _CGColorSpaceCreateICCBased(
      nComponents,
      range,
      profile,
      alternate,
    );
  }

  late final _CGColorSpaceCreateICCBasedPtr = _lookup<
      ffi.NativeFunction<
          CGColorSpaceRef Function(
              ffi.Size,
              ffi.Pointer<CGFloat>,
              CGDataProviderRef,
              CGColorSpaceRef)>>('CGColorSpaceCreateICCBased');
  late final _CGColorSpaceCreateICCBased =
      _CGColorSpaceCreateICCBasedPtr.asFunction<
          CGColorSpaceRef Function(
              int, ffi.Pointer<CGFloat>, CGDataProviderRef, CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateIndexed(
    CGColorSpaceRef baseSpace,
    int lastIndex,
    ffi.Pointer<ffi.UnsignedChar> colorTable,
  ) {
    return _CGColorSpaceCreateIndexed(
      baseSpace,
      lastIndex,
      colorTable,
    );
  }

  late final _CGColorSpaceCreateIndexedPtr = _lookup<
      ffi.NativeFunction<
          CGColorSpaceRef Function(CGColorSpaceRef, ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>)>>('CGColorSpaceCreateIndexed');
  late final _CGColorSpaceCreateIndexed =
      _CGColorSpaceCreateIndexedPtr.asFunction<
          CGColorSpaceRef Function(
              CGColorSpaceRef, int, ffi.Pointer<ffi.UnsignedChar>)>();

  CGColorSpaceRef CGColorSpaceCreatePattern(
    CGColorSpaceRef baseSpace,
  ) {
    return _CGColorSpaceCreatePattern(
      baseSpace,
    );
  }

  late final _CGColorSpaceCreatePatternPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCreatePattern');
  late final _CGColorSpaceCreatePattern = _CGColorSpaceCreatePatternPtr
      .asFunction<CGColorSpaceRef Function(CGColorSpaceRef)>();

  late final ffi.Pointer<CFStringRef> _kCGColorSpaceExtendedRange =
      _lookup<CFStringRef>('kCGColorSpaceExtendedRange');

  CFStringRef get kCGColorSpaceExtendedRange =>
      _kCGColorSpaceExtendedRange.value;

  set kCGColorSpaceExtendedRange(CFStringRef value) =>
      _kCGColorSpaceExtendedRange.value = value;

  CGColorSpaceRef CGColorSpaceCreateWithColorSyncProfile(
    ColorSyncProfileRef arg0,
    CFDictionaryRef options,
  ) {
    return _CGColorSpaceCreateWithColorSyncProfile(
      arg0,
      options,
    );
  }

  late final _CGColorSpaceCreateWithColorSyncProfilePtr = _lookup<
      ffi.NativeFunction<
          CGColorSpaceRef Function(ColorSyncProfileRef,
              CFDictionaryRef)>>('CGColorSpaceCreateWithColorSyncProfile');
  late final _CGColorSpaceCreateWithColorSyncProfile =
      _CGColorSpaceCreateWithColorSyncProfilePtr.asFunction<
          CGColorSpaceRef Function(ColorSyncProfileRef, CFDictionaryRef)>();

  CGColorSpaceRef CGColorSpaceCreateWithName(
    CFStringRef name,
  ) {
    return _CGColorSpaceCreateWithName(
      name,
    );
  }

  late final _CGColorSpaceCreateWithNamePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CFStringRef)>>(
          'CGColorSpaceCreateWithName');
  late final _CGColorSpaceCreateWithName = _CGColorSpaceCreateWithNamePtr
      .asFunction<CGColorSpaceRef Function(CFStringRef)>();

  CGColorSpaceRef CGColorSpaceRetain(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceRetain(
      space,
    );
  }

  late final _CGColorSpaceRetainPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceRetain');
  late final _CGColorSpaceRetain = _CGColorSpaceRetainPtr.asFunction<
      CGColorSpaceRef Function(CGColorSpaceRef)>();

  void CGColorSpaceRelease(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceRelease(
      space,
    );
  }

  late final _CGColorSpaceReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGColorSpaceRef)>>(
          'CGColorSpaceRelease');
  late final _CGColorSpaceRelease =
      _CGColorSpaceReleasePtr.asFunction<void Function(CGColorSpaceRef)>();

  CFStringRef CGColorSpaceGetName(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceGetName(
      space,
    );
  }

  late final _CGColorSpaceGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceGetName');
  late final _CGColorSpaceGetName = _CGColorSpaceGetNamePtr.asFunction<
      CFStringRef Function(CGColorSpaceRef)>();

  CFStringRef CGColorSpaceCopyName(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCopyName(
      space,
    );
  }

  late final _CGColorSpaceCopyNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCopyName');
  late final _CGColorSpaceCopyName = _CGColorSpaceCopyNamePtr.asFunction<
      CFStringRef Function(CGColorSpaceRef)>();

  int CGColorSpaceGetTypeID() {
    return _CGColorSpaceGetTypeID();
  }

  late final _CGColorSpaceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGColorSpaceGetTypeID');
  late final _CGColorSpaceGetTypeID =
      _CGColorSpaceGetTypeIDPtr.asFunction<int Function()>();

  int CGColorSpaceGetNumberOfComponents(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceGetNumberOfComponents(
      space,
    );
  }

  late final _CGColorSpaceGetNumberOfComponentsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGColorSpaceRef)>>(
          'CGColorSpaceGetNumberOfComponents');
  late final _CGColorSpaceGetNumberOfComponents =
      _CGColorSpaceGetNumberOfComponentsPtr.asFunction<
          int Function(CGColorSpaceRef)>();

  CGColorSpaceModel CGColorSpaceGetModel(
    CGColorSpaceRef space,
  ) {
    return CGColorSpaceModel.fromValue(_CGColorSpaceGetModel(
      space,
    ));
  }

  late final _CGColorSpaceGetModelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CGColorSpaceRef)>>(
          'CGColorSpaceGetModel');
  late final _CGColorSpaceGetModel =
      _CGColorSpaceGetModelPtr.asFunction<int Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceGetBaseColorSpace(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceGetBaseColorSpace(
      space,
    );
  }

  late final _CGColorSpaceGetBaseColorSpacePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceGetBaseColorSpace');
  late final _CGColorSpaceGetBaseColorSpace = _CGColorSpaceGetBaseColorSpacePtr
      .asFunction<CGColorSpaceRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCopyBaseColorSpace(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCopyBaseColorSpace(
      space,
    );
  }

  late final _CGColorSpaceCopyBaseColorSpacePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCopyBaseColorSpace');
  late final _CGColorSpaceCopyBaseColorSpace =
      _CGColorSpaceCopyBaseColorSpacePtr.asFunction<
          CGColorSpaceRef Function(CGColorSpaceRef)>();

  int CGColorSpaceGetColorTableCount(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceGetColorTableCount(
      space,
    );
  }

  late final _CGColorSpaceGetColorTableCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGColorSpaceRef)>>(
          'CGColorSpaceGetColorTableCount');
  late final _CGColorSpaceGetColorTableCount =
      _CGColorSpaceGetColorTableCountPtr.asFunction<
          int Function(CGColorSpaceRef)>();

  void CGColorSpaceGetColorTable(
    CGColorSpaceRef space,
    ffi.Pointer<ffi.Uint8> table,
  ) {
    return _CGColorSpaceGetColorTable(
      space,
      table,
    );
  }

  late final _CGColorSpaceGetColorTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGColorSpaceRef,
              ffi.Pointer<ffi.Uint8>)>>('CGColorSpaceGetColorTable');
  late final _CGColorSpaceGetColorTable = _CGColorSpaceGetColorTablePtr
      .asFunction<void Function(CGColorSpaceRef, ffi.Pointer<ffi.Uint8>)>();

  CFDataRef CGColorSpaceCopyICCData(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCopyICCData(
      space,
    );
  }

  late final _CGColorSpaceCopyICCDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCopyICCData');
  late final _CGColorSpaceCopyICCData = _CGColorSpaceCopyICCDataPtr.asFunction<
      CFDataRef Function(CGColorSpaceRef)>();

  bool CGColorSpaceIsWideGamutRGB(
    CGColorSpaceRef arg0,
  ) {
    return _CGColorSpaceIsWideGamutRGB(
      arg0,
    );
  }

  late final _CGColorSpaceIsWideGamutRGBPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceIsWideGamutRGB');
  late final _CGColorSpaceIsWideGamutRGB = _CGColorSpaceIsWideGamutRGBPtr
      .asFunction<bool Function(CGColorSpaceRef)>();

  bool CGColorSpaceIsHDR(
    CGColorSpaceRef arg0,
  ) {
    return _CGColorSpaceIsHDR(
      arg0,
    );
  }

  late final _CGColorSpaceIsHDRPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceIsHDR');
  late final _CGColorSpaceIsHDR =
      _CGColorSpaceIsHDRPtr.asFunction<bool Function(CGColorSpaceRef)>();

  bool CGColorSpaceUsesITUR_2100TF(
    CGColorSpaceRef arg0,
  ) {
    return _CGColorSpaceUsesITUR_2100TF(
      arg0,
    );
  }

  late final _CGColorSpaceUsesITUR_2100TFPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceUsesITUR_2100TF');
  late final _CGColorSpaceUsesITUR_2100TF = _CGColorSpaceUsesITUR_2100TFPtr
      .asFunction<bool Function(CGColorSpaceRef)>();

  bool CGColorSpaceIsPQBased(
    CGColorSpaceRef s,
  ) {
    return _CGColorSpaceIsPQBased(
      s,
    );
  }

  late final _CGColorSpaceIsPQBasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceIsPQBased');
  late final _CGColorSpaceIsPQBased =
      _CGColorSpaceIsPQBasedPtr.asFunction<bool Function(CGColorSpaceRef)>();

  bool CGColorSpaceIsHLGBased(
    CGColorSpaceRef s,
  ) {
    return _CGColorSpaceIsHLGBased(
      s,
    );
  }

  late final _CGColorSpaceIsHLGBasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceIsHLGBased');
  late final _CGColorSpaceIsHLGBased =
      _CGColorSpaceIsHLGBasedPtr.asFunction<bool Function(CGColorSpaceRef)>();

  bool CGColorSpaceSupportsOutput(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceSupportsOutput(
      space,
    );
  }

  late final _CGColorSpaceSupportsOutputPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceSupportsOutput');
  late final _CGColorSpaceSupportsOutput = _CGColorSpaceSupportsOutputPtr
      .asFunction<bool Function(CGColorSpaceRef)>();

  CFPropertyListRef CGColorSpaceCopyPropertyList(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCopyPropertyList(
      space,
    );
  }

  late final _CGColorSpaceCopyPropertyListPtr =
      _lookup<ffi.NativeFunction<CFPropertyListRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCopyPropertyList');
  late final _CGColorSpaceCopyPropertyList = _CGColorSpaceCopyPropertyListPtr
      .asFunction<CFPropertyListRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateWithPropertyList(
    CFPropertyListRef plist,
  ) {
    return _CGColorSpaceCreateWithPropertyList(
      plist,
    );
  }

  late final _CGColorSpaceCreateWithPropertyListPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CFPropertyListRef)>>(
          'CGColorSpaceCreateWithPropertyList');
  late final _CGColorSpaceCreateWithPropertyList =
      _CGColorSpaceCreateWithPropertyListPtr.asFunction<
          CGColorSpaceRef Function(CFPropertyListRef)>();

  bool CGColorSpaceUsesExtendedRange(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceUsesExtendedRange(
      space,
    );
  }

  late final _CGColorSpaceUsesExtendedRangePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorSpaceRef)>>(
          'CGColorSpaceUsesExtendedRange');
  late final _CGColorSpaceUsesExtendedRange = _CGColorSpaceUsesExtendedRangePtr
      .asFunction<bool Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateLinearized(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCreateLinearized(
      space,
    );
  }

  late final _CGColorSpaceCreateLinearizedPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCreateLinearized');
  late final _CGColorSpaceCreateLinearized = _CGColorSpaceCreateLinearizedPtr
      .asFunction<CGColorSpaceRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateExtended(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCreateExtended(
      space,
    );
  }

  late final _CGColorSpaceCreateExtendedPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCreateExtended');
  late final _CGColorSpaceCreateExtended = _CGColorSpaceCreateExtendedPtr
      .asFunction<CGColorSpaceRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateExtendedLinearized(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCreateExtendedLinearized(
      space,
    );
  }

  late final _CGColorSpaceCreateExtendedLinearizedPtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCreateExtendedLinearized');
  late final _CGColorSpaceCreateExtendedLinearized =
      _CGColorSpaceCreateExtendedLinearizedPtr.asFunction<
          CGColorSpaceRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateCopyWithStandardRange(
    CGColorSpaceRef s,
  ) {
    return _CGColorSpaceCreateCopyWithStandardRange(
      s,
    );
  }

  late final _CGColorSpaceCreateCopyWithStandardRangePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCreateCopyWithStandardRange');
  late final _CGColorSpaceCreateCopyWithStandardRange =
      _CGColorSpaceCreateCopyWithStandardRangePtr.asFunction<
          CGColorSpaceRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateWithICCProfile(
    CFDataRef data,
  ) {
    return _CGColorSpaceCreateWithICCProfile(
      data,
    );
  }

  late final _CGColorSpaceCreateWithICCProfilePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CFDataRef)>>(
          'CGColorSpaceCreateWithICCProfile');
  late final _CGColorSpaceCreateWithICCProfile =
      _CGColorSpaceCreateWithICCProfilePtr.asFunction<
          CGColorSpaceRef Function(CFDataRef)>();

  CFDataRef CGColorSpaceCopyICCProfile(
    CGColorSpaceRef space,
  ) {
    return _CGColorSpaceCopyICCProfile(
      space,
    );
  }

  late final _CGColorSpaceCopyICCProfilePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CGColorSpaceRef)>>(
          'CGColorSpaceCopyICCProfile');
  late final _CGColorSpaceCopyICCProfile = _CGColorSpaceCopyICCProfilePtr
      .asFunction<CFDataRef Function(CGColorSpaceRef)>();

  CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(
    ffi.Pointer<ffi.Void> ref,
  ) {
    return _CGColorSpaceCreateWithPlatformColorSpace(
      ref,
    );
  }

  late final _CGColorSpaceCreateWithPlatformColorSpacePtr = _lookup<
          ffi.NativeFunction<CGColorSpaceRef Function(ffi.Pointer<ffi.Void>)>>(
      'CGColorSpaceCreateWithPlatformColorSpace');
  late final _CGColorSpaceCreateWithPlatformColorSpace =
      _CGColorSpaceCreateWithPlatformColorSpacePtr.asFunction<
          CGColorSpaceRef Function(ffi.Pointer<ffi.Void>)>();

  int CGPatternGetTypeID() {
    return _CGPatternGetTypeID();
  }

  late final _CGPatternGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGPatternGetTypeID');
  late final _CGPatternGetTypeID =
      _CGPatternGetTypeIDPtr.asFunction<int Function()>();

  CGPatternRef CGPatternCreate(
    ffi.Pointer<ffi.Void> info,
    CGRect bounds,
    CGAffineTransform matrix,
    DartCGFloat xStep,
    DartCGFloat yStep,
    CGPatternTiling tiling,
    bool isColored,
    ffi.Pointer<CGPatternCallbacks> callbacks,
  ) {
    return _CGPatternCreate(
      info,
      bounds,
      matrix,
      xStep,
      yStep,
      tiling.value,
      isColored,
      callbacks,
    );
  }

  late final _CGPatternCreatePtr = _lookup<
      ffi.NativeFunction<
          CGPatternRef Function(
              ffi.Pointer<ffi.Void>,
              CGRect,
              CGAffineTransform,
              CGFloat,
              CGFloat,
              ffi.Int32,
              ffi.Bool,
              ffi.Pointer<CGPatternCallbacks>)>>('CGPatternCreate');
  late final _CGPatternCreate = _CGPatternCreatePtr.asFunction<
      CGPatternRef Function(ffi.Pointer<ffi.Void>, CGRect, CGAffineTransform,
          double, double, int, bool, ffi.Pointer<CGPatternCallbacks>)>();

  CGPatternRef CGPatternRetain(
    CGPatternRef pattern,
  ) {
    return _CGPatternRetain(
      pattern,
    );
  }

  late final _CGPatternRetainPtr =
      _lookup<ffi.NativeFunction<CGPatternRef Function(CGPatternRef)>>(
          'CGPatternRetain');
  late final _CGPatternRetain =
      _CGPatternRetainPtr.asFunction<CGPatternRef Function(CGPatternRef)>();

  void CGPatternRelease(
    CGPatternRef pattern,
  ) {
    return _CGPatternRelease(
      pattern,
    );
  }

  late final _CGPatternReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPatternRef)>>(
          'CGPatternRelease');
  late final _CGPatternRelease =
      _CGPatternReleasePtr.asFunction<void Function(CGPatternRef)>();

  CGColorRef CGColorCreate(
    CGColorSpaceRef space,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGColorCreate(
      space,
      components,
    );
  }

  late final _CGColorCreatePtr = _lookup<
      ffi.NativeFunction<
          CGColorRef Function(
              CGColorSpaceRef, ffi.Pointer<CGFloat>)>>('CGColorCreate');
  late final _CGColorCreate = _CGColorCreatePtr.asFunction<
      CGColorRef Function(CGColorSpaceRef, ffi.Pointer<CGFloat>)>();

  CGColorRef CGColorCreateGenericGray(
    double gray,
    double alpha,
  ) {
    return _CGColorCreateGenericGray(
      gray,
      alpha,
    );
  }

  late final _CGColorCreateGenericGrayPtr =
      _lookup<ffi.NativeFunction<CGColorRef Function(CGFloat, CGFloat)>>(
          'CGColorCreateGenericGray');
  late final _CGColorCreateGenericGray = _CGColorCreateGenericGrayPtr
      .asFunction<CGColorRef Function(double, double)>();

  CGColorRef CGColorCreateGenericRGB(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _CGColorCreateGenericRGB(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _CGColorCreateGenericRGBPtr = _lookup<
      ffi.NativeFunction<
          CGColorRef Function(
              CGFloat, CGFloat, CGFloat, CGFloat)>>('CGColorCreateGenericRGB');
  late final _CGColorCreateGenericRGB = _CGColorCreateGenericRGBPtr.asFunction<
      CGColorRef Function(double, double, double, double)>();

  CGColorRef CGColorCreateGenericCMYK(
    double cyan,
    double magenta,
    double yellow,
    double black,
    double alpha,
  ) {
    return _CGColorCreateGenericCMYK(
      cyan,
      magenta,
      yellow,
      black,
      alpha,
    );
  }

  late final _CGColorCreateGenericCMYKPtr = _lookup<
      ffi.NativeFunction<
          CGColorRef Function(CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGColorCreateGenericCMYK');
  late final _CGColorCreateGenericCMYK =
      _CGColorCreateGenericCMYKPtr.asFunction<
          CGColorRef Function(double, double, double, double, double)>();

  CGColorRef CGColorCreateGenericGrayGamma2_2(
    double gray,
    double alpha,
  ) {
    return _CGColorCreateGenericGrayGamma2_2(
      gray,
      alpha,
    );
  }

  late final _CGColorCreateGenericGrayGamma2_2Ptr =
      _lookup<ffi.NativeFunction<CGColorRef Function(CGFloat, CGFloat)>>(
          'CGColorCreateGenericGrayGamma2_2');
  late final _CGColorCreateGenericGrayGamma2_2 =
      _CGColorCreateGenericGrayGamma2_2Ptr.asFunction<
          CGColorRef Function(double, double)>();

  CGColorRef CGColorCreateSRGB(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _CGColorCreateSRGB(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _CGColorCreateSRGBPtr = _lookup<
      ffi.NativeFunction<
          CGColorRef Function(
              CGFloat, CGFloat, CGFloat, CGFloat)>>('CGColorCreateSRGB');
  late final _CGColorCreateSRGB = _CGColorCreateSRGBPtr.asFunction<
      CGColorRef Function(double, double, double, double)>();

  CGColorRef CGColorGetConstantColor(
    CFStringRef colorName,
  ) {
    return _CGColorGetConstantColor(
      colorName,
    );
  }

  late final _CGColorGetConstantColorPtr =
      _lookup<ffi.NativeFunction<CGColorRef Function(CFStringRef)>>(
          'CGColorGetConstantColor');
  late final _CGColorGetConstantColor = _CGColorGetConstantColorPtr.asFunction<
      CGColorRef Function(CFStringRef)>();

  CGColorRef CGColorCreateWithPattern(
    CGColorSpaceRef space,
    CGPatternRef pattern,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGColorCreateWithPattern(
      space,
      pattern,
      components,
    );
  }

  late final _CGColorCreateWithPatternPtr = _lookup<
      ffi.NativeFunction<
          CGColorRef Function(CGColorSpaceRef, CGPatternRef,
              ffi.Pointer<CGFloat>)>>('CGColorCreateWithPattern');
  late final _CGColorCreateWithPattern =
      _CGColorCreateWithPatternPtr.asFunction<
          CGColorRef Function(
              CGColorSpaceRef, CGPatternRef, ffi.Pointer<CGFloat>)>();

  CGColorRef CGColorCreateCopy(
    CGColorRef color,
  ) {
    return _CGColorCreateCopy(
      color,
    );
  }

  late final _CGColorCreateCopyPtr =
      _lookup<ffi.NativeFunction<CGColorRef Function(CGColorRef)>>(
          'CGColorCreateCopy');
  late final _CGColorCreateCopy =
      _CGColorCreateCopyPtr.asFunction<CGColorRef Function(CGColorRef)>();

  CGColorRef CGColorCreateCopyWithAlpha(
    CGColorRef color,
    double alpha,
  ) {
    return _CGColorCreateCopyWithAlpha(
      color,
      alpha,
    );
  }

  late final _CGColorCreateCopyWithAlphaPtr =
      _lookup<ffi.NativeFunction<CGColorRef Function(CGColorRef, CGFloat)>>(
          'CGColorCreateCopyWithAlpha');
  late final _CGColorCreateCopyWithAlpha = _CGColorCreateCopyWithAlphaPtr
      .asFunction<CGColorRef Function(CGColorRef, double)>();

  CGColorRef CGColorCreateCopyByMatchingToColorSpace(
    CGColorSpaceRef arg0,
    CGColorRenderingIntent intent,
    CGColorRef color,
    CFDictionaryRef options,
  ) {
    return _CGColorCreateCopyByMatchingToColorSpace(
      arg0,
      intent.value,
      color,
      options,
    );
  }

  late final _CGColorCreateCopyByMatchingToColorSpacePtr = _lookup<
      ffi.NativeFunction<
          CGColorRef Function(CGColorSpaceRef, ffi.Int32, CGColorRef,
              CFDictionaryRef)>>('CGColorCreateCopyByMatchingToColorSpace');
  late final _CGColorCreateCopyByMatchingToColorSpace =
      _CGColorCreateCopyByMatchingToColorSpacePtr.asFunction<
          CGColorRef Function(
              CGColorSpaceRef, int, CGColorRef, CFDictionaryRef)>();

  CGColorRef CGColorRetain(
    CGColorRef color,
  ) {
    return _CGColorRetain(
      color,
    );
  }

  late final _CGColorRetainPtr =
      _lookup<ffi.NativeFunction<CGColorRef Function(CGColorRef)>>(
          'CGColorRetain');
  late final _CGColorRetain =
      _CGColorRetainPtr.asFunction<CGColorRef Function(CGColorRef)>();

  void CGColorRelease(
    CGColorRef color,
  ) {
    return _CGColorRelease(
      color,
    );
  }

  late final _CGColorReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGColorRef)>>(
          'CGColorRelease');
  late final _CGColorRelease =
      _CGColorReleasePtr.asFunction<void Function(CGColorRef)>();

  bool CGColorEqualToColor(
    CGColorRef color1,
    CGColorRef color2,
  ) {
    return _CGColorEqualToColor(
      color1,
      color2,
    );
  }

  late final _CGColorEqualToColorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGColorRef, CGColorRef)>>(
          'CGColorEqualToColor');
  late final _CGColorEqualToColor = _CGColorEqualToColorPtr.asFunction<
      bool Function(CGColorRef, CGColorRef)>();

  int CGColorGetNumberOfComponents(
    CGColorRef color,
  ) {
    return _CGColorGetNumberOfComponents(
      color,
    );
  }

  late final _CGColorGetNumberOfComponentsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGColorRef)>>(
          'CGColorGetNumberOfComponents');
  late final _CGColorGetNumberOfComponents =
      _CGColorGetNumberOfComponentsPtr.asFunction<int Function(CGColorRef)>();

  ffi.Pointer<CGFloat> CGColorGetComponents(
    CGColorRef color,
  ) {
    return _CGColorGetComponents(
      color,
    );
  }

  late final _CGColorGetComponentsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CGFloat> Function(CGColorRef)>>(
          'CGColorGetComponents');
  late final _CGColorGetComponents = _CGColorGetComponentsPtr.asFunction<
      ffi.Pointer<CGFloat> Function(CGColorRef)>();

  double CGColorGetAlpha(
    CGColorRef color,
  ) {
    return _CGColorGetAlpha(
      color,
    );
  }

  late final _CGColorGetAlphaPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGColorRef)>>(
          'CGColorGetAlpha');
  late final _CGColorGetAlpha =
      _CGColorGetAlphaPtr.asFunction<double Function(CGColorRef)>();

  CGColorSpaceRef CGColorGetColorSpace(
    CGColorRef color,
  ) {
    return _CGColorGetColorSpace(
      color,
    );
  }

  late final _CGColorGetColorSpacePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGColorRef)>>(
          'CGColorGetColorSpace');
  late final _CGColorGetColorSpace = _CGColorGetColorSpacePtr.asFunction<
      CGColorSpaceRef Function(CGColorRef)>();

  CGPatternRef CGColorGetPattern(
    CGColorRef color,
  ) {
    return _CGColorGetPattern(
      color,
    );
  }

  late final _CGColorGetPatternPtr =
      _lookup<ffi.NativeFunction<CGPatternRef Function(CGColorRef)>>(
          'CGColorGetPattern');
  late final _CGColorGetPattern =
      _CGColorGetPatternPtr.asFunction<CGPatternRef Function(CGColorRef)>();

  int CGColorGetTypeID() {
    return _CGColorGetTypeID();
  }

  late final _CGColorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGColorGetTypeID');
  late final _CGColorGetTypeID =
      _CGColorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCGColorWhite =
      _lookup<CFStringRef>('kCGColorWhite');

  CFStringRef get kCGColorWhite => _kCGColorWhite.value;

  set kCGColorWhite(CFStringRef value) => _kCGColorWhite.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorBlack =
      _lookup<CFStringRef>('kCGColorBlack');

  CFStringRef get kCGColorBlack => _kCGColorBlack.value;

  set kCGColorBlack(CFStringRef value) => _kCGColorBlack.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorClear =
      _lookup<CFStringRef>('kCGColorClear');

  CFStringRef get kCGColorClear => _kCGColorClear.value;

  set kCGColorClear(CFStringRef value) => _kCGColorClear.value = value;

  late final ffi.Pointer<CGFontIndex> _kCGFontIndexMax =
      _lookup<CGFontIndex>('kCGFontIndexMax');

  DartCGFontIndex get kCGFontIndexMax => _kCGFontIndexMax.value;

  late final ffi.Pointer<CGFontIndex> _kCGFontIndexInvalid =
      _lookup<CGFontIndex>('kCGFontIndexInvalid');

  DartCGFontIndex get kCGFontIndexInvalid => _kCGFontIndexInvalid.value;

  late final ffi.Pointer<CGFontIndex> _kCGGlyphMax =
      _lookup<CGFontIndex>('kCGGlyphMax');

  DartCGFontIndex get kCGGlyphMax => _kCGGlyphMax.value;

  int CGFontGetTypeID() {
    return _CGFontGetTypeID();
  }

  late final _CGFontGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGFontGetTypeID');
  late final _CGFontGetTypeID =
      _CGFontGetTypeIDPtr.asFunction<int Function()>();

  CGFontRef CGFontCreateWithPlatformFont(
    ffi.Pointer<ffi.Void> platformFontReference,
  ) {
    return _CGFontCreateWithPlatformFont(
      platformFontReference,
    );
  }

  late final _CGFontCreateWithPlatformFontPtr =
      _lookup<ffi.NativeFunction<CGFontRef Function(ffi.Pointer<ffi.Void>)>>(
          'CGFontCreateWithPlatformFont');
  late final _CGFontCreateWithPlatformFont = _CGFontCreateWithPlatformFontPtr
      .asFunction<CGFontRef Function(ffi.Pointer<ffi.Void>)>();

  CGFontRef CGFontCreateWithDataProvider(
    CGDataProviderRef provider,
  ) {
    return _CGFontCreateWithDataProvider(
      provider,
    );
  }

  late final _CGFontCreateWithDataProviderPtr =
      _lookup<ffi.NativeFunction<CGFontRef Function(CGDataProviderRef)>>(
          'CGFontCreateWithDataProvider');
  late final _CGFontCreateWithDataProvider = _CGFontCreateWithDataProviderPtr
      .asFunction<CGFontRef Function(CGDataProviderRef)>();

  CGFontRef CGFontCreateWithFontName(
    CFStringRef name,
  ) {
    return _CGFontCreateWithFontName(
      name,
    );
  }

  late final _CGFontCreateWithFontNamePtr =
      _lookup<ffi.NativeFunction<CGFontRef Function(CFStringRef)>>(
          'CGFontCreateWithFontName');
  late final _CGFontCreateWithFontName = _CGFontCreateWithFontNamePtr
      .asFunction<CGFontRef Function(CFStringRef)>();

  CGFontRef CGFontCreateCopyWithVariations(
    CGFontRef font,
    CFDictionaryRef variations,
  ) {
    return _CGFontCreateCopyWithVariations(
      font,
      variations,
    );
  }

  late final _CGFontCreateCopyWithVariationsPtr = _lookup<
          ffi.NativeFunction<CGFontRef Function(CGFontRef, CFDictionaryRef)>>(
      'CGFontCreateCopyWithVariations');
  late final _CGFontCreateCopyWithVariations =
      _CGFontCreateCopyWithVariationsPtr.asFunction<
          CGFontRef Function(CGFontRef, CFDictionaryRef)>();

  CGFontRef CGFontRetain(
    CGFontRef font,
  ) {
    return _CGFontRetain(
      font,
    );
  }

  late final _CGFontRetainPtr =
      _lookup<ffi.NativeFunction<CGFontRef Function(CGFontRef)>>(
          'CGFontRetain');
  late final _CGFontRetain =
      _CGFontRetainPtr.asFunction<CGFontRef Function(CGFontRef)>();

  void CGFontRelease(
    CGFontRef font,
  ) {
    return _CGFontRelease(
      font,
    );
  }

  late final _CGFontReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGFontRef)>>(
          'CGFontRelease');
  late final _CGFontRelease =
      _CGFontReleasePtr.asFunction<void Function(CGFontRef)>();

  int CGFontGetNumberOfGlyphs(
    CGFontRef font,
  ) {
    return _CGFontGetNumberOfGlyphs(
      font,
    );
  }

  late final _CGFontGetNumberOfGlyphsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGFontRef)>>(
          'CGFontGetNumberOfGlyphs');
  late final _CGFontGetNumberOfGlyphs =
      _CGFontGetNumberOfGlyphsPtr.asFunction<int Function(CGFontRef)>();

  int CGFontGetUnitsPerEm(
    CGFontRef font,
  ) {
    return _CGFontGetUnitsPerEm(
      font,
    );
  }

  late final _CGFontGetUnitsPerEmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGFontRef)>>(
          'CGFontGetUnitsPerEm');
  late final _CGFontGetUnitsPerEm =
      _CGFontGetUnitsPerEmPtr.asFunction<int Function(CGFontRef)>();

  CFStringRef CGFontCopyPostScriptName(
    CGFontRef font,
  ) {
    return _CGFontCopyPostScriptName(
      font,
    );
  }

  late final _CGFontCopyPostScriptNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGFontRef)>>(
          'CGFontCopyPostScriptName');
  late final _CGFontCopyPostScriptName = _CGFontCopyPostScriptNamePtr
      .asFunction<CFStringRef Function(CGFontRef)>();

  CFStringRef CGFontCopyFullName(
    CGFontRef font,
  ) {
    return _CGFontCopyFullName(
      font,
    );
  }

  late final _CGFontCopyFullNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGFontRef)>>(
          'CGFontCopyFullName');
  late final _CGFontCopyFullName =
      _CGFontCopyFullNamePtr.asFunction<CFStringRef Function(CGFontRef)>();

  int CGFontGetAscent(
    CGFontRef font,
  ) {
    return _CGFontGetAscent(
      font,
    );
  }

  late final _CGFontGetAscentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGFontRef)>>(
          'CGFontGetAscent');
  late final _CGFontGetAscent =
      _CGFontGetAscentPtr.asFunction<int Function(CGFontRef)>();

  int CGFontGetDescent(
    CGFontRef font,
  ) {
    return _CGFontGetDescent(
      font,
    );
  }

  late final _CGFontGetDescentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGFontRef)>>(
          'CGFontGetDescent');
  late final _CGFontGetDescent =
      _CGFontGetDescentPtr.asFunction<int Function(CGFontRef)>();

  int CGFontGetLeading(
    CGFontRef font,
  ) {
    return _CGFontGetLeading(
      font,
    );
  }

  late final _CGFontGetLeadingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGFontRef)>>(
          'CGFontGetLeading');
  late final _CGFontGetLeading =
      _CGFontGetLeadingPtr.asFunction<int Function(CGFontRef)>();

  int CGFontGetCapHeight(
    CGFontRef font,
  ) {
    return _CGFontGetCapHeight(
      font,
    );
  }

  late final _CGFontGetCapHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGFontRef)>>(
          'CGFontGetCapHeight');
  late final _CGFontGetCapHeight =
      _CGFontGetCapHeightPtr.asFunction<int Function(CGFontRef)>();

  int CGFontGetXHeight(
    CGFontRef font,
  ) {
    return _CGFontGetXHeight(
      font,
    );
  }

  late final _CGFontGetXHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGFontRef)>>(
          'CGFontGetXHeight');
  late final _CGFontGetXHeight =
      _CGFontGetXHeightPtr.asFunction<int Function(CGFontRef)>();

  CGRect CGFontGetFontBBox(
    CGFontRef font,
  ) {
    return _CGFontGetFontBBox(
      font,
    );
  }

  late final _CGFontGetFontBBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGFontRef)>>(
          'CGFontGetFontBBox');
  late final _CGFontGetFontBBox =
      _CGFontGetFontBBoxPtr.asFunction<CGRect Function(CGFontRef)>();

  double CGFontGetItalicAngle(
    CGFontRef font,
  ) {
    return _CGFontGetItalicAngle(
      font,
    );
  }

  late final _CGFontGetItalicAnglePtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGFontRef)>>(
          'CGFontGetItalicAngle');
  late final _CGFontGetItalicAngle =
      _CGFontGetItalicAnglePtr.asFunction<double Function(CGFontRef)>();

  double CGFontGetStemV(
    CGFontRef font,
  ) {
    return _CGFontGetStemV(
      font,
    );
  }

  late final _CGFontGetStemVPtr =
      _lookup<ffi.NativeFunction<CGFloat Function(CGFontRef)>>(
          'CGFontGetStemV');
  late final _CGFontGetStemV =
      _CGFontGetStemVPtr.asFunction<double Function(CGFontRef)>();

  CFArrayRef CGFontCopyVariationAxes(
    CGFontRef font,
  ) {
    return _CGFontCopyVariationAxes(
      font,
    );
  }

  late final _CGFontCopyVariationAxesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CGFontRef)>>(
          'CGFontCopyVariationAxes');
  late final _CGFontCopyVariationAxes =
      _CGFontCopyVariationAxesPtr.asFunction<CFArrayRef Function(CGFontRef)>();

  CFDictionaryRef CGFontCopyVariations(
    CGFontRef font,
  ) {
    return _CGFontCopyVariations(
      font,
    );
  }

  late final _CGFontCopyVariationsPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CGFontRef)>>(
          'CGFontCopyVariations');
  late final _CGFontCopyVariations = _CGFontCopyVariationsPtr.asFunction<
      CFDictionaryRef Function(CGFontRef)>();

  bool CGFontGetGlyphAdvances(
    CGFontRef font,
    ffi.Pointer<CGGlyph> glyphs,
    int count,
    ffi.Pointer<ffi.Int> advances,
  ) {
    return _CGFontGetGlyphAdvances(
      font,
      glyphs,
      count,
      advances,
    );
  }

  late final _CGFontGetGlyphAdvancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGFontRef, ffi.Pointer<CGGlyph>, ffi.Size,
              ffi.Pointer<ffi.Int>)>>('CGFontGetGlyphAdvances');
  late final _CGFontGetGlyphAdvances = _CGFontGetGlyphAdvancesPtr.asFunction<
      bool Function(
          CGFontRef, ffi.Pointer<CGGlyph>, int, ffi.Pointer<ffi.Int>)>();

  bool CGFontGetGlyphBBoxes(
    CGFontRef font,
    ffi.Pointer<CGGlyph> glyphs,
    int count,
    ffi.Pointer<CGRect> bboxes,
  ) {
    return _CGFontGetGlyphBBoxes(
      font,
      glyphs,
      count,
      bboxes,
    );
  }

  late final _CGFontGetGlyphBBoxesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGFontRef, ffi.Pointer<CGGlyph>, ffi.Size,
              ffi.Pointer<CGRect>)>>('CGFontGetGlyphBBoxes');
  late final _CGFontGetGlyphBBoxes = _CGFontGetGlyphBBoxesPtr.asFunction<
      bool Function(
          CGFontRef, ffi.Pointer<CGGlyph>, int, ffi.Pointer<CGRect>)>();

  int CGFontGetGlyphWithGlyphName(
    CGFontRef font,
    CFStringRef name,
  ) {
    return _CGFontGetGlyphWithGlyphName(
      font,
      name,
    );
  }

  late final _CGFontGetGlyphWithGlyphNamePtr =
      _lookup<ffi.NativeFunction<CGGlyph Function(CGFontRef, CFStringRef)>>(
          'CGFontGetGlyphWithGlyphName');
  late final _CGFontGetGlyphWithGlyphName = _CGFontGetGlyphWithGlyphNamePtr
      .asFunction<int Function(CGFontRef, CFStringRef)>();

  CFStringRef CGFontCopyGlyphNameForGlyph(
    CGFontRef font,
    int glyph,
  ) {
    return _CGFontCopyGlyphNameForGlyph(
      font,
      glyph,
    );
  }

  late final _CGFontCopyGlyphNameForGlyphPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGFontRef, CGGlyph)>>(
          'CGFontCopyGlyphNameForGlyph');
  late final _CGFontCopyGlyphNameForGlyph = _CGFontCopyGlyphNameForGlyphPtr
      .asFunction<CFStringRef Function(CGFontRef, int)>();

  bool CGFontCanCreatePostScriptSubset(
    CGFontRef font,
    CGFontPostScriptFormat format,
  ) {
    return _CGFontCanCreatePostScriptSubset(
      font,
      format.value,
    );
  }

  late final _CGFontCanCreatePostScriptSubsetPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGFontRef, ffi.Int32)>>(
          'CGFontCanCreatePostScriptSubset');
  late final _CGFontCanCreatePostScriptSubset =
      _CGFontCanCreatePostScriptSubsetPtr.asFunction<
          bool Function(CGFontRef, int)>();

  CFDataRef CGFontCreatePostScriptSubset(
    CGFontRef font,
    CFStringRef subsetName,
    CGFontPostScriptFormat format,
    ffi.Pointer<CGGlyph> glyphs,
    int count,
    ffi.Pointer<CGGlyph> encoding,
  ) {
    return _CGFontCreatePostScriptSubset(
      font,
      subsetName,
      format.value,
      glyphs,
      count,
      encoding,
    );
  }

  late final _CGFontCreatePostScriptSubsetPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CGFontRef,
              CFStringRef,
              ffi.Int32,
              ffi.Pointer<CGGlyph>,
              ffi.Size,
              ffi.Pointer<CGGlyph>)>>('CGFontCreatePostScriptSubset');
  late final _CGFontCreatePostScriptSubset =
      _CGFontCreatePostScriptSubsetPtr.asFunction<
          CFDataRef Function(CGFontRef, CFStringRef, int, ffi.Pointer<CGGlyph>,
              int, ffi.Pointer<CGGlyph>)>();

  CFDataRef CGFontCreatePostScriptEncoding(
    CGFontRef font,
    ffi.Pointer<CGGlyph> encoding,
  ) {
    return _CGFontCreatePostScriptEncoding(
      font,
      encoding,
    );
  }

  late final _CGFontCreatePostScriptEncodingPtr = _lookup<
          ffi
          .NativeFunction<CFDataRef Function(CGFontRef, ffi.Pointer<CGGlyph>)>>(
      'CGFontCreatePostScriptEncoding');
  late final _CGFontCreatePostScriptEncoding =
      _CGFontCreatePostScriptEncodingPtr.asFunction<
          CFDataRef Function(CGFontRef, ffi.Pointer<CGGlyph>)>();

  CFArrayRef CGFontCopyTableTags(
    CGFontRef font,
  ) {
    return _CGFontCopyTableTags(
      font,
    );
  }

  late final _CGFontCopyTableTagsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CGFontRef)>>(
          'CGFontCopyTableTags');
  late final _CGFontCopyTableTags =
      _CGFontCopyTableTagsPtr.asFunction<CFArrayRef Function(CGFontRef)>();

  CFDataRef CGFontCopyTableForTag(
    CGFontRef font,
    int tag,
  ) {
    return _CGFontCopyTableForTag(
      font,
      tag,
    );
  }

  late final _CGFontCopyTableForTagPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CGFontRef, ffi.Uint32)>>(
          'CGFontCopyTableForTag');
  late final _CGFontCopyTableForTag = _CGFontCopyTableForTagPtr.asFunction<
      CFDataRef Function(CGFontRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCGFontVariationAxisName =
      _lookup<CFStringRef>('kCGFontVariationAxisName');

  CFStringRef get kCGFontVariationAxisName => _kCGFontVariationAxisName.value;

  set kCGFontVariationAxisName(CFStringRef value) =>
      _kCGFontVariationAxisName.value = value;

  late final ffi.Pointer<CFStringRef> _kCGFontVariationAxisMinValue =
      _lookup<CFStringRef>('kCGFontVariationAxisMinValue');

  CFStringRef get kCGFontVariationAxisMinValue =>
      _kCGFontVariationAxisMinValue.value;

  set kCGFontVariationAxisMinValue(CFStringRef value) =>
      _kCGFontVariationAxisMinValue.value = value;

  late final ffi.Pointer<CFStringRef> _kCGFontVariationAxisMaxValue =
      _lookup<CFStringRef>('kCGFontVariationAxisMaxValue');

  CFStringRef get kCGFontVariationAxisMaxValue =>
      _kCGFontVariationAxisMaxValue.value;

  set kCGFontVariationAxisMaxValue(CFStringRef value) =>
      _kCGFontVariationAxisMaxValue.value = value;

  late final ffi.Pointer<CFStringRef> _kCGFontVariationAxisDefaultValue =
      _lookup<CFStringRef>('kCGFontVariationAxisDefaultValue');

  CFStringRef get kCGFontVariationAxisDefaultValue =>
      _kCGFontVariationAxisDefaultValue.value;

  set kCGFontVariationAxisDefaultValue(CFStringRef value) =>
      _kCGFontVariationAxisDefaultValue.value = value;

  int CGGradientGetTypeID() {
    return _CGGradientGetTypeID();
  }

  late final _CGGradientGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGGradientGetTypeID');
  late final _CGGradientGetTypeID =
      _CGGradientGetTypeIDPtr.asFunction<int Function()>();

  CGGradientRef CGGradientCreateWithColorComponents(
    CGColorSpaceRef space,
    ffi.Pointer<CGFloat> components,
    ffi.Pointer<CGFloat> locations,
    int count,
  ) {
    return _CGGradientCreateWithColorComponents(
      space,
      components,
      locations,
      count,
    );
  }

  late final _CGGradientCreateWithColorComponentsPtr = _lookup<
      ffi.NativeFunction<
          CGGradientRef Function(
              CGColorSpaceRef,
              ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>,
              ffi.Size)>>('CGGradientCreateWithColorComponents');
  late final _CGGradientCreateWithColorComponents =
      _CGGradientCreateWithColorComponentsPtr.asFunction<
          CGGradientRef Function(CGColorSpaceRef, ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFloat>, int)>();

  CGGradientRef CGGradientCreateWithColors(
    CGColorSpaceRef space,
    CFArrayRef colors,
    ffi.Pointer<CGFloat> locations,
  ) {
    return _CGGradientCreateWithColors(
      space,
      colors,
      locations,
    );
  }

  late final _CGGradientCreateWithColorsPtr = _lookup<
      ffi.NativeFunction<
          CGGradientRef Function(CGColorSpaceRef, CFArrayRef,
              ffi.Pointer<CGFloat>)>>('CGGradientCreateWithColors');
  late final _CGGradientCreateWithColors =
      _CGGradientCreateWithColorsPtr.asFunction<
          CGGradientRef Function(
              CGColorSpaceRef, CFArrayRef, ffi.Pointer<CGFloat>)>();

  CGGradientRef CGGradientRetain(
    CGGradientRef gradient,
  ) {
    return _CGGradientRetain(
      gradient,
    );
  }

  late final _CGGradientRetainPtr =
      _lookup<ffi.NativeFunction<CGGradientRef Function(CGGradientRef)>>(
          'CGGradientRetain');
  late final _CGGradientRetain =
      _CGGradientRetainPtr.asFunction<CGGradientRef Function(CGGradientRef)>();

  void CGGradientRelease(
    CGGradientRef gradient,
  ) {
    return _CGGradientRelease(
      gradient,
    );
  }

  late final _CGGradientReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGGradientRef)>>(
          'CGGradientRelease');
  late final _CGGradientRelease =
      _CGGradientReleasePtr.asFunction<void Function(CGGradientRef)>();

  late final ffi.Pointer<ffi.Uint32> _kCGBitmapByteOrder16Host =
      _lookup<ffi.Uint32>('kCGBitmapByteOrder16Host');

  CGBitmapInfo get kCGBitmapByteOrder16Host =>
      CGBitmapInfo.fromValue(_kCGBitmapByteOrder16Host.value);

  late final ffi.Pointer<ffi.Uint32> _kCGBitmapByteOrder32Host =
      _lookup<ffi.Uint32>('kCGBitmapByteOrder32Host');

  CGBitmapInfo get kCGBitmapByteOrder32Host =>
      CGBitmapInfo.fromValue(_kCGBitmapByteOrder32Host.value);

  int CGImageGetTypeID() {
    return _CGImageGetTypeID();
  }

  late final _CGImageGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGImageGetTypeID');
  late final _CGImageGetTypeID =
      _CGImageGetTypeIDPtr.asFunction<int Function()>();

  CGImageRef CGImageCreate(
    int width,
    int height,
    int bitsPerComponent,
    int bitsPerPixel,
    int bytesPerRow,
    CGColorSpaceRef space,
    CGBitmapInfo bitmapInfo,
    CGDataProviderRef provider,
    ffi.Pointer<CGFloat> decode,
    bool shouldInterpolate,
    CGColorRenderingIntent intent,
  ) {
    return _CGImageCreate(
      width,
      height,
      bitsPerComponent,
      bitsPerPixel,
      bytesPerRow,
      space,
      bitmapInfo.value,
      provider,
      decode,
      shouldInterpolate,
      intent.value,
    );
  }

  late final _CGImageCreatePtr = _lookup<
      ffi.NativeFunction<
          CGImageRef Function(
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              CGColorSpaceRef,
              ffi.Uint32,
              CGDataProviderRef,
              ffi.Pointer<CGFloat>,
              ffi.Bool,
              ffi.Int32)>>('CGImageCreate');
  late final _CGImageCreate = _CGImageCreatePtr.asFunction<
      CGImageRef Function(int, int, int, int, int, CGColorSpaceRef, int,
          CGDataProviderRef, ffi.Pointer<CGFloat>, bool, int)>();

  CGImageRef CGImageMaskCreate(
    int width,
    int height,
    int bitsPerComponent,
    int bitsPerPixel,
    int bytesPerRow,
    CGDataProviderRef provider,
    ffi.Pointer<CGFloat> decode,
    bool shouldInterpolate,
  ) {
    return _CGImageMaskCreate(
      width,
      height,
      bitsPerComponent,
      bitsPerPixel,
      bytesPerRow,
      provider,
      decode,
      shouldInterpolate,
    );
  }

  late final _CGImageMaskCreatePtr = _lookup<
      ffi.NativeFunction<
          CGImageRef Function(
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              CGDataProviderRef,
              ffi.Pointer<CGFloat>,
              ffi.Bool)>>('CGImageMaskCreate');
  late final _CGImageMaskCreate = _CGImageMaskCreatePtr.asFunction<
      CGImageRef Function(int, int, int, int, int, CGDataProviderRef,
          ffi.Pointer<CGFloat>, bool)>();

  CGImageRef CGImageCreateCopy(
    CGImageRef image,
  ) {
    return _CGImageCreateCopy(
      image,
    );
  }

  late final _CGImageCreateCopyPtr =
      _lookup<ffi.NativeFunction<CGImageRef Function(CGImageRef)>>(
          'CGImageCreateCopy');
  late final _CGImageCreateCopy =
      _CGImageCreateCopyPtr.asFunction<CGImageRef Function(CGImageRef)>();

  CGImageRef CGImageCreateWithJPEGDataProvider(
    CGDataProviderRef source,
    ffi.Pointer<CGFloat> decode,
    bool shouldInterpolate,
    CGColorRenderingIntent intent,
  ) {
    return _CGImageCreateWithJPEGDataProvider(
      source,
      decode,
      shouldInterpolate,
      intent.value,
    );
  }

  late final _CGImageCreateWithJPEGDataProviderPtr = _lookup<
      ffi.NativeFunction<
          CGImageRef Function(CGDataProviderRef, ffi.Pointer<CGFloat>, ffi.Bool,
              ffi.Int32)>>('CGImageCreateWithJPEGDataProvider');
  late final _CGImageCreateWithJPEGDataProvider =
      _CGImageCreateWithJPEGDataProviderPtr.asFunction<
          CGImageRef Function(
              CGDataProviderRef, ffi.Pointer<CGFloat>, bool, int)>();

  CGImageRef CGImageCreateWithPNGDataProvider(
    CGDataProviderRef source,
    ffi.Pointer<CGFloat> decode,
    bool shouldInterpolate,
    CGColorRenderingIntent intent,
  ) {
    return _CGImageCreateWithPNGDataProvider(
      source,
      decode,
      shouldInterpolate,
      intent.value,
    );
  }

  late final _CGImageCreateWithPNGDataProviderPtr = _lookup<
      ffi.NativeFunction<
          CGImageRef Function(CGDataProviderRef, ffi.Pointer<CGFloat>, ffi.Bool,
              ffi.Int32)>>('CGImageCreateWithPNGDataProvider');
  late final _CGImageCreateWithPNGDataProvider =
      _CGImageCreateWithPNGDataProviderPtr.asFunction<
          CGImageRef Function(
              CGDataProviderRef, ffi.Pointer<CGFloat>, bool, int)>();

  CGImageRef CGImageCreateWithImageInRect(
    CGImageRef image,
    CGRect rect,
  ) {
    return _CGImageCreateWithImageInRect(
      image,
      rect,
    );
  }

  late final _CGImageCreateWithImageInRectPtr =
      _lookup<ffi.NativeFunction<CGImageRef Function(CGImageRef, CGRect)>>(
          'CGImageCreateWithImageInRect');
  late final _CGImageCreateWithImageInRect = _CGImageCreateWithImageInRectPtr
      .asFunction<CGImageRef Function(CGImageRef, CGRect)>();

  CGImageRef CGImageCreateWithMask(
    CGImageRef image,
    CGImageRef mask,
  ) {
    return _CGImageCreateWithMask(
      image,
      mask,
    );
  }

  late final _CGImageCreateWithMaskPtr =
      _lookup<ffi.NativeFunction<CGImageRef Function(CGImageRef, CGImageRef)>>(
          'CGImageCreateWithMask');
  late final _CGImageCreateWithMask = _CGImageCreateWithMaskPtr.asFunction<
      CGImageRef Function(CGImageRef, CGImageRef)>();

  CGImageRef CGImageCreateWithMaskingColors(
    CGImageRef image,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGImageCreateWithMaskingColors(
      image,
      components,
    );
  }

  late final _CGImageCreateWithMaskingColorsPtr = _lookup<
      ffi.NativeFunction<
          CGImageRef Function(CGImageRef,
              ffi.Pointer<CGFloat>)>>('CGImageCreateWithMaskingColors');
  late final _CGImageCreateWithMaskingColors =
      _CGImageCreateWithMaskingColorsPtr.asFunction<
          CGImageRef Function(CGImageRef, ffi.Pointer<CGFloat>)>();

  CGImageRef CGImageCreateCopyWithColorSpace(
    CGImageRef image,
    CGColorSpaceRef space,
  ) {
    return _CGImageCreateCopyWithColorSpace(
      image,
      space,
    );
  }

  late final _CGImageCreateCopyWithColorSpacePtr = _lookup<
          ffi.NativeFunction<CGImageRef Function(CGImageRef, CGColorSpaceRef)>>(
      'CGImageCreateCopyWithColorSpace');
  late final _CGImageCreateCopyWithColorSpace =
      _CGImageCreateCopyWithColorSpacePtr.asFunction<
          CGImageRef Function(CGImageRef, CGColorSpaceRef)>();

  CGImageRef CGImageCreateWithContentHeadroom(
    double headroom,
    int width,
    int height,
    int bitsPerComponent,
    int bitsPerPixel,
    int bytesPerRow,
    CGColorSpaceRef space,
    CGBitmapInfo bitmapInfo,
    CGDataProviderRef provider,
    ffi.Pointer<CGFloat> decode,
    bool shouldInterpolate,
    CGColorRenderingIntent intent,
  ) {
    return _CGImageCreateWithContentHeadroom(
      headroom,
      width,
      height,
      bitsPerComponent,
      bitsPerPixel,
      bytesPerRow,
      space,
      bitmapInfo.value,
      provider,
      decode,
      shouldInterpolate,
      intent.value,
    );
  }

  late final _CGImageCreateWithContentHeadroomPtr = _lookup<
      ffi.NativeFunction<
          CGImageRef Function(
              ffi.Float,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              CGColorSpaceRef,
              ffi.Uint32,
              CGDataProviderRef,
              ffi.Pointer<CGFloat>,
              ffi.Bool,
              ffi.Int32)>>('CGImageCreateWithContentHeadroom');
  late final _CGImageCreateWithContentHeadroom =
      _CGImageCreateWithContentHeadroomPtr.asFunction<
          CGImageRef Function(double, int, int, int, int, int, CGColorSpaceRef,
              int, CGDataProviderRef, ffi.Pointer<CGFloat>, bool, int)>();

  CGImageRef CGImageCreateCopyWithContentHeadroom(
    double headroom,
    CGImageRef image,
  ) {
    return _CGImageCreateCopyWithContentHeadroom(
      headroom,
      image,
    );
  }

  late final _CGImageCreateCopyWithContentHeadroomPtr =
      _lookup<ffi.NativeFunction<CGImageRef Function(ffi.Float, CGImageRef)>>(
          'CGImageCreateCopyWithContentHeadroom');
  late final _CGImageCreateCopyWithContentHeadroom =
      _CGImageCreateCopyWithContentHeadroomPtr.asFunction<
          CGImageRef Function(double, CGImageRef)>();

  late final ffi.Pointer<ffi.Float> _kCGDefaultHDRImageContentHeadroom =
      _lookup<ffi.Float>('kCGDefaultHDRImageContentHeadroom');

  double get kCGDefaultHDRImageContentHeadroom =>
      _kCGDefaultHDRImageContentHeadroom.value;

  set kCGDefaultHDRImageContentHeadroom(double value) =>
      _kCGDefaultHDRImageContentHeadroom.value = value;

  double CGImageGetContentHeadroom(
    CGImageRef image,
  ) {
    return _CGImageGetContentHeadroom(
      image,
    );
  }

  late final _CGImageGetContentHeadroomPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CGImageRef)>>(
          'CGImageGetContentHeadroom');
  late final _CGImageGetContentHeadroom =
      _CGImageGetContentHeadroomPtr.asFunction<double Function(CGImageRef)>();

  CGImageRef CGImageRetain(
    CGImageRef image,
  ) {
    return _CGImageRetain(
      image,
    );
  }

  late final _CGImageRetainPtr =
      _lookup<ffi.NativeFunction<CGImageRef Function(CGImageRef)>>(
          'CGImageRetain');
  late final _CGImageRetain =
      _CGImageRetainPtr.asFunction<CGImageRef Function(CGImageRef)>();

  void CGImageRelease(
    CGImageRef image,
  ) {
    return _CGImageRelease(
      image,
    );
  }

  late final _CGImageReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGImageRef)>>(
          'CGImageRelease');
  late final _CGImageRelease =
      _CGImageReleasePtr.asFunction<void Function(CGImageRef)>();

  bool CGImageIsMask(
    CGImageRef image,
  ) {
    return _CGImageIsMask(
      image,
    );
  }

  late final _CGImageIsMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGImageRef)>>(
          'CGImageIsMask');
  late final _CGImageIsMask =
      _CGImageIsMaskPtr.asFunction<bool Function(CGImageRef)>();

  int CGImageGetWidth(
    CGImageRef image,
  ) {
    return _CGImageGetWidth(
      image,
    );
  }

  late final _CGImageGetWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGImageRef)>>(
          'CGImageGetWidth');
  late final _CGImageGetWidth =
      _CGImageGetWidthPtr.asFunction<int Function(CGImageRef)>();

  int CGImageGetHeight(
    CGImageRef image,
  ) {
    return _CGImageGetHeight(
      image,
    );
  }

  late final _CGImageGetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGImageRef)>>(
          'CGImageGetHeight');
  late final _CGImageGetHeight =
      _CGImageGetHeightPtr.asFunction<int Function(CGImageRef)>();

  int CGImageGetBitsPerComponent(
    CGImageRef image,
  ) {
    return _CGImageGetBitsPerComponent(
      image,
    );
  }

  late final _CGImageGetBitsPerComponentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGImageRef)>>(
          'CGImageGetBitsPerComponent');
  late final _CGImageGetBitsPerComponent =
      _CGImageGetBitsPerComponentPtr.asFunction<int Function(CGImageRef)>();

  int CGImageGetBitsPerPixel(
    CGImageRef image,
  ) {
    return _CGImageGetBitsPerPixel(
      image,
    );
  }

  late final _CGImageGetBitsPerPixelPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGImageRef)>>(
          'CGImageGetBitsPerPixel');
  late final _CGImageGetBitsPerPixel =
      _CGImageGetBitsPerPixelPtr.asFunction<int Function(CGImageRef)>();

  int CGImageGetBytesPerRow(
    CGImageRef image,
  ) {
    return _CGImageGetBytesPerRow(
      image,
    );
  }

  late final _CGImageGetBytesPerRowPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGImageRef)>>(
          'CGImageGetBytesPerRow');
  late final _CGImageGetBytesPerRow =
      _CGImageGetBytesPerRowPtr.asFunction<int Function(CGImageRef)>();

  CGColorSpaceRef CGImageGetColorSpace(
    CGImageRef image,
  ) {
    return _CGImageGetColorSpace(
      image,
    );
  }

  late final _CGImageGetColorSpacePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGImageRef)>>(
          'CGImageGetColorSpace');
  late final _CGImageGetColorSpace = _CGImageGetColorSpacePtr.asFunction<
      CGColorSpaceRef Function(CGImageRef)>();

  CGImageAlphaInfo CGImageGetAlphaInfo(
    CGImageRef image,
  ) {
    return CGImageAlphaInfo.fromValue(_CGImageGetAlphaInfo(
      image,
    ));
  }

  late final _CGImageGetAlphaInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGImageRef)>>(
          'CGImageGetAlphaInfo');
  late final _CGImageGetAlphaInfo =
      _CGImageGetAlphaInfoPtr.asFunction<int Function(CGImageRef)>();

  CGDataProviderRef CGImageGetDataProvider(
    CGImageRef image,
  ) {
    return _CGImageGetDataProvider(
      image,
    );
  }

  late final _CGImageGetDataProviderPtr =
      _lookup<ffi.NativeFunction<CGDataProviderRef Function(CGImageRef)>>(
          'CGImageGetDataProvider');
  late final _CGImageGetDataProvider = _CGImageGetDataProviderPtr.asFunction<
      CGDataProviderRef Function(CGImageRef)>();

  ffi.Pointer<CGFloat> CGImageGetDecode(
    CGImageRef image,
  ) {
    return _CGImageGetDecode(
      image,
    );
  }

  late final _CGImageGetDecodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CGFloat> Function(CGImageRef)>>(
          'CGImageGetDecode');
  late final _CGImageGetDecode = _CGImageGetDecodePtr.asFunction<
      ffi.Pointer<CGFloat> Function(CGImageRef)>();

  bool CGImageGetShouldInterpolate(
    CGImageRef image,
  ) {
    return _CGImageGetShouldInterpolate(
      image,
    );
  }

  late final _CGImageGetShouldInterpolatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGImageRef)>>(
          'CGImageGetShouldInterpolate');
  late final _CGImageGetShouldInterpolate =
      _CGImageGetShouldInterpolatePtr.asFunction<bool Function(CGImageRef)>();

  CGColorRenderingIntent CGImageGetRenderingIntent(
    CGImageRef image,
  ) {
    return CGColorRenderingIntent.fromValue(_CGImageGetRenderingIntent(
      image,
    ));
  }

  late final _CGImageGetRenderingIntentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CGImageRef)>>(
          'CGImageGetRenderingIntent');
  late final _CGImageGetRenderingIntent =
      _CGImageGetRenderingIntentPtr.asFunction<int Function(CGImageRef)>();

  CGBitmapInfo CGImageGetBitmapInfo(
    CGImageRef image,
  ) {
    return CGBitmapInfo.fromValue(_CGImageGetBitmapInfo(
      image,
    ));
  }

  late final _CGImageGetBitmapInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGImageRef)>>(
          'CGImageGetBitmapInfo');
  late final _CGImageGetBitmapInfo =
      _CGImageGetBitmapInfoPtr.asFunction<int Function(CGImageRef)>();

  CGImageByteOrderInfo CGImageGetByteOrderInfo(
    CGImageRef image,
  ) {
    return CGImageByteOrderInfo.fromValue(_CGImageGetByteOrderInfo(
      image,
    ));
  }

  late final _CGImageGetByteOrderInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGImageRef)>>(
          'CGImageGetByteOrderInfo');
  late final _CGImageGetByteOrderInfo =
      _CGImageGetByteOrderInfoPtr.asFunction<int Function(CGImageRef)>();

  CGImagePixelFormatInfo CGImageGetPixelFormatInfo(
    CGImageRef image,
  ) {
    return CGImagePixelFormatInfo.fromValue(_CGImageGetPixelFormatInfo(
      image,
    ));
  }

  late final _CGImageGetPixelFormatInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGImageRef)>>(
          'CGImageGetPixelFormatInfo');
  late final _CGImageGetPixelFormatInfo =
      _CGImageGetPixelFormatInfoPtr.asFunction<int Function(CGImageRef)>();

  bool CGImageShouldToneMap(
    CGImageRef image,
  ) {
    return _CGImageShouldToneMap(
      image,
    );
  }

  late final _CGImageShouldToneMapPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGImageRef)>>(
          'CGImageShouldToneMap');
  late final _CGImageShouldToneMap =
      _CGImageShouldToneMapPtr.asFunction<bool Function(CGImageRef)>();

  bool CGImageContainsImageSpecificToneMappingMetadata(
    CGImageRef image,
  ) {
    return _CGImageContainsImageSpecificToneMappingMetadata(
      image,
    );
  }

  late final _CGImageContainsImageSpecificToneMappingMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGImageRef)>>(
          'CGImageContainsImageSpecificToneMappingMetadata');
  late final _CGImageContainsImageSpecificToneMappingMetadata =
      _CGImageContainsImageSpecificToneMappingMetadataPtr.asFunction<
          bool Function(CGImageRef)>();

  CFStringRef CGImageGetUTType(
    CGImageRef image,
  ) {
    return _CGImageGetUTType(
      image,
    );
  }

  late final _CGImageGetUTTypePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGImageRef)>>(
          'CGImageGetUTType');
  late final _CGImageGetUTType =
      _CGImageGetUTTypePtr.asFunction<CFStringRef Function(CGImageRef)>();

  int CGPathGetTypeID() {
    return _CGPathGetTypeID();
  }

  late final _CGPathGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGPathGetTypeID');
  late final _CGPathGetTypeID =
      _CGPathGetTypeIDPtr.asFunction<int Function()>();

  CGMutablePathRef CGPathCreateMutable() {
    return _CGPathCreateMutable();
  }

  late final _CGPathCreateMutablePtr =
      _lookup<ffi.NativeFunction<CGMutablePathRef Function()>>(
          'CGPathCreateMutable');
  late final _CGPathCreateMutable =
      _CGPathCreateMutablePtr.asFunction<CGMutablePathRef Function()>();

  CGPathRef CGPathCreateCopy(
    CGPathRef path,
  ) {
    return _CGPathCreateCopy(
      path,
    );
  }

  late final _CGPathCreateCopyPtr =
      _lookup<ffi.NativeFunction<CGPathRef Function(CGPathRef)>>(
          'CGPathCreateCopy');
  late final _CGPathCreateCopy =
      _CGPathCreateCopyPtr.asFunction<CGPathRef Function(CGPathRef)>();

  CGPathRef CGPathCreateCopyByTransformingPath(
    CGPathRef path,
    ffi.Pointer<CGAffineTransform> transform,
  ) {
    return _CGPathCreateCopyByTransformingPath(
      path,
      transform,
    );
  }

  late final _CGPathCreateCopyByTransformingPathPtr = _lookup<
          ffi.NativeFunction<
              CGPathRef Function(CGPathRef, ffi.Pointer<CGAffineTransform>)>>(
      'CGPathCreateCopyByTransformingPath');
  late final _CGPathCreateCopyByTransformingPath =
      _CGPathCreateCopyByTransformingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, ffi.Pointer<CGAffineTransform>)>();

  CGMutablePathRef CGPathCreateMutableCopy(
    CGPathRef path,
  ) {
    return _CGPathCreateMutableCopy(
      path,
    );
  }

  late final _CGPathCreateMutableCopyPtr =
      _lookup<ffi.NativeFunction<CGMutablePathRef Function(CGPathRef)>>(
          'CGPathCreateMutableCopy');
  late final _CGPathCreateMutableCopy = _CGPathCreateMutableCopyPtr.asFunction<
      CGMutablePathRef Function(CGPathRef)>();

  CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(
    CGPathRef path,
    ffi.Pointer<CGAffineTransform> transform,
  ) {
    return _CGPathCreateMutableCopyByTransformingPath(
      path,
      transform,
    );
  }

  late final _CGPathCreateMutableCopyByTransformingPathPtr = _lookup<
          ffi.NativeFunction<
              CGMutablePathRef Function(
                  CGPathRef, ffi.Pointer<CGAffineTransform>)>>(
      'CGPathCreateMutableCopyByTransformingPath');
  late final _CGPathCreateMutableCopyByTransformingPath =
      _CGPathCreateMutableCopyByTransformingPathPtr.asFunction<
          CGMutablePathRef Function(
              CGPathRef, ffi.Pointer<CGAffineTransform>)>();

  CGPathRef CGPathCreateWithRect(
    CGRect rect,
    ffi.Pointer<CGAffineTransform> transform,
  ) {
    return _CGPathCreateWithRect(
      rect,
      transform,
    );
  }

  late final _CGPathCreateWithRectPtr = _lookup<
      ffi.NativeFunction<
          CGPathRef Function(
              CGRect, ffi.Pointer<CGAffineTransform>)>>('CGPathCreateWithRect');
  late final _CGPathCreateWithRect = _CGPathCreateWithRectPtr.asFunction<
      CGPathRef Function(CGRect, ffi.Pointer<CGAffineTransform>)>();

  CGPathRef CGPathCreateWithEllipseInRect(
    CGRect rect,
    ffi.Pointer<CGAffineTransform> transform,
  ) {
    return _CGPathCreateWithEllipseInRect(
      rect,
      transform,
    );
  }

  late final _CGPathCreateWithEllipseInRectPtr = _lookup<
          ffi.NativeFunction<
              CGPathRef Function(CGRect, ffi.Pointer<CGAffineTransform>)>>(
      'CGPathCreateWithEllipseInRect');
  late final _CGPathCreateWithEllipseInRect = _CGPathCreateWithEllipseInRectPtr
      .asFunction<CGPathRef Function(CGRect, ffi.Pointer<CGAffineTransform>)>();

  CGPathRef CGPathCreateWithRoundedRect(
    CGRect rect,
    double cornerWidth,
    double cornerHeight,
    ffi.Pointer<CGAffineTransform> transform,
  ) {
    return _CGPathCreateWithRoundedRect(
      rect,
      cornerWidth,
      cornerHeight,
      transform,
    );
  }

  late final _CGPathCreateWithRoundedRectPtr = _lookup<
      ffi.NativeFunction<
          CGPathRef Function(CGRect, CGFloat, CGFloat,
              ffi.Pointer<CGAffineTransform>)>>('CGPathCreateWithRoundedRect');
  late final _CGPathCreateWithRoundedRect =
      _CGPathCreateWithRoundedRectPtr.asFunction<
          CGPathRef Function(
              CGRect, double, double, ffi.Pointer<CGAffineTransform>)>();

  void CGPathAddRoundedRect(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> transform,
    CGRect rect,
    double cornerWidth,
    double cornerHeight,
  ) {
    return _CGPathAddRoundedRect(
      path,
      transform,
      rect,
      cornerWidth,
      cornerHeight,
    );
  }

  late final _CGPathAddRoundedRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              CGRect, CGFloat, CGFloat)>>('CGPathAddRoundedRect');
  late final _CGPathAddRoundedRect = _CGPathAddRoundedRectPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>, CGRect,
          double, double)>();

  CGPathRef CGPathCreateCopyByDashingPath(
    CGPathRef path,
    ffi.Pointer<CGAffineTransform> transform,
    double phase,
    ffi.Pointer<CGFloat> lengths,
    int count,
  ) {
    return _CGPathCreateCopyByDashingPath(
      path,
      transform,
      phase,
      lengths,
      count,
    );
  }

  late final _CGPathCreateCopyByDashingPathPtr = _lookup<
      ffi.NativeFunction<
          CGPathRef Function(
              CGPathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              ffi.Pointer<CGFloat>,
              ffi.Size)>>('CGPathCreateCopyByDashingPath');
  late final _CGPathCreateCopyByDashingPath =
      _CGPathCreateCopyByDashingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, ffi.Pointer<CGAffineTransform>, double,
              ffi.Pointer<CGFloat>, int)>();

  CGPathRef CGPathCreateCopyByStrokingPath(
    CGPathRef path,
    ffi.Pointer<CGAffineTransform> transform,
    DartCGFloat lineWidth,
    CGLineCap lineCap,
    CGLineJoin lineJoin,
    DartCGFloat miterLimit,
  ) {
    return _CGPathCreateCopyByStrokingPath(
      path,
      transform,
      lineWidth,
      lineCap.value,
      lineJoin.value,
      miterLimit,
    );
  }

  late final _CGPathCreateCopyByStrokingPathPtr = _lookup<
      ffi.NativeFunction<
          CGPathRef Function(
              CGPathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              ffi.Int32,
              ffi.Int32,
              CGFloat)>>('CGPathCreateCopyByStrokingPath');
  late final _CGPathCreateCopyByStrokingPath =
      _CGPathCreateCopyByStrokingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, ffi.Pointer<CGAffineTransform>, double,
              int, int, double)>();

  CGPathRef CGPathRetain(
    CGPathRef path,
  ) {
    return _CGPathRetain(
      path,
    );
  }

  late final _CGPathRetainPtr =
      _lookup<ffi.NativeFunction<CGPathRef Function(CGPathRef)>>(
          'CGPathRetain');
  late final _CGPathRetain =
      _CGPathRetainPtr.asFunction<CGPathRef Function(CGPathRef)>();

  void CGPathRelease(
    CGPathRef path,
  ) {
    return _CGPathRelease(
      path,
    );
  }

  late final _CGPathReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPathRef)>>(
          'CGPathRelease');
  late final _CGPathRelease =
      _CGPathReleasePtr.asFunction<void Function(CGPathRef)>();

  bool CGPathEqualToPath(
    CGPathRef path1,
    CGPathRef path2,
  ) {
    return _CGPathEqualToPath(
      path1,
      path2,
    );
  }

  late final _CGPathEqualToPathPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPathRef, CGPathRef)>>(
          'CGPathEqualToPath');
  late final _CGPathEqualToPath =
      _CGPathEqualToPathPtr.asFunction<bool Function(CGPathRef, CGPathRef)>();

  void CGPathMoveToPoint(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    double x,
    double y,
  ) {
    return _CGPathMoveToPoint(
      path,
      m,
      x,
      y,
    );
  }

  late final _CGPathMoveToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              CGFloat, CGFloat)>>('CGPathMoveToPoint');
  late final _CGPathMoveToPoint = _CGPathMoveToPointPtr.asFunction<
      void Function(
          CGMutablePathRef, ffi.Pointer<CGAffineTransform>, double, double)>();

  void CGPathAddLineToPoint(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    double x,
    double y,
  ) {
    return _CGPathAddLineToPoint(
      path,
      m,
      x,
      y,
    );
  }

  late final _CGPathAddLineToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              CGFloat, CGFloat)>>('CGPathAddLineToPoint');
  late final _CGPathAddLineToPoint = _CGPathAddLineToPointPtr.asFunction<
      void Function(
          CGMutablePathRef, ffi.Pointer<CGAffineTransform>, double, double)>();

  void CGPathAddQuadCurveToPoint(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    double cpx,
    double cpy,
    double x,
    double y,
  ) {
    return _CGPathAddQuadCurveToPoint(
      path,
      m,
      cpx,
      cpy,
      x,
      y,
    );
  }

  late final _CGPathAddQuadCurveToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGMutablePathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat)>>('CGPathAddQuadCurveToPoint');
  late final _CGPathAddQuadCurveToPoint =
      _CGPathAddQuadCurveToPointPtr.asFunction<
          void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              double, double, double, double)>();

  void CGPathAddCurveToPoint(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    double cp1x,
    double cp1y,
    double cp2x,
    double cp2y,
    double x,
    double y,
  ) {
    return _CGPathAddCurveToPoint(
      path,
      m,
      cp1x,
      cp1y,
      cp2x,
      cp2y,
      x,
      y,
    );
  }

  late final _CGPathAddCurveToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGMutablePathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat)>>('CGPathAddCurveToPoint');
  late final _CGPathAddCurveToPoint = _CGPathAddCurveToPointPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>, double,
          double, double, double, double, double)>();

  void CGPathCloseSubpath(
    CGMutablePathRef path,
  ) {
    return _CGPathCloseSubpath(
      path,
    );
  }

  late final _CGPathCloseSubpathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGMutablePathRef)>>(
          'CGPathCloseSubpath');
  late final _CGPathCloseSubpath =
      _CGPathCloseSubpathPtr.asFunction<void Function(CGMutablePathRef)>();

  void CGPathAddRect(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    CGRect rect,
  ) {
    return _CGPathAddRect(
      path,
      m,
      rect,
    );
  }

  late final _CGPathAddRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              CGRect)>>('CGPathAddRect');
  late final _CGPathAddRect = _CGPathAddRectPtr.asFunction<
      void Function(
          CGMutablePathRef, ffi.Pointer<CGAffineTransform>, CGRect)>();

  void CGPathAddRects(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    ffi.Pointer<CGRect> rects,
    int count,
  ) {
    return _CGPathAddRects(
      path,
      m,
      rects,
      count,
    );
  }

  late final _CGPathAddRectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              ffi.Pointer<CGRect>, ffi.Size)>>('CGPathAddRects');
  late final _CGPathAddRects = _CGPathAddRectsPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
          ffi.Pointer<CGRect>, int)>();

  void CGPathAddLines(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    ffi.Pointer<CGPoint> points,
    int count,
  ) {
    return _CGPathAddLines(
      path,
      m,
      points,
      count,
    );
  }

  late final _CGPathAddLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              ffi.Pointer<CGPoint>, ffi.Size)>>('CGPathAddLines');
  late final _CGPathAddLines = _CGPathAddLinesPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
          ffi.Pointer<CGPoint>, int)>();

  void CGPathAddEllipseInRect(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    CGRect rect,
  ) {
    return _CGPathAddEllipseInRect(
      path,
      m,
      rect,
    );
  }

  late final _CGPathAddEllipseInRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              CGRect)>>('CGPathAddEllipseInRect');
  late final _CGPathAddEllipseInRect = _CGPathAddEllipseInRectPtr.asFunction<
      void Function(
          CGMutablePathRef, ffi.Pointer<CGAffineTransform>, CGRect)>();

  void CGPathAddRelativeArc(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> matrix,
    double x,
    double y,
    double radius,
    double startAngle,
    double delta,
  ) {
    return _CGPathAddRelativeArc(
      path,
      matrix,
      x,
      y,
      radius,
      startAngle,
      delta,
    );
  }

  late final _CGPathAddRelativeArcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGMutablePathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat)>>('CGPathAddRelativeArc');
  late final _CGPathAddRelativeArc = _CGPathAddRelativeArcPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>, double,
          double, double, double, double)>();

  void CGPathAddArc(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    double x,
    double y,
    double radius,
    double startAngle,
    double endAngle,
    bool clockwise,
  ) {
    return _CGPathAddArc(
      path,
      m,
      x,
      y,
      radius,
      startAngle,
      endAngle,
      clockwise,
    );
  }

  late final _CGPathAddArcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGMutablePathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat,
              ffi.Bool)>>('CGPathAddArc');
  late final _CGPathAddArc = _CGPathAddArcPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>, double,
          double, double, double, double, bool)>();

  void CGPathAddArcToPoint(
    CGMutablePathRef path,
    ffi.Pointer<CGAffineTransform> m,
    double x1,
    double y1,
    double x2,
    double y2,
    double radius,
  ) {
    return _CGPathAddArcToPoint(
      path,
      m,
      x1,
      y1,
      x2,
      y2,
      radius,
    );
  }

  late final _CGPathAddArcToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGMutablePathRef,
              ffi.Pointer<CGAffineTransform>,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat,
              CGFloat)>>('CGPathAddArcToPoint');
  late final _CGPathAddArcToPoint = _CGPathAddArcToPointPtr.asFunction<
      void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>, double,
          double, double, double, double)>();

  void CGPathAddPath(
    CGMutablePathRef path1,
    ffi.Pointer<CGAffineTransform> m,
    CGPathRef path2,
  ) {
    return _CGPathAddPath(
      path1,
      m,
      path2,
    );
  }

  late final _CGPathAddPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGMutablePathRef, ffi.Pointer<CGAffineTransform>,
              CGPathRef)>>('CGPathAddPath');
  late final _CGPathAddPath = _CGPathAddPathPtr.asFunction<
      void Function(
          CGMutablePathRef, ffi.Pointer<CGAffineTransform>, CGPathRef)>();

  bool CGPathIsEmpty(
    CGPathRef path,
  ) {
    return _CGPathIsEmpty(
      path,
    );
  }

  late final _CGPathIsEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPathRef)>>(
          'CGPathIsEmpty');
  late final _CGPathIsEmpty =
      _CGPathIsEmptyPtr.asFunction<bool Function(CGPathRef)>();

  bool CGPathIsRect(
    CGPathRef path,
    ffi.Pointer<CGRect> rect,
  ) {
    return _CGPathIsRect(
      path,
      rect,
    );
  }

  late final _CGPathIsRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPathRef, ffi.Pointer<CGRect>)>>('CGPathIsRect');
  late final _CGPathIsRect = _CGPathIsRectPtr.asFunction<
      bool Function(CGPathRef, ffi.Pointer<CGRect>)>();

  CGPoint CGPathGetCurrentPoint(
    CGPathRef path,
  ) {
    return _CGPathGetCurrentPoint(
      path,
    );
  }

  late final _CGPathGetCurrentPointPtr =
      _lookup<ffi.NativeFunction<CGPoint Function(CGPathRef)>>(
          'CGPathGetCurrentPoint');
  late final _CGPathGetCurrentPoint =
      _CGPathGetCurrentPointPtr.asFunction<CGPoint Function(CGPathRef)>();

  CGRect CGPathGetBoundingBox(
    CGPathRef path,
  ) {
    return _CGPathGetBoundingBox(
      path,
    );
  }

  late final _CGPathGetBoundingBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPathRef)>>(
          'CGPathGetBoundingBox');
  late final _CGPathGetBoundingBox =
      _CGPathGetBoundingBoxPtr.asFunction<CGRect Function(CGPathRef)>();

  CGRect CGPathGetPathBoundingBox(
    CGPathRef path,
  ) {
    return _CGPathGetPathBoundingBox(
      path,
    );
  }

  late final _CGPathGetPathBoundingBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPathRef)>>(
          'CGPathGetPathBoundingBox');
  late final _CGPathGetPathBoundingBox =
      _CGPathGetPathBoundingBoxPtr.asFunction<CGRect Function(CGPathRef)>();

  bool CGPathContainsPoint(
    CGPathRef path,
    ffi.Pointer<CGAffineTransform> m,
    CGPoint point,
    bool eoFill,
  ) {
    return _CGPathContainsPoint(
      path,
      m,
      point,
      eoFill,
    );
  }

  late final _CGPathContainsPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPathRef, ffi.Pointer<CGAffineTransform>, CGPoint,
              ffi.Bool)>>('CGPathContainsPoint');
  late final _CGPathContainsPoint = _CGPathContainsPointPtr.asFunction<
      bool Function(
          CGPathRef, ffi.Pointer<CGAffineTransform>, CGPoint, bool)>();

  void CGPathApply(
    CGPathRef path,
    ffi.Pointer<ffi.Void> info,
    CGPathApplierFunction function,
  ) {
    return _CGPathApply(
      path,
      info,
      function,
    );
  }

  late final _CGPathApplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGPathRef, ffi.Pointer<ffi.Void>,
              CGPathApplierFunction)>>('CGPathApply');
  late final _CGPathApply = _CGPathApplyPtr.asFunction<
      void Function(CGPathRef, ffi.Pointer<ffi.Void>, CGPathApplierFunction)>();

  void CGPathApplyWithBlock(
    CGPathRef path,
    DartCGPathApplyBlock block,
  ) {
    return _CGPathApplyWithBlock(
      path,
      block.ref.pointer,
    );
  }

  late final _CGPathApplyWithBlockPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGPathRef, CGPathApplyBlock)>>(
      'CGPathApplyWithBlock');
  late final _CGPathApplyWithBlock = _CGPathApplyWithBlockPtr.asFunction<
      void Function(CGPathRef, CGPathApplyBlock)>();

  CGPathRef CGPathCreateCopyByNormalizing(
    CGPathRef path,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyByNormalizing(
      path,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyByNormalizingPtr =
      _lookup<ffi.NativeFunction<CGPathRef Function(CGPathRef, ffi.Bool)>>(
          'CGPathCreateCopyByNormalizing');
  late final _CGPathCreateCopyByNormalizing = _CGPathCreateCopyByNormalizingPtr
      .asFunction<CGPathRef Function(CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyByUnioningPath(
    CGPathRef path,
    CGPathRef maskPath,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyByUnioningPath(
      path,
      maskPath,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyByUnioningPathPtr = _lookup<
          ffi
          .NativeFunction<CGPathRef Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathCreateCopyByUnioningPath');
  late final _CGPathCreateCopyByUnioningPath =
      _CGPathCreateCopyByUnioningPathPtr.asFunction<
          CGPathRef Function(CGPathRef, CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyByIntersectingPath(
    CGPathRef path,
    CGPathRef maskPath,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyByIntersectingPath(
      path,
      maskPath,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyByIntersectingPathPtr = _lookup<
          ffi
          .NativeFunction<CGPathRef Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathCreateCopyByIntersectingPath');
  late final _CGPathCreateCopyByIntersectingPath =
      _CGPathCreateCopyByIntersectingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyBySubtractingPath(
    CGPathRef path,
    CGPathRef maskPath,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyBySubtractingPath(
      path,
      maskPath,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyBySubtractingPathPtr = _lookup<
          ffi
          .NativeFunction<CGPathRef Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathCreateCopyBySubtractingPath');
  late final _CGPathCreateCopyBySubtractingPath =
      _CGPathCreateCopyBySubtractingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyBySymmetricDifferenceOfPath(
    CGPathRef path,
    CGPathRef maskPath,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyBySymmetricDifferenceOfPath(
      path,
      maskPath,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyBySymmetricDifferenceOfPathPtr = _lookup<
          ffi
          .NativeFunction<CGPathRef Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathCreateCopyBySymmetricDifferenceOfPath');
  late final _CGPathCreateCopyBySymmetricDifferenceOfPath =
      _CGPathCreateCopyBySymmetricDifferenceOfPathPtr.asFunction<
          CGPathRef Function(CGPathRef, CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyOfLineBySubtractingPath(
    CGPathRef path,
    CGPathRef maskPath,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyOfLineBySubtractingPath(
      path,
      maskPath,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyOfLineBySubtractingPathPtr = _lookup<
          ffi
          .NativeFunction<CGPathRef Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathCreateCopyOfLineBySubtractingPath');
  late final _CGPathCreateCopyOfLineBySubtractingPath =
      _CGPathCreateCopyOfLineBySubtractingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyOfLineByIntersectingPath(
    CGPathRef path,
    CGPathRef maskPath,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateCopyOfLineByIntersectingPath(
      path,
      maskPath,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateCopyOfLineByIntersectingPathPtr = _lookup<
          ffi
          .NativeFunction<CGPathRef Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathCreateCopyOfLineByIntersectingPath');
  late final _CGPathCreateCopyOfLineByIntersectingPath =
      _CGPathCreateCopyOfLineByIntersectingPathPtr.asFunction<
          CGPathRef Function(CGPathRef, CGPathRef, bool)>();

  CFArrayRef CGPathCreateSeparateComponents(
    CGPathRef path,
    bool evenOddFillRule,
  ) {
    return _CGPathCreateSeparateComponents(
      path,
      evenOddFillRule,
    );
  }

  late final _CGPathCreateSeparateComponentsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CGPathRef, ffi.Bool)>>(
          'CGPathCreateSeparateComponents');
  late final _CGPathCreateSeparateComponents =
      _CGPathCreateSeparateComponentsPtr.asFunction<
          CFArrayRef Function(CGPathRef, bool)>();

  CGPathRef CGPathCreateCopyByFlattening(
    CGPathRef path,
    double flatteningThreshold,
  ) {
    return _CGPathCreateCopyByFlattening(
      path,
      flatteningThreshold,
    );
  }

  late final _CGPathCreateCopyByFlatteningPtr =
      _lookup<ffi.NativeFunction<CGPathRef Function(CGPathRef, CGFloat)>>(
          'CGPathCreateCopyByFlattening');
  late final _CGPathCreateCopyByFlattening = _CGPathCreateCopyByFlatteningPtr
      .asFunction<CGPathRef Function(CGPathRef, double)>();

  bool CGPathIntersectsPath(
    CGPathRef path1,
    CGPathRef path2,
    bool evenOddFillRule,
  ) {
    return _CGPathIntersectsPath(
      path1,
      path2,
      evenOddFillRule,
    );
  }

  late final _CGPathIntersectsPathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(CGPathRef, CGPathRef, ffi.Bool)>>(
      'CGPathIntersectsPath');
  late final _CGPathIntersectsPath = _CGPathIntersectsPathPtr.asFunction<
      bool Function(CGPathRef, CGPathRef, bool)>();

  CGPDFObjectType CGPDFObjectGetType(
    CGPDFObjectRef object,
  ) {
    return CGPDFObjectType.fromValue(_CGPDFObjectGetType(
      object,
    ));
  }

  late final _CGPDFObjectGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CGPDFObjectRef)>>(
          'CGPDFObjectGetType');
  late final _CGPDFObjectGetType =
      _CGPDFObjectGetTypePtr.asFunction<int Function(CGPDFObjectRef)>();

  bool CGPDFObjectGetValue(
    CGPDFObjectRef object,
    CGPDFObjectType type,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CGPDFObjectGetValue(
      object,
      type.value,
      value,
    );
  }

  late final _CGPDFObjectGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFObjectRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CGPDFObjectGetValue');
  late final _CGPDFObjectGetValue = _CGPDFObjectGetValuePtr.asFunction<
      bool Function(CGPDFObjectRef, int, ffi.Pointer<ffi.Void>)>();

  CGPDFDictionaryRef CGPDFStreamGetDictionary(
    CGPDFStreamRef stream,
  ) {
    return _CGPDFStreamGetDictionary(
      stream,
    );
  }

  late final _CGPDFStreamGetDictionaryPtr =
      _lookup<ffi.NativeFunction<CGPDFDictionaryRef Function(CGPDFStreamRef)>>(
          'CGPDFStreamGetDictionary');
  late final _CGPDFStreamGetDictionary = _CGPDFStreamGetDictionaryPtr
      .asFunction<CGPDFDictionaryRef Function(CGPDFStreamRef)>();

  CFDataRef CGPDFStreamCopyData(
    CGPDFStreamRef stream,
    ffi.Pointer<ffi.Int32> format,
  ) {
    return _CGPDFStreamCopyData(
      stream,
      format,
    );
  }

  late final _CGPDFStreamCopyDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CGPDFStreamRef, ffi.Pointer<ffi.Int32>)>>('CGPDFStreamCopyData');
  late final _CGPDFStreamCopyData = _CGPDFStreamCopyDataPtr.asFunction<
      CFDataRef Function(CGPDFStreamRef, ffi.Pointer<ffi.Int32>)>();

  double CFAbsoluteTimeGetCurrent() {
    return _CFAbsoluteTimeGetCurrent();
  }

  late final _CFAbsoluteTimeGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent =
      _CFAbsoluteTimeGetCurrentPtr.asFunction<double Function()>();

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1970 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1970');

  DartCFTimeInterval get kCFAbsoluteTimeIntervalSince1970 =>
      _kCFAbsoluteTimeIntervalSince1970.value;

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1904 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1904');

  DartCFTimeInterval get kCFAbsoluteTimeIntervalSince1904 =>
      _kCFAbsoluteTimeIntervalSince1904.value;

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate =
      _CFDateCreatePtr.asFunction<CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  CFComparisonResult CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return CFComparisonResult.fromValue(_CFDateCompare(
      theDate,
      otherDate,
      context,
    ));
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid = _CFGregorianDateIsValidPtr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime =
      _CFGregorianDateGetAbsoluteTimePtr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDatePtr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate =
      _CFAbsoluteTimeGetGregorianDatePtr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits =
      _CFAbsoluteTimeAddGregorianUnitsPtr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeekPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek = _CFAbsoluteTimeGetDayOfWeekPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear = _CFAbsoluteTimeGetDayOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear = _CFAbsoluteTimeGetWeekOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CGPDFStringGetLength(
    CGPDFStringRef string,
  ) {
    return _CGPDFStringGetLength(
      string,
    );
  }

  late final _CGPDFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGPDFStringRef)>>(
          'CGPDFStringGetLength');
  late final _CGPDFStringGetLength =
      _CGPDFStringGetLengthPtr.asFunction<int Function(CGPDFStringRef)>();

  ffi.Pointer<ffi.UnsignedChar> CGPDFStringGetBytePtr(
    CGPDFStringRef string,
  ) {
    return _CGPDFStringGetBytePtr(
      string,
    );
  }

  late final _CGPDFStringGetBytePtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              CGPDFStringRef)>>('CGPDFStringGetBytePtr');
  late final _CGPDFStringGetBytePtr = _CGPDFStringGetBytePtrPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(CGPDFStringRef)>();

  CFStringRef CGPDFStringCopyTextString(
    CGPDFStringRef string,
  ) {
    return _CGPDFStringCopyTextString(
      string,
    );
  }

  late final _CGPDFStringCopyTextStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CGPDFStringRef)>>(
          'CGPDFStringCopyTextString');
  late final _CGPDFStringCopyTextString = _CGPDFStringCopyTextStringPtr
      .asFunction<CFStringRef Function(CGPDFStringRef)>();

  CFDateRef CGPDFStringCopyDate(
    CGPDFStringRef string,
  ) {
    return _CGPDFStringCopyDate(
      string,
    );
  }

  late final _CGPDFStringCopyDatePtr =
      _lookup<ffi.NativeFunction<CFDateRef Function(CGPDFStringRef)>>(
          'CGPDFStringCopyDate');
  late final _CGPDFStringCopyDate =
      _CGPDFStringCopyDatePtr.asFunction<CFDateRef Function(CGPDFStringRef)>();

  int CGPDFArrayGetCount(
    CGPDFArrayRef array,
  ) {
    return _CGPDFArrayGetCount(
      array,
    );
  }

  late final _CGPDFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGPDFArrayRef)>>(
          'CGPDFArrayGetCount');
  late final _CGPDFArrayGetCount =
      _CGPDFArrayGetCountPtr.asFunction<int Function(CGPDFArrayRef)>();

  bool CGPDFArrayGetObject(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFObjectRef> value,
  ) {
    return _CGPDFArrayGetObject(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFObjectRef>)>>('CGPDFArrayGetObject');
  late final _CGPDFArrayGetObject = _CGPDFArrayGetObjectPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFObjectRef>)>();

  bool CGPDFArrayGetNull(
    CGPDFArrayRef array,
    int index,
  ) {
    return _CGPDFArrayGetNull(
      array,
      index,
    );
  }

  late final _CGPDFArrayGetNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPDFArrayRef, ffi.Size)>>(
          'CGPDFArrayGetNull');
  late final _CGPDFArrayGetNull =
      _CGPDFArrayGetNullPtr.asFunction<bool Function(CGPDFArrayRef, int)>();

  bool CGPDFArrayGetBoolean(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFBoolean> value,
  ) {
    return _CGPDFArrayGetBoolean(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFBoolean>)>>('CGPDFArrayGetBoolean');
  late final _CGPDFArrayGetBoolean = _CGPDFArrayGetBooleanPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFBoolean>)>();

  bool CGPDFArrayGetInteger(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFInteger> value,
  ) {
    return _CGPDFArrayGetInteger(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetIntegerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFInteger>)>>('CGPDFArrayGetInteger');
  late final _CGPDFArrayGetInteger = _CGPDFArrayGetIntegerPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFInteger>)>();

  bool CGPDFArrayGetNumber(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFReal> value,
  ) {
    return _CGPDFArrayGetNumber(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFReal>)>>('CGPDFArrayGetNumber');
  late final _CGPDFArrayGetNumber = _CGPDFArrayGetNumberPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFReal>)>();

  bool CGPDFArrayGetName(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _CGPDFArrayGetName(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('CGPDFArrayGetName');
  late final _CGPDFArrayGetName = _CGPDFArrayGetNamePtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  bool CGPDFArrayGetString(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFStringRef> value,
  ) {
    return _CGPDFArrayGetString(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFStringRef>)>>('CGPDFArrayGetString');
  late final _CGPDFArrayGetString = _CGPDFArrayGetStringPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFStringRef>)>();

  bool CGPDFArrayGetArray(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFArrayRef> value,
  ) {
    return _CGPDFArrayGetArray(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFArrayRef>)>>('CGPDFArrayGetArray');
  late final _CGPDFArrayGetArray = _CGPDFArrayGetArrayPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFArrayRef>)>();

  bool CGPDFArrayGetDictionary(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFDictionaryRef> value,
  ) {
    return _CGPDFArrayGetDictionary(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetDictionaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFDictionaryRef>)>>('CGPDFArrayGetDictionary');
  late final _CGPDFArrayGetDictionary = _CGPDFArrayGetDictionaryPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFDictionaryRef>)>();

  bool CGPDFArrayGetStream(
    CGPDFArrayRef array,
    int index,
    ffi.Pointer<CGPDFStreamRef> value,
  ) {
    return _CGPDFArrayGetStream(
      array,
      index,
      value,
    );
  }

  late final _CGPDFArrayGetStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFArrayRef, ffi.Size,
              ffi.Pointer<CGPDFStreamRef>)>>('CGPDFArrayGetStream');
  late final _CGPDFArrayGetStream = _CGPDFArrayGetStreamPtr.asFunction<
      bool Function(CGPDFArrayRef, int, ffi.Pointer<CGPDFStreamRef>)>();

  void CGPDFArrayApplyBlock(
    CGPDFArrayRef array,
    DartCGPDFArrayApplierBlock? block,
    ffi.Pointer<ffi.Void> info,
  ) {
    return _CGPDFArrayApplyBlock(
      array,
      block?.ref.pointer ?? ffi.nullptr,
      info,
    );
  }

  late final _CGPDFArrayApplyBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGPDFArrayRef, CGPDFArrayApplierBlock,
              ffi.Pointer<ffi.Void>)>>('CGPDFArrayApplyBlock');
  late final _CGPDFArrayApplyBlock = _CGPDFArrayApplyBlockPtr.asFunction<
      void Function(
          CGPDFArrayRef, CGPDFArrayApplierBlock, ffi.Pointer<ffi.Void>)>();

  int CGPDFDictionaryGetCount(
    CGPDFDictionaryRef dict,
  ) {
    return _CGPDFDictionaryGetCount(
      dict,
    );
  }

  late final _CGPDFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGPDFDictionaryRef)>>(
          'CGPDFDictionaryGetCount');
  late final _CGPDFDictionaryGetCount = _CGPDFDictionaryGetCountPtr.asFunction<
      int Function(CGPDFDictionaryRef)>();

  bool CGPDFDictionaryGetObject(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFObjectRef> value,
  ) {
    return _CGPDFDictionaryGetObject(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFObjectRef>)>>('CGPDFDictionaryGetObject');
  late final _CGPDFDictionaryGetObject =
      _CGPDFDictionaryGetObjectPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFObjectRef>)>();

  bool CGPDFDictionaryGetBoolean(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFBoolean> value,
  ) {
    return _CGPDFDictionaryGetBoolean(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFBoolean>)>>('CGPDFDictionaryGetBoolean');
  late final _CGPDFDictionaryGetBoolean =
      _CGPDFDictionaryGetBooleanPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFBoolean>)>();

  bool CGPDFDictionaryGetInteger(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFInteger> value,
  ) {
    return _CGPDFDictionaryGetInteger(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetIntegerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFInteger>)>>('CGPDFDictionaryGetInteger');
  late final _CGPDFDictionaryGetInteger =
      _CGPDFDictionaryGetIntegerPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFInteger>)>();

  bool CGPDFDictionaryGetNumber(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFReal> value,
  ) {
    return _CGPDFDictionaryGetNumber(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFReal>)>>('CGPDFDictionaryGetNumber');
  late final _CGPDFDictionaryGetNumber =
      _CGPDFDictionaryGetNumberPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFReal>)>();

  bool CGPDFDictionaryGetName(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _CGPDFDictionaryGetName(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('CGPDFDictionaryGetName');
  late final _CGPDFDictionaryGetName = _CGPDFDictionaryGetNamePtr.asFunction<
      bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  bool CGPDFDictionaryGetString(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFStringRef> value,
  ) {
    return _CGPDFDictionaryGetString(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFStringRef>)>>('CGPDFDictionaryGetString');
  late final _CGPDFDictionaryGetString =
      _CGPDFDictionaryGetStringPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFStringRef>)>();

  bool CGPDFDictionaryGetArray(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFArrayRef> value,
  ) {
    return _CGPDFDictionaryGetArray(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFArrayRef>)>>('CGPDFDictionaryGetArray');
  late final _CGPDFDictionaryGetArray = _CGPDFDictionaryGetArrayPtr.asFunction<
      bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CGPDFArrayRef>)>();

  bool CGPDFDictionaryGetDictionary(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFDictionaryRef> value,
  ) {
    return _CGPDFDictionaryGetDictionary(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetDictionaryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<CGPDFDictionaryRef>)>>(
      'CGPDFDictionaryGetDictionary');
  late final _CGPDFDictionaryGetDictionary =
      _CGPDFDictionaryGetDictionaryPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFDictionaryRef>)>();

  bool CGPDFDictionaryGetStream(
    CGPDFDictionaryRef dict,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<CGPDFStreamRef> value,
  ) {
    return _CGPDFDictionaryGetStream(
      dict,
      key,
      value,
    );
  }

  late final _CGPDFDictionaryGetStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFStreamRef>)>>('CGPDFDictionaryGetStream');
  late final _CGPDFDictionaryGetStream =
      _CGPDFDictionaryGetStreamPtr.asFunction<
          bool Function(CGPDFDictionaryRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<CGPDFStreamRef>)>();

  void CGPDFDictionaryApplyFunction(
    CGPDFDictionaryRef dict,
    CGPDFDictionaryApplierFunction function,
    ffi.Pointer<ffi.Void> info,
  ) {
    return _CGPDFDictionaryApplyFunction(
      dict,
      function,
      info,
    );
  }

  late final _CGPDFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGPDFDictionaryRef, CGPDFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CGPDFDictionaryApplyFunction');
  late final _CGPDFDictionaryApplyFunction =
      _CGPDFDictionaryApplyFunctionPtr.asFunction<
          void Function(CGPDFDictionaryRef, CGPDFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CGPDFDictionaryApplyBlock(
    CGPDFDictionaryRef dict,
    DartCGPDFDictionaryApplierBlock? block,
    ffi.Pointer<ffi.Void> info,
  ) {
    return _CGPDFDictionaryApplyBlock(
      dict,
      block?.ref.pointer ?? ffi.nullptr,
      info,
    );
  }

  late final _CGPDFDictionaryApplyBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGPDFDictionaryRef, CGPDFDictionaryApplierBlock,
              ffi.Pointer<ffi.Void>)>>('CGPDFDictionaryApplyBlock');
  late final _CGPDFDictionaryApplyBlock =
      _CGPDFDictionaryApplyBlockPtr.asFunction<
          void Function(CGPDFDictionaryRef, CGPDFDictionaryApplierBlock,
              ffi.Pointer<ffi.Void>)>();

  CGPDFPageRef CGPDFPageRetain(
    CGPDFPageRef page,
  ) {
    return _CGPDFPageRetain(
      page,
    );
  }

  late final _CGPDFPageRetainPtr =
      _lookup<ffi.NativeFunction<CGPDFPageRef Function(CGPDFPageRef)>>(
          'CGPDFPageRetain');
  late final _CGPDFPageRetain =
      _CGPDFPageRetainPtr.asFunction<CGPDFPageRef Function(CGPDFPageRef)>();

  void CGPDFPageRelease(
    CGPDFPageRef page,
  ) {
    return _CGPDFPageRelease(
      page,
    );
  }

  late final _CGPDFPageReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPDFPageRef)>>(
          'CGPDFPageRelease');
  late final _CGPDFPageRelease =
      _CGPDFPageReleasePtr.asFunction<void Function(CGPDFPageRef)>();

  CGPDFDocumentRef CGPDFPageGetDocument(
    CGPDFPageRef page,
  ) {
    return _CGPDFPageGetDocument(
      page,
    );
  }

  late final _CGPDFPageGetDocumentPtr =
      _lookup<ffi.NativeFunction<CGPDFDocumentRef Function(CGPDFPageRef)>>(
          'CGPDFPageGetDocument');
  late final _CGPDFPageGetDocument = _CGPDFPageGetDocumentPtr.asFunction<
      CGPDFDocumentRef Function(CGPDFPageRef)>();

  int CGPDFPageGetPageNumber(
    CGPDFPageRef page,
  ) {
    return _CGPDFPageGetPageNumber(
      page,
    );
  }

  late final _CGPDFPageGetPageNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGPDFPageRef)>>(
          'CGPDFPageGetPageNumber');
  late final _CGPDFPageGetPageNumber =
      _CGPDFPageGetPageNumberPtr.asFunction<int Function(CGPDFPageRef)>();

  CGRect CGPDFPageGetBoxRect(
    CGPDFPageRef page,
    CGPDFBox box,
  ) {
    return _CGPDFPageGetBoxRect(
      page,
      box.value,
    );
  }

  late final _CGPDFPageGetBoxRectPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPDFPageRef, ffi.Int32)>>(
          'CGPDFPageGetBoxRect');
  late final _CGPDFPageGetBoxRect =
      _CGPDFPageGetBoxRectPtr.asFunction<CGRect Function(CGPDFPageRef, int)>();

  int CGPDFPageGetRotationAngle(
    CGPDFPageRef page,
  ) {
    return _CGPDFPageGetRotationAngle(
      page,
    );
  }

  late final _CGPDFPageGetRotationAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGPDFPageRef)>>(
          'CGPDFPageGetRotationAngle');
  late final _CGPDFPageGetRotationAngle =
      _CGPDFPageGetRotationAnglePtr.asFunction<int Function(CGPDFPageRef)>();

  CGAffineTransform CGPDFPageGetDrawingTransform(
    CGPDFPageRef page,
    CGPDFBox box,
    CGRect rect,
    int rotate,
    bool preserveAspectRatio,
  ) {
    return _CGPDFPageGetDrawingTransform(
      page,
      box.value,
      rect,
      rotate,
      preserveAspectRatio,
    );
  }

  late final _CGPDFPageGetDrawingTransformPtr = _lookup<
      ffi.NativeFunction<
          CGAffineTransform Function(CGPDFPageRef, ffi.Int32, CGRect, ffi.Int,
              ffi.Bool)>>('CGPDFPageGetDrawingTransform');
  late final _CGPDFPageGetDrawingTransform =
      _CGPDFPageGetDrawingTransformPtr.asFunction<
          CGAffineTransform Function(CGPDFPageRef, int, CGRect, int, bool)>();

  CGPDFDictionaryRef CGPDFPageGetDictionary(
    CGPDFPageRef page,
  ) {
    return _CGPDFPageGetDictionary(
      page,
    );
  }

  late final _CGPDFPageGetDictionaryPtr =
      _lookup<ffi.NativeFunction<CGPDFDictionaryRef Function(CGPDFPageRef)>>(
          'CGPDFPageGetDictionary');
  late final _CGPDFPageGetDictionary = _CGPDFPageGetDictionaryPtr.asFunction<
      CGPDFDictionaryRef Function(CGPDFPageRef)>();

  int CGPDFPageGetTypeID() {
    return _CGPDFPageGetTypeID();
  }

  late final _CGPDFPageGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGPDFPageGetTypeID');
  late final _CGPDFPageGetTypeID =
      _CGPDFPageGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCGPDFOutlineTitle =
      _lookup<CFStringRef>('kCGPDFOutlineTitle');

  CFStringRef get kCGPDFOutlineTitle => _kCGPDFOutlineTitle.value;

  set kCGPDFOutlineTitle(CFStringRef value) =>
      _kCGPDFOutlineTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFOutlineChildren =
      _lookup<CFStringRef>('kCGPDFOutlineChildren');

  CFStringRef get kCGPDFOutlineChildren => _kCGPDFOutlineChildren.value;

  set kCGPDFOutlineChildren(CFStringRef value) =>
      _kCGPDFOutlineChildren.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFOutlineDestination =
      _lookup<CFStringRef>('kCGPDFOutlineDestination');

  CFStringRef get kCGPDFOutlineDestination => _kCGPDFOutlineDestination.value;

  set kCGPDFOutlineDestination(CFStringRef value) =>
      _kCGPDFOutlineDestination.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFOutlineDestinationRect =
      _lookup<CFStringRef>('kCGPDFOutlineDestinationRect');

  CFStringRef get kCGPDFOutlineDestinationRect =>
      _kCGPDFOutlineDestinationRect.value;

  set kCGPDFOutlineDestinationRect(CFStringRef value) =>
      _kCGPDFOutlineDestinationRect.value = value;

  CGPDFDocumentRef CGPDFDocumentCreateWithProvider(
    CGDataProviderRef provider,
  ) {
    return _CGPDFDocumentCreateWithProvider(
      provider,
    );
  }

  late final _CGPDFDocumentCreateWithProviderPtr =
      _lookup<ffi.NativeFunction<CGPDFDocumentRef Function(CGDataProviderRef)>>(
          'CGPDFDocumentCreateWithProvider');
  late final _CGPDFDocumentCreateWithProvider =
      _CGPDFDocumentCreateWithProviderPtr.asFunction<
          CGPDFDocumentRef Function(CGDataProviderRef)>();

  CGPDFDocumentRef CGPDFDocumentCreateWithURL(
    CFURLRef url,
  ) {
    return _CGPDFDocumentCreateWithURL(
      url,
    );
  }

  late final _CGPDFDocumentCreateWithURLPtr =
      _lookup<ffi.NativeFunction<CGPDFDocumentRef Function(CFURLRef)>>(
          'CGPDFDocumentCreateWithURL');
  late final _CGPDFDocumentCreateWithURL = _CGPDFDocumentCreateWithURLPtr
      .asFunction<CGPDFDocumentRef Function(CFURLRef)>();

  CGPDFDocumentRef CGPDFDocumentRetain(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentRetain(
      document,
    );
  }

  late final _CGPDFDocumentRetainPtr =
      _lookup<ffi.NativeFunction<CGPDFDocumentRef Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentRetain');
  late final _CGPDFDocumentRetain = _CGPDFDocumentRetainPtr.asFunction<
      CGPDFDocumentRef Function(CGPDFDocumentRef)>();

  void CGPDFDocumentRelease(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentRelease(
      document,
    );
  }

  late final _CGPDFDocumentReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentRelease');
  late final _CGPDFDocumentRelease =
      _CGPDFDocumentReleasePtr.asFunction<void Function(CGPDFDocumentRef)>();

  void CGPDFDocumentGetVersion(
    CGPDFDocumentRef document,
    ffi.Pointer<ffi.Int> majorVersion,
    ffi.Pointer<ffi.Int> minorVersion,
  ) {
    return _CGPDFDocumentGetVersion(
      document,
      majorVersion,
      minorVersion,
    );
  }

  late final _CGPDFDocumentGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGPDFDocumentRef, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('CGPDFDocumentGetVersion');
  late final _CGPDFDocumentGetVersion = _CGPDFDocumentGetVersionPtr.asFunction<
      void Function(
          CGPDFDocumentRef, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  bool CGPDFDocumentIsEncrypted(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentIsEncrypted(
      document,
    );
  }

  late final _CGPDFDocumentIsEncryptedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentIsEncrypted');
  late final _CGPDFDocumentIsEncrypted = _CGPDFDocumentIsEncryptedPtr
      .asFunction<bool Function(CGPDFDocumentRef)>();

  bool CGPDFDocumentUnlockWithPassword(
    CGPDFDocumentRef document,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _CGPDFDocumentUnlockWithPassword(
      document,
      password,
    );
  }

  late final _CGPDFDocumentUnlockWithPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFDocumentRef,
              ffi.Pointer<ffi.Char>)>>('CGPDFDocumentUnlockWithPassword');
  late final _CGPDFDocumentUnlockWithPassword =
      _CGPDFDocumentUnlockWithPasswordPtr.asFunction<
          bool Function(CGPDFDocumentRef, ffi.Pointer<ffi.Char>)>();

  bool CGPDFDocumentIsUnlocked(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentIsUnlocked(
      document,
    );
  }

  late final _CGPDFDocumentIsUnlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentIsUnlocked');
  late final _CGPDFDocumentIsUnlocked =
      _CGPDFDocumentIsUnlockedPtr.asFunction<bool Function(CGPDFDocumentRef)>();

  bool CGPDFDocumentAllowsPrinting(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentAllowsPrinting(
      document,
    );
  }

  late final _CGPDFDocumentAllowsPrintingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentAllowsPrinting');
  late final _CGPDFDocumentAllowsPrinting = _CGPDFDocumentAllowsPrintingPtr
      .asFunction<bool Function(CGPDFDocumentRef)>();

  bool CGPDFDocumentAllowsCopying(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentAllowsCopying(
      document,
    );
  }

  late final _CGPDFDocumentAllowsCopyingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentAllowsCopying');
  late final _CGPDFDocumentAllowsCopying = _CGPDFDocumentAllowsCopyingPtr
      .asFunction<bool Function(CGPDFDocumentRef)>();

  int CGPDFDocumentGetNumberOfPages(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentGetNumberOfPages(
      document,
    );
  }

  late final _CGPDFDocumentGetNumberOfPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentGetNumberOfPages');
  late final _CGPDFDocumentGetNumberOfPages = _CGPDFDocumentGetNumberOfPagesPtr
      .asFunction<int Function(CGPDFDocumentRef)>();

  CGPDFPageRef CGPDFDocumentGetPage(
    CGPDFDocumentRef document,
    int pageNumber,
  ) {
    return _CGPDFDocumentGetPage(
      document,
      pageNumber,
    );
  }

  late final _CGPDFDocumentGetPagePtr = _lookup<
          ffi
          .NativeFunction<CGPDFPageRef Function(CGPDFDocumentRef, ffi.Size)>>(
      'CGPDFDocumentGetPage');
  late final _CGPDFDocumentGetPage = _CGPDFDocumentGetPagePtr.asFunction<
      CGPDFPageRef Function(CGPDFDocumentRef, int)>();

  CGPDFDictionaryRef CGPDFDocumentGetCatalog(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentGetCatalog(
      document,
    );
  }

  late final _CGPDFDocumentGetCatalogPtr = _lookup<
          ffi.NativeFunction<CGPDFDictionaryRef Function(CGPDFDocumentRef)>>(
      'CGPDFDocumentGetCatalog');
  late final _CGPDFDocumentGetCatalog = _CGPDFDocumentGetCatalogPtr.asFunction<
      CGPDFDictionaryRef Function(CGPDFDocumentRef)>();

  CGPDFDictionaryRef CGPDFDocumentGetInfo(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentGetInfo(
      document,
    );
  }

  late final _CGPDFDocumentGetInfoPtr = _lookup<
          ffi.NativeFunction<CGPDFDictionaryRef Function(CGPDFDocumentRef)>>(
      'CGPDFDocumentGetInfo');
  late final _CGPDFDocumentGetInfo = _CGPDFDocumentGetInfoPtr.asFunction<
      CGPDFDictionaryRef Function(CGPDFDocumentRef)>();

  CGPDFArrayRef CGPDFDocumentGetID(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentGetID(
      document,
    );
  }

  late final _CGPDFDocumentGetIDPtr =
      _lookup<ffi.NativeFunction<CGPDFArrayRef Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentGetID');
  late final _CGPDFDocumentGetID = _CGPDFDocumentGetIDPtr.asFunction<
      CGPDFArrayRef Function(CGPDFDocumentRef)>();

  int CGPDFDocumentGetTypeID() {
    return _CGPDFDocumentGetTypeID();
  }

  late final _CGPDFDocumentGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CGPDFDocumentGetTypeID');
  late final _CGPDFDocumentGetTypeID =
      _CGPDFDocumentGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CGPDFDocumentGetOutline(
    CGPDFDocumentRef document,
  ) {
    return _CGPDFDocumentGetOutline(
      document,
    );
  }

  late final _CGPDFDocumentGetOutlinePtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentGetOutline');
  late final _CGPDFDocumentGetOutline = _CGPDFDocumentGetOutlinePtr.asFunction<
      CFDictionaryRef Function(CGPDFDocumentRef)>();

  CGPDFAccessPermissions CGPDFDocumentGetAccessPermissions(
    CGPDFDocumentRef document,
  ) {
    return CGPDFAccessPermissions.fromValue(_CGPDFDocumentGetAccessPermissions(
      document,
    ));
  }

  late final _CGPDFDocumentGetAccessPermissionsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGPDFDocumentRef)>>(
          'CGPDFDocumentGetAccessPermissions');
  late final _CGPDFDocumentGetAccessPermissions =
      _CGPDFDocumentGetAccessPermissionsPtr.asFunction<
          int Function(CGPDFDocumentRef)>();

  CGRect CGPDFDocumentGetMediaBox(
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGPDFDocumentGetMediaBox(
      document,
      page,
    );
  }

  late final _CGPDFDocumentGetMediaBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPDFDocumentRef, ffi.Int)>>(
          'CGPDFDocumentGetMediaBox');
  late final _CGPDFDocumentGetMediaBox = _CGPDFDocumentGetMediaBoxPtr
      .asFunction<CGRect Function(CGPDFDocumentRef, int)>();

  CGRect CGPDFDocumentGetCropBox(
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGPDFDocumentGetCropBox(
      document,
      page,
    );
  }

  late final _CGPDFDocumentGetCropBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPDFDocumentRef, ffi.Int)>>(
          'CGPDFDocumentGetCropBox');
  late final _CGPDFDocumentGetCropBox = _CGPDFDocumentGetCropBoxPtr.asFunction<
      CGRect Function(CGPDFDocumentRef, int)>();

  CGRect CGPDFDocumentGetBleedBox(
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGPDFDocumentGetBleedBox(
      document,
      page,
    );
  }

  late final _CGPDFDocumentGetBleedBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPDFDocumentRef, ffi.Int)>>(
          'CGPDFDocumentGetBleedBox');
  late final _CGPDFDocumentGetBleedBox = _CGPDFDocumentGetBleedBoxPtr
      .asFunction<CGRect Function(CGPDFDocumentRef, int)>();

  CGRect CGPDFDocumentGetTrimBox(
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGPDFDocumentGetTrimBox(
      document,
      page,
    );
  }

  late final _CGPDFDocumentGetTrimBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPDFDocumentRef, ffi.Int)>>(
          'CGPDFDocumentGetTrimBox');
  late final _CGPDFDocumentGetTrimBox = _CGPDFDocumentGetTrimBoxPtr.asFunction<
      CGRect Function(CGPDFDocumentRef, int)>();

  CGRect CGPDFDocumentGetArtBox(
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGPDFDocumentGetArtBox(
      document,
      page,
    );
  }

  late final _CGPDFDocumentGetArtBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGPDFDocumentRef, ffi.Int)>>(
          'CGPDFDocumentGetArtBox');
  late final _CGPDFDocumentGetArtBox = _CGPDFDocumentGetArtBoxPtr.asFunction<
      CGRect Function(CGPDFDocumentRef, int)>();

  int CGPDFDocumentGetRotationAngle(
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGPDFDocumentGetRotationAngle(
      document,
      page,
    );
  }

  late final _CGPDFDocumentGetRotationAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CGPDFDocumentRef, ffi.Int)>>(
          'CGPDFDocumentGetRotationAngle');
  late final _CGPDFDocumentGetRotationAngle = _CGPDFDocumentGetRotationAnglePtr
      .asFunction<int Function(CGPDFDocumentRef, int)>();

  int CGFunctionGetTypeID() {
    return _CGFunctionGetTypeID();
  }

  late final _CGFunctionGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGFunctionGetTypeID');
  late final _CGFunctionGetTypeID =
      _CGFunctionGetTypeIDPtr.asFunction<int Function()>();

  CGFunctionRef CGFunctionCreate(
    ffi.Pointer<ffi.Void> info,
    int domainDimension,
    ffi.Pointer<CGFloat> domain,
    int rangeDimension,
    ffi.Pointer<CGFloat> range,
    ffi.Pointer<CGFunctionCallbacks> callbacks,
  ) {
    return _CGFunctionCreate(
      info,
      domainDimension,
      domain,
      rangeDimension,
      range,
      callbacks,
    );
  }

  late final _CGFunctionCreatePtr = _lookup<
      ffi.NativeFunction<
          CGFunctionRef Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<CGFloat>,
              ffi.Size,
              ffi.Pointer<CGFloat>,
              ffi.Pointer<CGFunctionCallbacks>)>>('CGFunctionCreate');
  late final _CGFunctionCreate = _CGFunctionCreatePtr.asFunction<
      CGFunctionRef Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<CGFloat>,
          int, ffi.Pointer<CGFloat>, ffi.Pointer<CGFunctionCallbacks>)>();

  CGFunctionRef CGFunctionRetain(
    CGFunctionRef function,
  ) {
    return _CGFunctionRetain(
      function,
    );
  }

  late final _CGFunctionRetainPtr =
      _lookup<ffi.NativeFunction<CGFunctionRef Function(CGFunctionRef)>>(
          'CGFunctionRetain');
  late final _CGFunctionRetain =
      _CGFunctionRetainPtr.asFunction<CGFunctionRef Function(CGFunctionRef)>();

  void CGFunctionRelease(
    CGFunctionRef function,
  ) {
    return _CGFunctionRelease(
      function,
    );
  }

  late final _CGFunctionReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGFunctionRef)>>(
          'CGFunctionRelease');
  late final _CGFunctionRelease =
      _CGFunctionReleasePtr.asFunction<void Function(CGFunctionRef)>();

  int CGShadingGetTypeID() {
    return _CGShadingGetTypeID();
  }

  late final _CGShadingGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGShadingGetTypeID');
  late final _CGShadingGetTypeID =
      _CGShadingGetTypeIDPtr.asFunction<int Function()>();

  CGShadingRef CGShadingCreateAxial(
    CGColorSpaceRef space,
    CGPoint start,
    CGPoint end,
    CGFunctionRef function,
    bool extendStart,
    bool extendEnd,
  ) {
    return _CGShadingCreateAxial(
      space,
      start,
      end,
      function,
      extendStart,
      extendEnd,
    );
  }

  late final _CGShadingCreateAxialPtr = _lookup<
      ffi.NativeFunction<
          CGShadingRef Function(CGColorSpaceRef, CGPoint, CGPoint,
              CGFunctionRef, ffi.Bool, ffi.Bool)>>('CGShadingCreateAxial');
  late final _CGShadingCreateAxial = _CGShadingCreateAxialPtr.asFunction<
      CGShadingRef Function(
          CGColorSpaceRef, CGPoint, CGPoint, CGFunctionRef, bool, bool)>();

  CGShadingRef CGShadingCreateRadial(
    CGColorSpaceRef space,
    CGPoint start,
    double startRadius,
    CGPoint end,
    double endRadius,
    CGFunctionRef function,
    bool extendStart,
    bool extendEnd,
  ) {
    return _CGShadingCreateRadial(
      space,
      start,
      startRadius,
      end,
      endRadius,
      function,
      extendStart,
      extendEnd,
    );
  }

  late final _CGShadingCreateRadialPtr = _lookup<
      ffi.NativeFunction<
          CGShadingRef Function(
              CGColorSpaceRef,
              CGPoint,
              CGFloat,
              CGPoint,
              CGFloat,
              CGFunctionRef,
              ffi.Bool,
              ffi.Bool)>>('CGShadingCreateRadial');
  late final _CGShadingCreateRadial = _CGShadingCreateRadialPtr.asFunction<
      CGShadingRef Function(CGColorSpaceRef, CGPoint, double, CGPoint, double,
          CGFunctionRef, bool, bool)>();

  CGShadingRef CGShadingRetain(
    CGShadingRef shading,
  ) {
    return _CGShadingRetain(
      shading,
    );
  }

  late final _CGShadingRetainPtr =
      _lookup<ffi.NativeFunction<CGShadingRef Function(CGShadingRef)>>(
          'CGShadingRetain');
  late final _CGShadingRetain =
      _CGShadingRetainPtr.asFunction<CGShadingRef Function(CGShadingRef)>();

  void CGShadingRelease(
    CGShadingRef shading,
  ) {
    return _CGShadingRelease(
      shading,
    );
  }

  late final _CGShadingReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGShadingRef)>>(
          'CGShadingRelease');
  late final _CGShadingRelease =
      _CGShadingReleasePtr.asFunction<void Function(CGShadingRef)>();

  late final ffi.Pointer<CFStringRef> _kCGEXRToneMappingGammaDefog =
      _lookup<CFStringRef>('kCGEXRToneMappingGammaDefog');

  CFStringRef get kCGEXRToneMappingGammaDefog =>
      _kCGEXRToneMappingGammaDefog.value;

  set kCGEXRToneMappingGammaDefog(CFStringRef value) =>
      _kCGEXRToneMappingGammaDefog.value = value;

  late final ffi.Pointer<CFStringRef> _kCGEXRToneMappingGammaExposure =
      _lookup<CFStringRef>('kCGEXRToneMappingGammaExposure');

  CFStringRef get kCGEXRToneMappingGammaExposure =>
      _kCGEXRToneMappingGammaExposure.value;

  set kCGEXRToneMappingGammaExposure(CFStringRef value) =>
      _kCGEXRToneMappingGammaExposure.value = value;

  late final ffi.Pointer<CFStringRef> _kCGEXRToneMappingGammaKneeLow =
      _lookup<CFStringRef>('kCGEXRToneMappingGammaKneeLow');

  CFStringRef get kCGEXRToneMappingGammaKneeLow =>
      _kCGEXRToneMappingGammaKneeLow.value;

  set kCGEXRToneMappingGammaKneeLow(CFStringRef value) =>
      _kCGEXRToneMappingGammaKneeLow.value = value;

  late final ffi.Pointer<CFStringRef> _kCGEXRToneMappingGammaKneeHigh =
      _lookup<CFStringRef>('kCGEXRToneMappingGammaKneeHigh');

  CFStringRef get kCGEXRToneMappingGammaKneeHigh =>
      _kCGEXRToneMappingGammaKneeHigh.value;

  set kCGEXRToneMappingGammaKneeHigh(CFStringRef value) =>
      _kCGEXRToneMappingGammaKneeHigh.value = value;

  late final ffi.Pointer<CFStringRef> _kCGUse100nitsHLGOOTF =
      _lookup<CFStringRef>('kCGUse100nitsHLGOOTF');

  CFStringRef get kCGUse100nitsHLGOOTF => _kCGUse100nitsHLGOOTF.value;

  set kCGUse100nitsHLGOOTF(CFStringRef value) =>
      _kCGUse100nitsHLGOOTF.value = value;

  late final ffi.Pointer<CFStringRef> _kCGUseBT1886ForCoreVideoGamma =
      _lookup<CFStringRef>('kCGUseBT1886ForCoreVideoGamma');

  CFStringRef get kCGUseBT1886ForCoreVideoGamma =>
      _kCGUseBT1886ForCoreVideoGamma.value;

  set kCGUseBT1886ForCoreVideoGamma(CFStringRef value) =>
      _kCGUseBT1886ForCoreVideoGamma.value = value;

  late final ffi.Pointer<CFStringRef> _kCGSkipBoostToHDR =
      _lookup<CFStringRef>('kCGSkipBoostToHDR');

  CFStringRef get kCGSkipBoostToHDR => _kCGSkipBoostToHDR.value;

  set kCGSkipBoostToHDR(CFStringRef value) => _kCGSkipBoostToHDR.value = value;

  late final ffi.Pointer<CFStringRef> _kCGUseLegacyHDREcosystem =
      _lookup<CFStringRef>('kCGUseLegacyHDREcosystem');

  CFStringRef get kCGUseLegacyHDREcosystem => _kCGUseLegacyHDREcosystem.value;

  set kCGUseLegacyHDREcosystem(CFStringRef value) =>
      _kCGUseLegacyHDREcosystem.value = value;

  int CGContextGetTypeID() {
    return _CGContextGetTypeID();
  }

  late final _CGContextGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGContextGetTypeID');
  late final _CGContextGetTypeID =
      _CGContextGetTypeIDPtr.asFunction<int Function()>();

  void CGContextSaveGState(
    CGContextRef c,
  ) {
    return _CGContextSaveGState(
      c,
    );
  }

  late final _CGContextSaveGStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextSaveGState');
  late final _CGContextSaveGState =
      _CGContextSaveGStatePtr.asFunction<void Function(CGContextRef)>();

  void CGContextRestoreGState(
    CGContextRef c,
  ) {
    return _CGContextRestoreGState(
      c,
    );
  }

  late final _CGContextRestoreGStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextRestoreGState');
  late final _CGContextRestoreGState =
      _CGContextRestoreGStatePtr.asFunction<void Function(CGContextRef)>();

  void CGContextScaleCTM(
    CGContextRef c,
    double sx,
    double sy,
  ) {
    return _CGContextScaleCTM(
      c,
      sx,
      sy,
    );
  }

  late final _CGContextScaleCTMPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextScaleCTM');
  late final _CGContextScaleCTM = _CGContextScaleCTMPtr.asFunction<
      void Function(CGContextRef, double, double)>();

  void CGContextTranslateCTM(
    CGContextRef c,
    double tx,
    double ty,
  ) {
    return _CGContextTranslateCTM(
      c,
      tx,
      ty,
    );
  }

  late final _CGContextTranslateCTMPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextTranslateCTM');
  late final _CGContextTranslateCTM = _CGContextTranslateCTMPtr.asFunction<
      void Function(CGContextRef, double, double)>();

  void CGContextRotateCTM(
    CGContextRef c,
    double angle,
  ) {
    return _CGContextRotateCTM(
      c,
      angle,
    );
  }

  late final _CGContextRotateCTMPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextRotateCTM');
  late final _CGContextRotateCTM =
      _CGContextRotateCTMPtr.asFunction<void Function(CGContextRef, double)>();

  void CGContextConcatCTM(
    CGContextRef c,
    CGAffineTransform transform,
  ) {
    return _CGContextConcatCTM(
      c,
      transform,
    );
  }

  late final _CGContextConcatCTMPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGAffineTransform)>>(
      'CGContextConcatCTM');
  late final _CGContextConcatCTM = _CGContextConcatCTMPtr.asFunction<
      void Function(CGContextRef, CGAffineTransform)>();

  CGAffineTransform CGContextGetCTM(
    CGContextRef c,
  ) {
    return _CGContextGetCTM(
      c,
    );
  }

  late final _CGContextGetCTMPtr =
      _lookup<ffi.NativeFunction<CGAffineTransform Function(CGContextRef)>>(
          'CGContextGetCTM');
  late final _CGContextGetCTM = _CGContextGetCTMPtr.asFunction<
      CGAffineTransform Function(CGContextRef)>();

  void CGContextSetLineWidth(
    CGContextRef c,
    double width,
  ) {
    return _CGContextSetLineWidth(
      c,
      width,
    );
  }

  late final _CGContextSetLineWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextSetLineWidth');
  late final _CGContextSetLineWidth = _CGContextSetLineWidthPtr.asFunction<
      void Function(CGContextRef, double)>();

  void CGContextSetLineCap(
    CGContextRef c,
    CGLineCap cap,
  ) {
    return _CGContextSetLineCap(
      c,
      cap.value,
    );
  }

  late final _CGContextSetLineCapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextSetLineCap');
  late final _CGContextSetLineCap =
      _CGContextSetLineCapPtr.asFunction<void Function(CGContextRef, int)>();

  void CGContextSetLineJoin(
    CGContextRef c,
    CGLineJoin join,
  ) {
    return _CGContextSetLineJoin(
      c,
      join.value,
    );
  }

  late final _CGContextSetLineJoinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextSetLineJoin');
  late final _CGContextSetLineJoin =
      _CGContextSetLineJoinPtr.asFunction<void Function(CGContextRef, int)>();

  void CGContextSetMiterLimit(
    CGContextRef c,
    double limit,
  ) {
    return _CGContextSetMiterLimit(
      c,
      limit,
    );
  }

  late final _CGContextSetMiterLimitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextSetMiterLimit');
  late final _CGContextSetMiterLimit = _CGContextSetMiterLimitPtr.asFunction<
      void Function(CGContextRef, double)>();

  void CGContextSetLineDash(
    CGContextRef c,
    double phase,
    ffi.Pointer<CGFloat> lengths,
    int count,
  ) {
    return _CGContextSetLineDash(
      c,
      phase,
      lengths,
      count,
    );
  }

  late final _CGContextSetLineDashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, ffi.Pointer<CGFloat>,
              ffi.Size)>>('CGContextSetLineDash');
  late final _CGContextSetLineDash = _CGContextSetLineDashPtr.asFunction<
      void Function(CGContextRef, double, ffi.Pointer<CGFloat>, int)>();

  void CGContextSetFlatness(
    CGContextRef c,
    double flatness,
  ) {
    return _CGContextSetFlatness(
      c,
      flatness,
    );
  }

  late final _CGContextSetFlatnessPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextSetFlatness');
  late final _CGContextSetFlatness = _CGContextSetFlatnessPtr.asFunction<
      void Function(CGContextRef, double)>();

  void CGContextSetAlpha(
    CGContextRef c,
    double alpha,
  ) {
    return _CGContextSetAlpha(
      c,
      alpha,
    );
  }

  late final _CGContextSetAlphaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextSetAlpha');
  late final _CGContextSetAlpha =
      _CGContextSetAlphaPtr.asFunction<void Function(CGContextRef, double)>();

  void CGContextSetBlendMode(
    CGContextRef c,
    CGBlendMode mode,
  ) {
    return _CGContextSetBlendMode(
      c,
      mode.value,
    );
  }

  late final _CGContextSetBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextSetBlendMode');
  late final _CGContextSetBlendMode =
      _CGContextSetBlendModePtr.asFunction<void Function(CGContextRef, int)>();

  void CGContextBeginPath(
    CGContextRef c,
  ) {
    return _CGContextBeginPath(
      c,
    );
  }

  late final _CGContextBeginPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextBeginPath');
  late final _CGContextBeginPath =
      _CGContextBeginPathPtr.asFunction<void Function(CGContextRef)>();

  void CGContextMoveToPoint(
    CGContextRef c,
    double x,
    double y,
  ) {
    return _CGContextMoveToPoint(
      c,
      x,
      y,
    );
  }

  late final _CGContextMoveToPointPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextMoveToPoint');
  late final _CGContextMoveToPoint = _CGContextMoveToPointPtr.asFunction<
      void Function(CGContextRef, double, double)>();

  void CGContextAddLineToPoint(
    CGContextRef c,
    double x,
    double y,
  ) {
    return _CGContextAddLineToPoint(
      c,
      x,
      y,
    );
  }

  late final _CGContextAddLineToPointPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextAddLineToPoint');
  late final _CGContextAddLineToPoint = _CGContextAddLineToPointPtr.asFunction<
      void Function(CGContextRef, double, double)>();

  void CGContextAddCurveToPoint(
    CGContextRef c,
    double cp1x,
    double cp1y,
    double cp2x,
    double cp2y,
    double x,
    double y,
  ) {
    return _CGContextAddCurveToPoint(
      c,
      cp1x,
      cp1y,
      cp2x,
      cp2y,
      x,
      y,
    );
  }

  late final _CGContextAddCurveToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat, CGFloat)>>('CGContextAddCurveToPoint');
  late final _CGContextAddCurveToPoint =
      _CGContextAddCurveToPointPtr.asFunction<
          void Function(
              CGContextRef, double, double, double, double, double, double)>();

  void CGContextAddQuadCurveToPoint(
    CGContextRef c,
    double cpx,
    double cpy,
    double x,
    double y,
  ) {
    return _CGContextAddQuadCurveToPoint(
      c,
      cpx,
      cpy,
      x,
      y,
    );
  }

  late final _CGContextAddQuadCurveToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGContextAddQuadCurveToPoint');
  late final _CGContextAddQuadCurveToPoint =
      _CGContextAddQuadCurveToPointPtr.asFunction<
          void Function(CGContextRef, double, double, double, double)>();

  void CGContextClosePath(
    CGContextRef c,
  ) {
    return _CGContextClosePath(
      c,
    );
  }

  late final _CGContextClosePathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextClosePath');
  late final _CGContextClosePath =
      _CGContextClosePathPtr.asFunction<void Function(CGContextRef)>();

  void CGContextAddRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextAddRect(
      c,
      rect,
    );
  }

  late final _CGContextAddRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextAddRect');
  late final _CGContextAddRect =
      _CGContextAddRectPtr.asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextAddRects(
    CGContextRef c,
    ffi.Pointer<CGRect> rects,
    int count,
  ) {
    return _CGContextAddRects(
      c,
      rects,
      count,
    );
  }

  late final _CGContextAddRectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<CGRect>,
              ffi.Size)>>('CGContextAddRects');
  late final _CGContextAddRects = _CGContextAddRectsPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGRect>, int)>();

  void CGContextAddLines(
    CGContextRef c,
    ffi.Pointer<CGPoint> points,
    int count,
  ) {
    return _CGContextAddLines(
      c,
      points,
      count,
    );
  }

  late final _CGContextAddLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<CGPoint>,
              ffi.Size)>>('CGContextAddLines');
  late final _CGContextAddLines = _CGContextAddLinesPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGPoint>, int)>();

  void CGContextAddEllipseInRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextAddEllipseInRect(
      c,
      rect,
    );
  }

  late final _CGContextAddEllipseInRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextAddEllipseInRect');
  late final _CGContextAddEllipseInRect = _CGContextAddEllipseInRectPtr
      .asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextAddArc(
    CGContextRef c,
    double x,
    double y,
    double radius,
    double startAngle,
    double endAngle,
    int clockwise,
  ) {
    return _CGContextAddArc(
      c,
      x,
      y,
      radius,
      startAngle,
      endAngle,
      clockwise,
    );
  }

  late final _CGContextAddArcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat, ffi.Int)>>('CGContextAddArc');
  late final _CGContextAddArc = _CGContextAddArcPtr.asFunction<
      void Function(
          CGContextRef, double, double, double, double, double, int)>();

  void CGContextAddArcToPoint(
    CGContextRef c,
    double x1,
    double y1,
    double x2,
    double y2,
    double radius,
  ) {
    return _CGContextAddArcToPoint(
      c,
      x1,
      y1,
      x2,
      y2,
      radius,
    );
  }

  late final _CGContextAddArcToPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGContextAddArcToPoint');
  late final _CGContextAddArcToPoint = _CGContextAddArcToPointPtr.asFunction<
      void Function(CGContextRef, double, double, double, double, double)>();

  void CGContextAddPath(
    CGContextRef c,
    CGPathRef path,
  ) {
    return _CGContextAddPath(
      c,
      path,
    );
  }

  late final _CGContextAddPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGPathRef)>>(
          'CGContextAddPath');
  late final _CGContextAddPath =
      _CGContextAddPathPtr.asFunction<void Function(CGContextRef, CGPathRef)>();

  void CGContextReplacePathWithStrokedPath(
    CGContextRef c,
  ) {
    return _CGContextReplacePathWithStrokedPath(
      c,
    );
  }

  late final _CGContextReplacePathWithStrokedPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextReplacePathWithStrokedPath');
  late final _CGContextReplacePathWithStrokedPath =
      _CGContextReplacePathWithStrokedPathPtr.asFunction<
          void Function(CGContextRef)>();

  bool CGContextIsPathEmpty(
    CGContextRef c,
  ) {
    return _CGContextIsPathEmpty(
      c,
    );
  }

  late final _CGContextIsPathEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGContextRef)>>(
          'CGContextIsPathEmpty');
  late final _CGContextIsPathEmpty =
      _CGContextIsPathEmptyPtr.asFunction<bool Function(CGContextRef)>();

  CGPoint CGContextGetPathCurrentPoint(
    CGContextRef c,
  ) {
    return _CGContextGetPathCurrentPoint(
      c,
    );
  }

  late final _CGContextGetPathCurrentPointPtr =
      _lookup<ffi.NativeFunction<CGPoint Function(CGContextRef)>>(
          'CGContextGetPathCurrentPoint');
  late final _CGContextGetPathCurrentPoint = _CGContextGetPathCurrentPointPtr
      .asFunction<CGPoint Function(CGContextRef)>();

  CGRect CGContextGetPathBoundingBox(
    CGContextRef c,
  ) {
    return _CGContextGetPathBoundingBox(
      c,
    );
  }

  late final _CGContextGetPathBoundingBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGContextRef)>>(
          'CGContextGetPathBoundingBox');
  late final _CGContextGetPathBoundingBox = _CGContextGetPathBoundingBoxPtr
      .asFunction<CGRect Function(CGContextRef)>();

  CGPathRef CGContextCopyPath(
    CGContextRef c,
  ) {
    return _CGContextCopyPath(
      c,
    );
  }

  late final _CGContextCopyPathPtr =
      _lookup<ffi.NativeFunction<CGPathRef Function(CGContextRef)>>(
          'CGContextCopyPath');
  late final _CGContextCopyPath =
      _CGContextCopyPathPtr.asFunction<CGPathRef Function(CGContextRef)>();

  bool CGContextPathContainsPoint(
    CGContextRef c,
    CGPoint point,
    CGPathDrawingMode mode,
  ) {
    return _CGContextPathContainsPoint(
      c,
      point,
      mode.value,
    );
  }

  late final _CGContextPathContainsPointPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(CGContextRef, CGPoint, ffi.Int32)>>(
      'CGContextPathContainsPoint');
  late final _CGContextPathContainsPoint = _CGContextPathContainsPointPtr
      .asFunction<bool Function(CGContextRef, CGPoint, int)>();

  void CGContextDrawPath(
    CGContextRef c,
    CGPathDrawingMode mode,
  ) {
    return _CGContextDrawPath(
      c,
      mode.value,
    );
  }

  late final _CGContextDrawPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextDrawPath');
  late final _CGContextDrawPath =
      _CGContextDrawPathPtr.asFunction<void Function(CGContextRef, int)>();

  void CGContextFillPath(
    CGContextRef c,
  ) {
    return _CGContextFillPath(
      c,
    );
  }

  late final _CGContextFillPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextFillPath');
  late final _CGContextFillPath =
      _CGContextFillPathPtr.asFunction<void Function(CGContextRef)>();

  void CGContextEOFillPath(
    CGContextRef c,
  ) {
    return _CGContextEOFillPath(
      c,
    );
  }

  late final _CGContextEOFillPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextEOFillPath');
  late final _CGContextEOFillPath =
      _CGContextEOFillPathPtr.asFunction<void Function(CGContextRef)>();

  void CGContextStrokePath(
    CGContextRef c,
  ) {
    return _CGContextStrokePath(
      c,
    );
  }

  late final _CGContextStrokePathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextStrokePath');
  late final _CGContextStrokePath =
      _CGContextStrokePathPtr.asFunction<void Function(CGContextRef)>();

  void CGContextFillRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextFillRect(
      c,
      rect,
    );
  }

  late final _CGContextFillRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextFillRect');
  late final _CGContextFillRect =
      _CGContextFillRectPtr.asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextFillRects(
    CGContextRef c,
    ffi.Pointer<CGRect> rects,
    int count,
  ) {
    return _CGContextFillRects(
      c,
      rects,
      count,
    );
  }

  late final _CGContextFillRectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<CGRect>,
              ffi.Size)>>('CGContextFillRects');
  late final _CGContextFillRects = _CGContextFillRectsPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGRect>, int)>();

  void CGContextStrokeRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextStrokeRect(
      c,
      rect,
    );
  }

  late final _CGContextStrokeRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextStrokeRect');
  late final _CGContextStrokeRect =
      _CGContextStrokeRectPtr.asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextStrokeRectWithWidth(
    CGContextRef c,
    CGRect rect,
    double width,
  ) {
    return _CGContextStrokeRectWithWidth(
      c,
      rect,
      width,
    );
  }

  late final _CGContextStrokeRectWithWidthPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect, CGFloat)>>(
      'CGContextStrokeRectWithWidth');
  late final _CGContextStrokeRectWithWidth = _CGContextStrokeRectWithWidthPtr
      .asFunction<void Function(CGContextRef, CGRect, double)>();

  void CGContextClearRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextClearRect(
      c,
      rect,
    );
  }

  late final _CGContextClearRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextClearRect');
  late final _CGContextClearRect =
      _CGContextClearRectPtr.asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextFillEllipseInRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextFillEllipseInRect(
      c,
      rect,
    );
  }

  late final _CGContextFillEllipseInRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextFillEllipseInRect');
  late final _CGContextFillEllipseInRect = _CGContextFillEllipseInRectPtr
      .asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextStrokeEllipseInRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextStrokeEllipseInRect(
      c,
      rect,
    );
  }

  late final _CGContextStrokeEllipseInRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextStrokeEllipseInRect');
  late final _CGContextStrokeEllipseInRect = _CGContextStrokeEllipseInRectPtr
      .asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextStrokeLineSegments(
    CGContextRef c,
    ffi.Pointer<CGPoint> points,
    int count,
  ) {
    return _CGContextStrokeLineSegments(
      c,
      points,
      count,
    );
  }

  late final _CGContextStrokeLineSegmentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<CGPoint>,
              ffi.Size)>>('CGContextStrokeLineSegments');
  late final _CGContextStrokeLineSegments = _CGContextStrokeLineSegmentsPtr
      .asFunction<void Function(CGContextRef, ffi.Pointer<CGPoint>, int)>();

  void CGContextClip(
    CGContextRef c,
  ) {
    return _CGContextClip(
      c,
    );
  }

  late final _CGContextClipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextClip');
  late final _CGContextClip =
      _CGContextClipPtr.asFunction<void Function(CGContextRef)>();

  void CGContextEOClip(
    CGContextRef c,
  ) {
    return _CGContextEOClip(
      c,
    );
  }

  late final _CGContextEOClipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextEOClip');
  late final _CGContextEOClip =
      _CGContextEOClipPtr.asFunction<void Function(CGContextRef)>();

  void CGContextResetClip(
    CGContextRef c,
  ) {
    return _CGContextResetClip(
      c,
    );
  }

  late final _CGContextResetClipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextResetClip');
  late final _CGContextResetClip =
      _CGContextResetClipPtr.asFunction<void Function(CGContextRef)>();

  void CGContextClipToMask(
    CGContextRef c,
    CGRect rect,
    CGImageRef mask,
  ) {
    return _CGContextClipToMask(
      c,
      rect,
      mask,
    );
  }

  late final _CGContextClipToMaskPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGRect, CGImageRef)>>(
      'CGContextClipToMask');
  late final _CGContextClipToMask = _CGContextClipToMaskPtr.asFunction<
      void Function(CGContextRef, CGRect, CGImageRef)>();

  CGRect CGContextGetClipBoundingBox(
    CGContextRef c,
  ) {
    return _CGContextGetClipBoundingBox(
      c,
    );
  }

  late final _CGContextGetClipBoundingBoxPtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGContextRef)>>(
          'CGContextGetClipBoundingBox');
  late final _CGContextGetClipBoundingBox = _CGContextGetClipBoundingBoxPtr
      .asFunction<CGRect Function(CGContextRef)>();

  void CGContextClipToRect(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextClipToRect(
      c,
      rect,
    );
  }

  late final _CGContextClipToRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGRect)>>(
          'CGContextClipToRect');
  late final _CGContextClipToRect =
      _CGContextClipToRectPtr.asFunction<void Function(CGContextRef, CGRect)>();

  void CGContextClipToRects(
    CGContextRef c,
    ffi.Pointer<CGRect> rects,
    int count,
  ) {
    return _CGContextClipToRects(
      c,
      rects,
      count,
    );
  }

  late final _CGContextClipToRectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<CGRect>,
              ffi.Size)>>('CGContextClipToRects');
  late final _CGContextClipToRects = _CGContextClipToRectsPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGRect>, int)>();

  void CGContextSetFillColorWithColor(
    CGContextRef c,
    CGColorRef color,
  ) {
    return _CGContextSetFillColorWithColor(
      c,
      color,
    );
  }

  late final _CGContextSetFillColorWithColorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGColorRef)>>(
          'CGContextSetFillColorWithColor');
  late final _CGContextSetFillColorWithColor =
      _CGContextSetFillColorWithColorPtr.asFunction<
          void Function(CGContextRef, CGColorRef)>();

  void CGContextSetStrokeColorWithColor(
    CGContextRef c,
    CGColorRef color,
  ) {
    return _CGContextSetStrokeColorWithColor(
      c,
      color,
    );
  }

  late final _CGContextSetStrokeColorWithColorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGColorRef)>>(
          'CGContextSetStrokeColorWithColor');
  late final _CGContextSetStrokeColorWithColor =
      _CGContextSetStrokeColorWithColorPtr.asFunction<
          void Function(CGContextRef, CGColorRef)>();

  void CGContextSetFillColorSpace(
    CGContextRef c,
    CGColorSpaceRef space,
  ) {
    return _CGContextSetFillColorSpace(
      c,
      space,
    );
  }

  late final _CGContextSetFillColorSpacePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CGColorSpaceRef)>>(
      'CGContextSetFillColorSpace');
  late final _CGContextSetFillColorSpace = _CGContextSetFillColorSpacePtr
      .asFunction<void Function(CGContextRef, CGColorSpaceRef)>();

  void CGContextSetStrokeColorSpace(
    CGContextRef c,
    CGColorSpaceRef space,
  ) {
    return _CGContextSetStrokeColorSpace(
      c,
      space,
    );
  }

  late final _CGContextSetStrokeColorSpacePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CGColorSpaceRef)>>(
      'CGContextSetStrokeColorSpace');
  late final _CGContextSetStrokeColorSpace = _CGContextSetStrokeColorSpacePtr
      .asFunction<void Function(CGContextRef, CGColorSpaceRef)>();

  void CGContextSetFillColor(
    CGContextRef c,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGContextSetFillColor(
      c,
      components,
    );
  }

  late final _CGContextSetFillColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGContextRef, ffi.Pointer<CGFloat>)>>('CGContextSetFillColor');
  late final _CGContextSetFillColor = _CGContextSetFillColorPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGFloat>)>();

  void CGContextSetStrokeColor(
    CGContextRef c,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGContextSetStrokeColor(
      c,
      components,
    );
  }

  late final _CGContextSetStrokeColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGContextRef, ffi.Pointer<CGFloat>)>>('CGContextSetStrokeColor');
  late final _CGContextSetStrokeColor = _CGContextSetStrokeColorPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGFloat>)>();

  void CGContextSetFillPattern(
    CGContextRef c,
    CGPatternRef pattern,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGContextSetFillPattern(
      c,
      pattern,
      components,
    );
  }

  late final _CGContextSetFillPatternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGPatternRef,
              ffi.Pointer<CGFloat>)>>('CGContextSetFillPattern');
  late final _CGContextSetFillPattern = _CGContextSetFillPatternPtr.asFunction<
      void Function(CGContextRef, CGPatternRef, ffi.Pointer<CGFloat>)>();

  void CGContextSetStrokePattern(
    CGContextRef c,
    CGPatternRef pattern,
    ffi.Pointer<CGFloat> components,
  ) {
    return _CGContextSetStrokePattern(
      c,
      pattern,
      components,
    );
  }

  late final _CGContextSetStrokePatternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGPatternRef,
              ffi.Pointer<CGFloat>)>>('CGContextSetStrokePattern');
  late final _CGContextSetStrokePattern =
      _CGContextSetStrokePatternPtr.asFunction<
          void Function(CGContextRef, CGPatternRef, ffi.Pointer<CGFloat>)>();

  void CGContextSetPatternPhase(
    CGContextRef c,
    CGSize phase,
  ) {
    return _CGContextSetPatternPhase(
      c,
      phase,
    );
  }

  late final _CGContextSetPatternPhasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGSize)>>(
          'CGContextSetPatternPhase');
  late final _CGContextSetPatternPhase = _CGContextSetPatternPhasePtr
      .asFunction<void Function(CGContextRef, CGSize)>();

  void CGContextSetGrayFillColor(
    CGContextRef c,
    double gray,
    double alpha,
  ) {
    return _CGContextSetGrayFillColor(
      c,
      gray,
      alpha,
    );
  }

  late final _CGContextSetGrayFillColorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextSetGrayFillColor');
  late final _CGContextSetGrayFillColor = _CGContextSetGrayFillColorPtr
      .asFunction<void Function(CGContextRef, double, double)>();

  void CGContextSetGrayStrokeColor(
    CGContextRef c,
    double gray,
    double alpha,
  ) {
    return _CGContextSetGrayStrokeColor(
      c,
      gray,
      alpha,
    );
  }

  late final _CGContextSetGrayStrokeColorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextSetGrayStrokeColor');
  late final _CGContextSetGrayStrokeColor = _CGContextSetGrayStrokeColorPtr
      .asFunction<void Function(CGContextRef, double, double)>();

  void CGContextSetRGBFillColor(
    CGContextRef c,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _CGContextSetRGBFillColor(
      c,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _CGContextSetRGBFillColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGContextSetRGBFillColor');
  late final _CGContextSetRGBFillColor =
      _CGContextSetRGBFillColorPtr.asFunction<
          void Function(CGContextRef, double, double, double, double)>();

  void CGContextSetRGBStrokeColor(
    CGContextRef c,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _CGContextSetRGBStrokeColor(
      c,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _CGContextSetRGBStrokeColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGContextSetRGBStrokeColor');
  late final _CGContextSetRGBStrokeColor =
      _CGContextSetRGBStrokeColorPtr.asFunction<
          void Function(CGContextRef, double, double, double, double)>();

  void CGContextSetCMYKFillColor(
    CGContextRef c,
    double cyan,
    double magenta,
    double yellow,
    double black,
    double alpha,
  ) {
    return _CGContextSetCMYKFillColor(
      c,
      cyan,
      magenta,
      yellow,
      black,
      alpha,
    );
  }

  late final _CGContextSetCMYKFillColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGContextSetCMYKFillColor');
  late final _CGContextSetCMYKFillColor =
      _CGContextSetCMYKFillColorPtr.asFunction<
          void Function(
              CGContextRef, double, double, double, double, double)>();

  void CGContextSetCMYKStrokeColor(
    CGContextRef c,
    double cyan,
    double magenta,
    double yellow,
    double black,
    double alpha,
  ) {
    return _CGContextSetCMYKStrokeColor(
      c,
      cyan,
      magenta,
      yellow,
      black,
      alpha,
    );
  }

  late final _CGContextSetCMYKStrokeColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat, CGFloat, CGFloat,
              CGFloat)>>('CGContextSetCMYKStrokeColor');
  late final _CGContextSetCMYKStrokeColor =
      _CGContextSetCMYKStrokeColorPtr.asFunction<
          void Function(
              CGContextRef, double, double, double, double, double)>();

  void CGContextSetRenderingIntent(
    CGContextRef c,
    CGColorRenderingIntent intent,
  ) {
    return _CGContextSetRenderingIntent(
      c,
      intent.value,
    );
  }

  late final _CGContextSetRenderingIntentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextSetRenderingIntent');
  late final _CGContextSetRenderingIntent = _CGContextSetRenderingIntentPtr
      .asFunction<void Function(CGContextRef, int)>();

  bool CGContextSetEDRTargetHeadroom(
    CGContextRef c,
    double headroom,
  ) {
    return _CGContextSetEDRTargetHeadroom(
      c,
      headroom,
    );
  }

  late final _CGContextSetEDRTargetHeadroomPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGContextRef, ffi.Float)>>(
          'CGContextSetEDRTargetHeadroom');
  late final _CGContextSetEDRTargetHeadroom = _CGContextSetEDRTargetHeadroomPtr
      .asFunction<bool Function(CGContextRef, double)>();

  double CGContextGetEDRTargetHeadroom(
    CGContextRef c,
  ) {
    return _CGContextGetEDRTargetHeadroom(
      c,
    );
  }

  late final _CGContextGetEDRTargetHeadroomPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(CGContextRef)>>(
          'CGContextGetEDRTargetHeadroom');
  late final _CGContextGetEDRTargetHeadroom = _CGContextGetEDRTargetHeadroomPtr
      .asFunction<double Function(CGContextRef)>();

  void CGContextDrawImage(
    CGContextRef c,
    CGRect rect,
    CGImageRef image,
  ) {
    return _CGContextDrawImage(
      c,
      rect,
      image,
    );
  }

  late final _CGContextDrawImagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGRect, CGImageRef)>>(
      'CGContextDrawImage');
  late final _CGContextDrawImage = _CGContextDrawImagePtr.asFunction<
      void Function(CGContextRef, CGRect, CGImageRef)>();

  void CGContextDrawTiledImage(
    CGContextRef c,
    CGRect rect,
    CGImageRef image,
  ) {
    return _CGContextDrawTiledImage(
      c,
      rect,
      image,
    );
  }

  late final _CGContextDrawTiledImagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGRect, CGImageRef)>>(
      'CGContextDrawTiledImage');
  late final _CGContextDrawTiledImage = _CGContextDrawTiledImagePtr.asFunction<
      void Function(CGContextRef, CGRect, CGImageRef)>();

  bool CGContextDrawImageApplyingToneMapping(
    CGContextRef c,
    CGRect r,
    CGImageRef image,
    CGToneMapping method,
    CFDictionaryRef options,
  ) {
    return _CGContextDrawImageApplyingToneMapping(
      c,
      r,
      image,
      method.value,
      options,
    );
  }

  late final _CGContextDrawImageApplyingToneMappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGContextRef, CGRect, CGImageRef, ffi.Uint32,
              CFDictionaryRef)>>('CGContextDrawImageApplyingToneMapping');
  late final _CGContextDrawImageApplyingToneMapping =
      _CGContextDrawImageApplyingToneMappingPtr.asFunction<
          bool Function(
              CGContextRef, CGRect, CGImageRef, int, CFDictionaryRef)>();

  CGInterpolationQuality CGContextGetInterpolationQuality(
    CGContextRef c,
  ) {
    return CGInterpolationQuality.fromValue(_CGContextGetInterpolationQuality(
      c,
    ));
  }

  late final _CGContextGetInterpolationQualityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CGContextRef)>>(
          'CGContextGetInterpolationQuality');
  late final _CGContextGetInterpolationQuality =
      _CGContextGetInterpolationQualityPtr.asFunction<
          int Function(CGContextRef)>();

  void CGContextSetInterpolationQuality(
    CGContextRef c,
    CGInterpolationQuality quality,
  ) {
    return _CGContextSetInterpolationQuality(
      c,
      quality.value,
    );
  }

  late final _CGContextSetInterpolationQualityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextSetInterpolationQuality');
  late final _CGContextSetInterpolationQuality =
      _CGContextSetInterpolationQualityPtr.asFunction<
          void Function(CGContextRef, int)>();

  void CGContextSetShadowWithColor(
    CGContextRef c,
    CGSize offset,
    double blur,
    CGColorRef color,
  ) {
    return _CGContextSetShadowWithColor(
      c,
      offset,
      blur,
      color,
    );
  }

  late final _CGContextSetShadowWithColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGSize, CGFloat,
              CGColorRef)>>('CGContextSetShadowWithColor');
  late final _CGContextSetShadowWithColor = _CGContextSetShadowWithColorPtr
      .asFunction<void Function(CGContextRef, CGSize, double, CGColorRef)>();

  void CGContextSetShadow(
    CGContextRef c,
    CGSize offset,
    double blur,
  ) {
    return _CGContextSetShadow(
      c,
      offset,
      blur,
    );
  }

  late final _CGContextSetShadowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CGSize, CGFloat)>>(
      'CGContextSetShadow');
  late final _CGContextSetShadow = _CGContextSetShadowPtr.asFunction<
      void Function(CGContextRef, CGSize, double)>();

  void CGContextDrawLinearGradient(
    CGContextRef c,
    CGGradientRef gradient,
    CGPoint startPoint,
    CGPoint endPoint,
    CGGradientDrawingOptions options,
  ) {
    return _CGContextDrawLinearGradient(
      c,
      gradient,
      startPoint,
      endPoint,
      options.value,
    );
  }

  late final _CGContextDrawLinearGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGGradientRef, CGPoint, CGPoint,
              ffi.Uint32)>>('CGContextDrawLinearGradient');
  late final _CGContextDrawLinearGradient =
      _CGContextDrawLinearGradientPtr.asFunction<
          void Function(CGContextRef, CGGradientRef, CGPoint, CGPoint, int)>();

  void CGContextDrawRadialGradient(
    CGContextRef c,
    CGGradientRef gradient,
    CGPoint startCenter,
    DartCGFloat startRadius,
    CGPoint endCenter,
    DartCGFloat endRadius,
    CGGradientDrawingOptions options,
  ) {
    return _CGContextDrawRadialGradient(
      c,
      gradient,
      startCenter,
      startRadius,
      endCenter,
      endRadius,
      options.value,
    );
  }

  late final _CGContextDrawRadialGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGGradientRef, CGPoint, CGFloat,
              CGPoint, CGFloat, ffi.Uint32)>>('CGContextDrawRadialGradient');
  late final _CGContextDrawRadialGradient =
      _CGContextDrawRadialGradientPtr.asFunction<
          void Function(CGContextRef, CGGradientRef, CGPoint, double, CGPoint,
              double, int)>();

  void CGContextDrawConicGradient(
    CGContextRef c,
    CGGradientRef gradient,
    CGPoint center,
    double angle,
  ) {
    return _CGContextDrawConicGradient(
      c,
      gradient,
      center,
      angle,
    );
  }

  late final _CGContextDrawConicGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGGradientRef, CGPoint,
              CGFloat)>>('CGContextDrawConicGradient');
  late final _CGContextDrawConicGradient =
      _CGContextDrawConicGradientPtr.asFunction<
          void Function(CGContextRef, CGGradientRef, CGPoint, double)>();

  void CGContextDrawShading(
    CGContextRef c,
    CGShadingRef shading,
  ) {
    return _CGContextDrawShading(
      c,
      shading,
    );
  }

  late final _CGContextDrawShadingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CGShadingRef)>>(
      'CGContextDrawShading');
  late final _CGContextDrawShading = _CGContextDrawShadingPtr.asFunction<
      void Function(CGContextRef, CGShadingRef)>();

  void CGContextSetCharacterSpacing(
    CGContextRef c,
    double spacing,
  ) {
    return _CGContextSetCharacterSpacing(
      c,
      spacing,
    );
  }

  late final _CGContextSetCharacterSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextSetCharacterSpacing');
  late final _CGContextSetCharacterSpacing = _CGContextSetCharacterSpacingPtr
      .asFunction<void Function(CGContextRef, double)>();

  void CGContextSetTextPosition(
    CGContextRef c,
    double x,
    double y,
  ) {
    return _CGContextSetTextPosition(
      c,
      x,
      y,
    );
  }

  late final _CGContextSetTextPositionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGFloat, CGFloat)>>(
      'CGContextSetTextPosition');
  late final _CGContextSetTextPosition = _CGContextSetTextPositionPtr
      .asFunction<void Function(CGContextRef, double, double)>();

  CGPoint CGContextGetTextPosition(
    CGContextRef c,
  ) {
    return _CGContextGetTextPosition(
      c,
    );
  }

  late final _CGContextGetTextPositionPtr =
      _lookup<ffi.NativeFunction<CGPoint Function(CGContextRef)>>(
          'CGContextGetTextPosition');
  late final _CGContextGetTextPosition =
      _CGContextGetTextPositionPtr.asFunction<CGPoint Function(CGContextRef)>();

  void CGContextSetTextMatrix(
    CGContextRef c,
    CGAffineTransform t,
  ) {
    return _CGContextSetTextMatrix(
      c,
      t,
    );
  }

  late final _CGContextSetTextMatrixPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGAffineTransform)>>(
      'CGContextSetTextMatrix');
  late final _CGContextSetTextMatrix = _CGContextSetTextMatrixPtr.asFunction<
      void Function(CGContextRef, CGAffineTransform)>();

  CGAffineTransform CGContextGetTextMatrix(
    CGContextRef c,
  ) {
    return _CGContextGetTextMatrix(
      c,
    );
  }

  late final _CGContextGetTextMatrixPtr =
      _lookup<ffi.NativeFunction<CGAffineTransform Function(CGContextRef)>>(
          'CGContextGetTextMatrix');
  late final _CGContextGetTextMatrix = _CGContextGetTextMatrixPtr.asFunction<
      CGAffineTransform Function(CGContextRef)>();

  void CGContextSetTextDrawingMode(
    CGContextRef c,
    CGTextDrawingMode mode,
  ) {
    return _CGContextSetTextDrawingMode(
      c,
      mode.value,
    );
  }

  late final _CGContextSetTextDrawingModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Int32)>>(
          'CGContextSetTextDrawingMode');
  late final _CGContextSetTextDrawingMode = _CGContextSetTextDrawingModePtr
      .asFunction<void Function(CGContextRef, int)>();

  void CGContextSetFont(
    CGContextRef c,
    CGFontRef font,
  ) {
    return _CGContextSetFont(
      c,
      font,
    );
  }

  late final _CGContextSetFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFontRef)>>(
          'CGContextSetFont');
  late final _CGContextSetFont =
      _CGContextSetFontPtr.asFunction<void Function(CGContextRef, CGFontRef)>();

  void CGContextSetFontSize(
    CGContextRef c,
    double size,
  ) {
    return _CGContextSetFontSize(
      c,
      size,
    );
  }

  late final _CGContextSetFontSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CGFloat)>>(
          'CGContextSetFontSize');
  late final _CGContextSetFontSize = _CGContextSetFontSizePtr.asFunction<
      void Function(CGContextRef, double)>();

  void CGContextShowGlyphsAtPositions(
    CGContextRef c,
    ffi.Pointer<CGGlyph> glyphs,
    ffi.Pointer<CGPoint> Lpositions,
    int count,
  ) {
    return _CGContextShowGlyphsAtPositions(
      c,
      glyphs,
      Lpositions,
      count,
    );
  }

  late final _CGContextShowGlyphsAtPositionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGContextRef,
              ffi.Pointer<CGGlyph>,
              ffi.Pointer<CGPoint>,
              ffi.Size)>>('CGContextShowGlyphsAtPositions');
  late final _CGContextShowGlyphsAtPositions =
      _CGContextShowGlyphsAtPositionsPtr.asFunction<
          void Function(
              CGContextRef, ffi.Pointer<CGGlyph>, ffi.Pointer<CGPoint>, int)>();

  void CGContextDrawPDFPage(
    CGContextRef c,
    CGPDFPageRef page,
  ) {
    return _CGContextDrawPDFPage(
      c,
      page,
    );
  }

  late final _CGContextDrawPDFPagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CGPDFPageRef)>>(
      'CGContextDrawPDFPage');
  late final _CGContextDrawPDFPage = _CGContextDrawPDFPagePtr.asFunction<
      void Function(CGContextRef, CGPDFPageRef)>();

  void CGContextBeginPage(
    CGContextRef c,
    ffi.Pointer<CGRect> mediaBox,
  ) {
    return _CGContextBeginPage(
      c,
      mediaBox,
    );
  }

  late final _CGContextBeginPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGContextRef, ffi.Pointer<CGRect>)>>('CGContextBeginPage');
  late final _CGContextBeginPage = _CGContextBeginPagePtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGRect>)>();

  void CGContextEndPage(
    CGContextRef c,
  ) {
    return _CGContextEndPage(
      c,
    );
  }

  late final _CGContextEndPagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextEndPage');
  late final _CGContextEndPage =
      _CGContextEndPagePtr.asFunction<void Function(CGContextRef)>();

  CGContextRef CGContextRetain(
    CGContextRef c,
  ) {
    return _CGContextRetain(
      c,
    );
  }

  late final _CGContextRetainPtr =
      _lookup<ffi.NativeFunction<CGContextRef Function(CGContextRef)>>(
          'CGContextRetain');
  late final _CGContextRetain =
      _CGContextRetainPtr.asFunction<CGContextRef Function(CGContextRef)>();

  void CGContextRelease(
    CGContextRef c,
  ) {
    return _CGContextRelease(
      c,
    );
  }

  late final _CGContextReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextRelease');
  late final _CGContextRelease =
      _CGContextReleasePtr.asFunction<void Function(CGContextRef)>();

  void CGContextFlush(
    CGContextRef c,
  ) {
    return _CGContextFlush(
      c,
    );
  }

  late final _CGContextFlushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextFlush');
  late final _CGContextFlush =
      _CGContextFlushPtr.asFunction<void Function(CGContextRef)>();

  void CGContextSynchronize(
    CGContextRef c,
  ) {
    return _CGContextSynchronize(
      c,
    );
  }

  late final _CGContextSynchronizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextSynchronize');
  late final _CGContextSynchronize =
      _CGContextSynchronizePtr.asFunction<void Function(CGContextRef)>();

  void CGContextSetShouldAntialias(
    CGContextRef c,
    bool shouldAntialias,
  ) {
    return _CGContextSetShouldAntialias(
      c,
      shouldAntialias,
    );
  }

  late final _CGContextSetShouldAntialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetShouldAntialias');
  late final _CGContextSetShouldAntialias = _CGContextSetShouldAntialiasPtr
      .asFunction<void Function(CGContextRef, bool)>();

  void CGContextSetAllowsAntialiasing(
    CGContextRef c,
    bool allowsAntialiasing,
  ) {
    return _CGContextSetAllowsAntialiasing(
      c,
      allowsAntialiasing,
    );
  }

  late final _CGContextSetAllowsAntialiasingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetAllowsAntialiasing');
  late final _CGContextSetAllowsAntialiasing =
      _CGContextSetAllowsAntialiasingPtr.asFunction<
          void Function(CGContextRef, bool)>();

  void CGContextSetShouldSmoothFonts(
    CGContextRef c,
    bool shouldSmoothFonts,
  ) {
    return _CGContextSetShouldSmoothFonts(
      c,
      shouldSmoothFonts,
    );
  }

  late final _CGContextSetShouldSmoothFontsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetShouldSmoothFonts');
  late final _CGContextSetShouldSmoothFonts = _CGContextSetShouldSmoothFontsPtr
      .asFunction<void Function(CGContextRef, bool)>();

  void CGContextSetAllowsFontSmoothing(
    CGContextRef c,
    bool allowsFontSmoothing,
  ) {
    return _CGContextSetAllowsFontSmoothing(
      c,
      allowsFontSmoothing,
    );
  }

  late final _CGContextSetAllowsFontSmoothingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetAllowsFontSmoothing');
  late final _CGContextSetAllowsFontSmoothing =
      _CGContextSetAllowsFontSmoothingPtr.asFunction<
          void Function(CGContextRef, bool)>();

  void CGContextSetShouldSubpixelPositionFonts(
    CGContextRef c,
    bool shouldSubpixelPositionFonts,
  ) {
    return _CGContextSetShouldSubpixelPositionFonts(
      c,
      shouldSubpixelPositionFonts,
    );
  }

  late final _CGContextSetShouldSubpixelPositionFontsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetShouldSubpixelPositionFonts');
  late final _CGContextSetShouldSubpixelPositionFonts =
      _CGContextSetShouldSubpixelPositionFontsPtr.asFunction<
          void Function(CGContextRef, bool)>();

  void CGContextSetAllowsFontSubpixelPositioning(
    CGContextRef c,
    bool allowsFontSubpixelPositioning,
  ) {
    return _CGContextSetAllowsFontSubpixelPositioning(
      c,
      allowsFontSubpixelPositioning,
    );
  }

  late final _CGContextSetAllowsFontSubpixelPositioningPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetAllowsFontSubpixelPositioning');
  late final _CGContextSetAllowsFontSubpixelPositioning =
      _CGContextSetAllowsFontSubpixelPositioningPtr.asFunction<
          void Function(CGContextRef, bool)>();

  void CGContextSetShouldSubpixelQuantizeFonts(
    CGContextRef c,
    bool shouldSubpixelQuantizeFonts,
  ) {
    return _CGContextSetShouldSubpixelQuantizeFonts(
      c,
      shouldSubpixelQuantizeFonts,
    );
  }

  late final _CGContextSetShouldSubpixelQuantizeFontsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetShouldSubpixelQuantizeFonts');
  late final _CGContextSetShouldSubpixelQuantizeFonts =
      _CGContextSetShouldSubpixelQuantizeFontsPtr.asFunction<
          void Function(CGContextRef, bool)>();

  void CGContextSetAllowsFontSubpixelQuantization(
    CGContextRef c,
    bool allowsFontSubpixelQuantization,
  ) {
    return _CGContextSetAllowsFontSubpixelQuantization(
      c,
      allowsFontSubpixelQuantization,
    );
  }

  late final _CGContextSetAllowsFontSubpixelQuantizationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, ffi.Bool)>>(
          'CGContextSetAllowsFontSubpixelQuantization');
  late final _CGContextSetAllowsFontSubpixelQuantization =
      _CGContextSetAllowsFontSubpixelQuantizationPtr.asFunction<
          void Function(CGContextRef, bool)>();

  void CGContextBeginTransparencyLayer(
    CGContextRef c,
    CFDictionaryRef auxiliaryInfo,
  ) {
    return _CGContextBeginTransparencyLayer(
      c,
      auxiliaryInfo,
    );
  }

  late final _CGContextBeginTransparencyLayerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CFDictionaryRef)>>(
      'CGContextBeginTransparencyLayer');
  late final _CGContextBeginTransparencyLayer =
      _CGContextBeginTransparencyLayerPtr.asFunction<
          void Function(CGContextRef, CFDictionaryRef)>();

  void CGContextBeginTransparencyLayerWithRect(
    CGContextRef c,
    CGRect rect,
    CFDictionaryRef auxInfo,
  ) {
    return _CGContextBeginTransparencyLayerWithRect(
      c,
      rect,
      auxInfo,
    );
  }

  late final _CGContextBeginTransparencyLayerWithRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGRect,
              CFDictionaryRef)>>('CGContextBeginTransparencyLayerWithRect');
  late final _CGContextBeginTransparencyLayerWithRect =
      _CGContextBeginTransparencyLayerWithRectPtr.asFunction<
          void Function(CGContextRef, CGRect, CFDictionaryRef)>();

  void CGContextEndTransparencyLayer(
    CGContextRef c,
  ) {
    return _CGContextEndTransparencyLayer(
      c,
    );
  }

  late final _CGContextEndTransparencyLayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGContextEndTransparencyLayer');
  late final _CGContextEndTransparencyLayer = _CGContextEndTransparencyLayerPtr
      .asFunction<void Function(CGContextRef)>();

  CGAffineTransform CGContextGetUserSpaceToDeviceSpaceTransform(
    CGContextRef c,
  ) {
    return _CGContextGetUserSpaceToDeviceSpaceTransform(
      c,
    );
  }

  late final _CGContextGetUserSpaceToDeviceSpaceTransformPtr =
      _lookup<ffi.NativeFunction<CGAffineTransform Function(CGContextRef)>>(
          'CGContextGetUserSpaceToDeviceSpaceTransform');
  late final _CGContextGetUserSpaceToDeviceSpaceTransform =
      _CGContextGetUserSpaceToDeviceSpaceTransformPtr.asFunction<
          CGAffineTransform Function(CGContextRef)>();

  CGPoint CGContextConvertPointToDeviceSpace(
    CGContextRef c,
    CGPoint point,
  ) {
    return _CGContextConvertPointToDeviceSpace(
      c,
      point,
    );
  }

  late final _CGContextConvertPointToDeviceSpacePtr =
      _lookup<ffi.NativeFunction<CGPoint Function(CGContextRef, CGPoint)>>(
          'CGContextConvertPointToDeviceSpace');
  late final _CGContextConvertPointToDeviceSpace =
      _CGContextConvertPointToDeviceSpacePtr.asFunction<
          CGPoint Function(CGContextRef, CGPoint)>();

  CGPoint CGContextConvertPointToUserSpace(
    CGContextRef c,
    CGPoint point,
  ) {
    return _CGContextConvertPointToUserSpace(
      c,
      point,
    );
  }

  late final _CGContextConvertPointToUserSpacePtr =
      _lookup<ffi.NativeFunction<CGPoint Function(CGContextRef, CGPoint)>>(
          'CGContextConvertPointToUserSpace');
  late final _CGContextConvertPointToUserSpace =
      _CGContextConvertPointToUserSpacePtr.asFunction<
          CGPoint Function(CGContextRef, CGPoint)>();

  CGSize CGContextConvertSizeToDeviceSpace(
    CGContextRef c,
    CGSize size,
  ) {
    return _CGContextConvertSizeToDeviceSpace(
      c,
      size,
    );
  }

  late final _CGContextConvertSizeToDeviceSpacePtr =
      _lookup<ffi.NativeFunction<CGSize Function(CGContextRef, CGSize)>>(
          'CGContextConvertSizeToDeviceSpace');
  late final _CGContextConvertSizeToDeviceSpace =
      _CGContextConvertSizeToDeviceSpacePtr.asFunction<
          CGSize Function(CGContextRef, CGSize)>();

  CGSize CGContextConvertSizeToUserSpace(
    CGContextRef c,
    CGSize size,
  ) {
    return _CGContextConvertSizeToUserSpace(
      c,
      size,
    );
  }

  late final _CGContextConvertSizeToUserSpacePtr =
      _lookup<ffi.NativeFunction<CGSize Function(CGContextRef, CGSize)>>(
          'CGContextConvertSizeToUserSpace');
  late final _CGContextConvertSizeToUserSpace =
      _CGContextConvertSizeToUserSpacePtr.asFunction<
          CGSize Function(CGContextRef, CGSize)>();

  CGRect CGContextConvertRectToDeviceSpace(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextConvertRectToDeviceSpace(
      c,
      rect,
    );
  }

  late final _CGContextConvertRectToDeviceSpacePtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGContextRef, CGRect)>>(
          'CGContextConvertRectToDeviceSpace');
  late final _CGContextConvertRectToDeviceSpace =
      _CGContextConvertRectToDeviceSpacePtr.asFunction<
          CGRect Function(CGContextRef, CGRect)>();

  CGRect CGContextConvertRectToUserSpace(
    CGContextRef c,
    CGRect rect,
  ) {
    return _CGContextConvertRectToUserSpace(
      c,
      rect,
    );
  }

  late final _CGContextConvertRectToUserSpacePtr =
      _lookup<ffi.NativeFunction<CGRect Function(CGContextRef, CGRect)>>(
          'CGContextConvertRectToUserSpace');
  late final _CGContextConvertRectToUserSpace =
      _CGContextConvertRectToUserSpacePtr.asFunction<
          CGRect Function(CGContextRef, CGRect)>();

  void CGContextSelectFont(
    CGContextRef c,
    ffi.Pointer<ffi.Char> name,
    DartCGFloat size,
    CGTextEncoding textEncoding,
  ) {
    return _CGContextSelectFont(
      c,
      name,
      size,
      textEncoding.value,
    );
  }

  late final _CGContextSelectFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<ffi.Char>, CGFloat,
              ffi.Int32)>>('CGContextSelectFont');
  late final _CGContextSelectFont = _CGContextSelectFontPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<ffi.Char>, double, int)>();

  void CGContextShowText(
    CGContextRef c,
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _CGContextShowText(
      c,
      string,
      length,
    );
  }

  late final _CGContextShowTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('CGContextShowText');
  late final _CGContextShowText = _CGContextShowTextPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<ffi.Char>, int)>();

  void CGContextShowTextAtPoint(
    CGContextRef c,
    double x,
    double y,
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _CGContextShowTextAtPoint(
      c,
      x,
      y,
      string,
      length,
    );
  }

  late final _CGContextShowTextAtPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('CGContextShowTextAtPoint');
  late final _CGContextShowTextAtPoint =
      _CGContextShowTextAtPointPtr.asFunction<
          void Function(
              CGContextRef, double, double, ffi.Pointer<ffi.Char>, int)>();

  void CGContextShowGlyphs(
    CGContextRef c,
    ffi.Pointer<CGGlyph> g,
    int count,
  ) {
    return _CGContextShowGlyphs(
      c,
      g,
      count,
    );
  }

  late final _CGContextShowGlyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Pointer<CGGlyph>,
              ffi.Size)>>('CGContextShowGlyphs');
  late final _CGContextShowGlyphs = _CGContextShowGlyphsPtr.asFunction<
      void Function(CGContextRef, ffi.Pointer<CGGlyph>, int)>();

  void CGContextShowGlyphsAtPoint(
    CGContextRef c,
    double x,
    double y,
    ffi.Pointer<CGGlyph> glyphs,
    int count,
  ) {
    return _CGContextShowGlyphsAtPoint(
      c,
      x,
      y,
      glyphs,
      count,
    );
  }

  late final _CGContextShowGlyphsAtPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGFloat, CGFloat,
              ffi.Pointer<CGGlyph>, ffi.Size)>>('CGContextShowGlyphsAtPoint');
  late final _CGContextShowGlyphsAtPoint =
      _CGContextShowGlyphsAtPointPtr.asFunction<
          void Function(
              CGContextRef, double, double, ffi.Pointer<CGGlyph>, int)>();

  void CGContextShowGlyphsWithAdvances(
    CGContextRef c,
    ffi.Pointer<CGGlyph> glyphs,
    ffi.Pointer<CGSize> advances,
    int count,
  ) {
    return _CGContextShowGlyphsWithAdvances(
      c,
      glyphs,
      advances,
      count,
    );
  }

  late final _CGContextShowGlyphsWithAdvancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGContextRef,
              ffi.Pointer<CGGlyph>,
              ffi.Pointer<CGSize>,
              ffi.Size)>>('CGContextShowGlyphsWithAdvances');
  late final _CGContextShowGlyphsWithAdvances =
      _CGContextShowGlyphsWithAdvancesPtr.asFunction<
          void Function(
              CGContextRef, ffi.Pointer<CGGlyph>, ffi.Pointer<CGSize>, int)>();

  void CGContextDrawPDFDocument(
    CGContextRef c,
    CGRect rect,
    CGPDFDocumentRef document,
    int page,
  ) {
    return _CGContextDrawPDFDocument(
      c,
      rect,
      document,
      page,
    );
  }

  late final _CGContextDrawPDFDocumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CGRect, CGPDFDocumentRef,
              ffi.Int)>>('CGContextDrawPDFDocument');
  late final _CGContextDrawPDFDocument = _CGContextDrawPDFDocumentPtr
      .asFunction<void Function(CGContextRef, CGRect, CGPDFDocumentRef, int)>();

  CGContextRef CGBitmapContextCreateWithData(
    ffi.Pointer<ffi.Void> data,
    int width,
    int height,
    int bitsPerComponent,
    int bytesPerRow,
    CGColorSpaceRef space,
    int bitmapInfo,
    CGBitmapContextReleaseDataCallback releaseCallback,
    ffi.Pointer<ffi.Void> releaseInfo,
  ) {
    return _CGBitmapContextCreateWithData(
      data,
      width,
      height,
      bitsPerComponent,
      bytesPerRow,
      space,
      bitmapInfo,
      releaseCallback,
      releaseInfo,
    );
  }

  late final _CGBitmapContextCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CGContextRef Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              CGColorSpaceRef,
              ffi.Uint32,
              CGBitmapContextReleaseDataCallback,
              ffi.Pointer<ffi.Void>)>>('CGBitmapContextCreateWithData');
  late final _CGBitmapContextCreateWithData =
      _CGBitmapContextCreateWithDataPtr.asFunction<
          CGContextRef Function(
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              int,
              CGColorSpaceRef,
              int,
              CGBitmapContextReleaseDataCallback,
              ffi.Pointer<ffi.Void>)>();

  CGContextRef CGBitmapContextCreate(
    ffi.Pointer<ffi.Void> data,
    int width,
    int height,
    int bitsPerComponent,
    int bytesPerRow,
    CGColorSpaceRef space,
    int bitmapInfo,
  ) {
    return _CGBitmapContextCreate(
      data,
      width,
      height,
      bitsPerComponent,
      bytesPerRow,
      space,
      bitmapInfo,
    );
  }

  late final _CGBitmapContextCreatePtr = _lookup<
      ffi.NativeFunction<
          CGContextRef Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              CGColorSpaceRef,
              ffi.Uint32)>>('CGBitmapContextCreate');
  late final _CGBitmapContextCreate = _CGBitmapContextCreatePtr.asFunction<
      CGContextRef Function(
          ffi.Pointer<ffi.Void>, int, int, int, int, CGColorSpaceRef, int)>();

  ffi.Pointer<ffi.Void> CGBitmapContextGetData(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetData(
      context,
    );
  }

  late final _CGBitmapContextGetDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CGContextRef)>>(
          'CGBitmapContextGetData');
  late final _CGBitmapContextGetData = _CGBitmapContextGetDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CGContextRef)>();

  int CGBitmapContextGetWidth(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetWidth(
      context,
    );
  }

  late final _CGBitmapContextGetWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGContextRef)>>(
          'CGBitmapContextGetWidth');
  late final _CGBitmapContextGetWidth =
      _CGBitmapContextGetWidthPtr.asFunction<int Function(CGContextRef)>();

  int CGBitmapContextGetHeight(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetHeight(
      context,
    );
  }

  late final _CGBitmapContextGetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGContextRef)>>(
          'CGBitmapContextGetHeight');
  late final _CGBitmapContextGetHeight =
      _CGBitmapContextGetHeightPtr.asFunction<int Function(CGContextRef)>();

  int CGBitmapContextGetBitsPerComponent(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetBitsPerComponent(
      context,
    );
  }

  late final _CGBitmapContextGetBitsPerComponentPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGContextRef)>>(
          'CGBitmapContextGetBitsPerComponent');
  late final _CGBitmapContextGetBitsPerComponent =
      _CGBitmapContextGetBitsPerComponentPtr.asFunction<
          int Function(CGContextRef)>();

  int CGBitmapContextGetBitsPerPixel(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetBitsPerPixel(
      context,
    );
  }

  late final _CGBitmapContextGetBitsPerPixelPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGContextRef)>>(
          'CGBitmapContextGetBitsPerPixel');
  late final _CGBitmapContextGetBitsPerPixel =
      _CGBitmapContextGetBitsPerPixelPtr.asFunction<
          int Function(CGContextRef)>();

  int CGBitmapContextGetBytesPerRow(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetBytesPerRow(
      context,
    );
  }

  late final _CGBitmapContextGetBytesPerRowPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(CGContextRef)>>(
          'CGBitmapContextGetBytesPerRow');
  late final _CGBitmapContextGetBytesPerRow = _CGBitmapContextGetBytesPerRowPtr
      .asFunction<int Function(CGContextRef)>();

  CGColorSpaceRef CGBitmapContextGetColorSpace(
    CGContextRef context,
  ) {
    return _CGBitmapContextGetColorSpace(
      context,
    );
  }

  late final _CGBitmapContextGetColorSpacePtr =
      _lookup<ffi.NativeFunction<CGColorSpaceRef Function(CGContextRef)>>(
          'CGBitmapContextGetColorSpace');
  late final _CGBitmapContextGetColorSpace = _CGBitmapContextGetColorSpacePtr
      .asFunction<CGColorSpaceRef Function(CGContextRef)>();

  CGImageAlphaInfo CGBitmapContextGetAlphaInfo(
    CGContextRef context,
  ) {
    return CGImageAlphaInfo.fromValue(_CGBitmapContextGetAlphaInfo(
      context,
    ));
  }

  late final _CGBitmapContextGetAlphaInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGContextRef)>>(
          'CGBitmapContextGetAlphaInfo');
  late final _CGBitmapContextGetAlphaInfo =
      _CGBitmapContextGetAlphaInfoPtr.asFunction<int Function(CGContextRef)>();

  CGBitmapInfo CGBitmapContextGetBitmapInfo(
    CGContextRef context,
  ) {
    return CGBitmapInfo.fromValue(_CGBitmapContextGetBitmapInfo(
      context,
    ));
  }

  late final _CGBitmapContextGetBitmapInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CGContextRef)>>(
          'CGBitmapContextGetBitmapInfo');
  late final _CGBitmapContextGetBitmapInfo =
      _CGBitmapContextGetBitmapInfoPtr.asFunction<int Function(CGContextRef)>();

  CGImageRef CGBitmapContextCreateImage(
    CGContextRef context,
  ) {
    return _CGBitmapContextCreateImage(
      context,
    );
  }

  late final _CGBitmapContextCreateImagePtr =
      _lookup<ffi.NativeFunction<CGImageRef Function(CGContextRef)>>(
          'CGBitmapContextCreateImage');
  late final _CGBitmapContextCreateImage = _CGBitmapContextCreateImagePtr
      .asFunction<CGImageRef Function(CGContextRef)>();

  int CGColorConversionInfoGetTypeID() {
    return _CGColorConversionInfoGetTypeID();
  }

  late final _CGColorConversionInfoGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CGColorConversionInfoGetTypeID');
  late final _CGColorConversionInfoGetTypeID =
      _CGColorConversionInfoGetTypeIDPtr.asFunction<int Function()>();

  CGColorConversionInfoRef CGColorConversionInfoCreate(
    CGColorSpaceRef src,
    CGColorSpaceRef dst,
  ) {
    return _CGColorConversionInfoCreate(
      src,
      dst,
    );
  }

  late final _CGColorConversionInfoCreatePtr = _lookup<
      ffi.NativeFunction<
          CGColorConversionInfoRef Function(CGColorSpaceRef,
              CGColorSpaceRef)>>('CGColorConversionInfoCreate');
  late final _CGColorConversionInfoCreate =
      _CGColorConversionInfoCreatePtr.asFunction<
          CGColorConversionInfoRef Function(
              CGColorSpaceRef, CGColorSpaceRef)>();

  CGColorConversionInfoRef CGColorConversionInfoCreateWithOptions(
    CGColorSpaceRef src,
    CGColorSpaceRef dst,
    CFDictionaryRef options,
  ) {
    return _CGColorConversionInfoCreateWithOptions(
      src,
      dst,
      options,
    );
  }

  late final _CGColorConversionInfoCreateWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          CGColorConversionInfoRef Function(CGColorSpaceRef, CGColorSpaceRef,
              CFDictionaryRef)>>('CGColorConversionInfoCreateWithOptions');
  late final _CGColorConversionInfoCreateWithOptions =
      _CGColorConversionInfoCreateWithOptionsPtr.asFunction<
          CGColorConversionInfoRef Function(
              CGColorSpaceRef, CGColorSpaceRef, CFDictionaryRef)>();

  CGColorConversionInfoRef CGColorConversionInfoCreateFromList(
    CFDictionaryRef options,
    CGColorSpaceRef arg1,
    CGColorConversionInfoTransformType arg2,
    CGColorRenderingIntent arg3,
  ) {
    return _CGColorConversionInfoCreateFromList(
      options,
      arg1,
      arg2.value,
      arg3.value,
    );
  }

  late final _CGColorConversionInfoCreateFromListPtr = _lookup<
      ffi.NativeFunction<
          CGColorConversionInfoRef Function(CFDictionaryRef, CGColorSpaceRef,
              ffi.Uint32, ffi.Int32)>>('CGColorConversionInfoCreateFromList');
  late final _CGColorConversionInfoCreateFromList =
      _CGColorConversionInfoCreateFromListPtr.asFunction<
          CGColorConversionInfoRef Function(
              CFDictionaryRef, CGColorSpaceRef, int, int)>();

  CGColorConversionInfoRef CGColorConversionInfoCreateFromListWithArguments(
    CFDictionaryRef options,
    CGColorSpaceRef arg1,
    CGColorConversionInfoTransformType arg2,
    CGColorRenderingIntent arg3,
    va_list arg4,
  ) {
    return _CGColorConversionInfoCreateFromListWithArguments(
      options,
      arg1,
      arg2.value,
      arg3.value,
      arg4,
    );
  }

  late final _CGColorConversionInfoCreateFromListWithArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CGColorConversionInfoRef Function(
              CFDictionaryRef,
              CGColorSpaceRef,
              ffi.Uint32,
              ffi.Int32,
              va_list)>>('CGColorConversionInfoCreateFromListWithArguments');
  late final _CGColorConversionInfoCreateFromListWithArguments =
      _CGColorConversionInfoCreateFromListWithArgumentsPtr.asFunction<
          CGColorConversionInfoRef Function(
              CFDictionaryRef, CGColorSpaceRef, int, int, va_list)>();

  CGColorConversionInfoRef CGColorConversionInfoCreateForToneMapping(
    CGColorSpaceRef from,
    double source_headroom,
    CGColorSpaceRef to,
    double target_headroom,
    CGToneMapping method,
    CFDictionaryRef options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CGColorConversionInfoCreateForToneMapping(
      from,
      source_headroom,
      to,
      target_headroom,
      method.value,
      options,
      error,
    );
  }

  late final _CGColorConversionInfoCreateForToneMappingPtr = _lookup<
          ffi.NativeFunction<
              CGColorConversionInfoRef Function(
                  CGColorSpaceRef,
                  ffi.Float,
                  CGColorSpaceRef,
                  ffi.Float,
                  ffi.Uint32,
                  CFDictionaryRef,
                  ffi.Pointer<CFErrorRef>)>>(
      'CGColorConversionInfoCreateForToneMapping');
  late final _CGColorConversionInfoCreateForToneMapping =
      _CGColorConversionInfoCreateForToneMappingPtr.asFunction<
          CGColorConversionInfoRef Function(
              CGColorSpaceRef,
              double,
              CGColorSpaceRef,
              double,
              int,
              CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>();

  bool CGColorConversionInfoConvertData(
    CGColorConversionInfoRef info,
    int width,
    int height,
    ffi.Pointer<ffi.Void> dst_data,
    CGColorBufferFormat dst_format,
    ffi.Pointer<ffi.Void> src_data,
    CGColorBufferFormat src_format,
    CFDictionaryRef options,
  ) {
    return _CGColorConversionInfoConvertData(
      info,
      width,
      height,
      dst_data,
      dst_format,
      src_data,
      src_format,
      options,
    );
  }

  late final _CGColorConversionInfoConvertDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              CGColorConversionInfoRef,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              CGColorBufferFormat,
              ffi.Pointer<ffi.Void>,
              CGColorBufferFormat,
              CFDictionaryRef)>>('CGColorConversionInfoConvertData');
  late final _CGColorConversionInfoConvertData =
      _CGColorConversionInfoConvertDataPtr.asFunction<
          bool Function(
              CGColorConversionInfoRef,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              CGColorBufferFormat,
              ffi.Pointer<ffi.Void>,
              CGColorBufferFormat,
              CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef>
      _kCGColorConversionBlackPointCompensation =
      _lookup<CFStringRef>('kCGColorConversionBlackPointCompensation');

  CFStringRef get kCGColorConversionBlackPointCompensation =>
      _kCGColorConversionBlackPointCompensation.value;

  set kCGColorConversionBlackPointCompensation(CFStringRef value) =>
      _kCGColorConversionBlackPointCompensation.value = value;

  late final ffi.Pointer<CFStringRef> _kCGColorConversionTRCSize =
      _lookup<CFStringRef>('kCGColorConversionTRCSize');

  CFStringRef get kCGColorConversionTRCSize => _kCGColorConversionTRCSize.value;

  set kCGColorConversionTRCSize(CFStringRef value) =>
      _kCGColorConversionTRCSize.value = value;

  void __assert_rtn(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___assert_rtn(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___assert_rtnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('__assert_rtn');
  late final ___assert_rtn = ___assert_rtnPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<_RuneLocale> __DefaultRuneLocale =
      _lookup<_RuneLocale>('_DefaultRuneLocale');

  _RuneLocale get _DefaultRuneLocale => __DefaultRuneLocale.ref;

  late final ffi.Pointer<ffi.Pointer<_RuneLocale>> __CurrentRuneLocale =
      _lookup<ffi.Pointer<_RuneLocale>>('_CurrentRuneLocale');

  ffi.Pointer<_RuneLocale> get _CurrentRuneLocale => __CurrentRuneLocale.value;

  set _CurrentRuneLocale(ffi.Pointer<_RuneLocale> value) =>
      __CurrentRuneLocale.value = value;

  int ___runetype(
    int arg0,
  ) {
    return ____runetype(
      arg0,
    );
  }

  late final ____runetypePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(__darwin_ct_rune_t)>>(
      '___runetype');
  late final ____runetype = ____runetypePtr.asFunction<int Function(int)>();

  int ___tolower(
    int arg0,
  ) {
    return ____tolower(
      arg0,
    );
  }

  late final ____tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___tolower');
  late final ____tolower = ____tolowerPtr.asFunction<int Function(int)>();

  int ___toupper(
    int arg0,
  ) {
    return ____toupper(
      arg0,
    );
  }

  late final ____toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___toupper');
  late final ____toupper = ____toupperPtr.asFunction<int Function(int)>();

  int __maskrune(
    int arg0,
    int arg1,
  ) {
    return ___maskrune(
      arg0,
      arg1,
    );
  }

  late final ___maskrunePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __darwin_ct_rune_t, ffi.UnsignedLong)>>('__maskrune');
  late final ___maskrune = ___maskrunePtr.asFunction<int Function(int, int)>();

  int __toupper(
    int arg0,
  ) {
    return ___toupper$1(
      arg0,
    );
  }

  late final ___toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__toupper');
  late final ___toupper$1 = ___toupperPtr.asFunction<int Function(int)>();

  int __tolower(
    int arg0,
  ) {
    return ___tolower$1(
      arg0,
    );
  }

  late final ___tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__tolower');
  late final ___tolower$1 = ___tolowerPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __error() {
    return ___error();
  }

  late final ___errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__error');
  late final ___error =
      ___errorPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<lconv> localeconv() {
    return _localeconv();
  }

  late final _localeconvPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lconv> Function()>>('localeconv');
  late final _localeconv =
      _localeconvPtr.asFunction<ffi.Pointer<lconv> Function()>();

  ffi.Pointer<ffi.Char> setlocale(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setlocale(
      arg0,
      arg1,
    );
  }

  late final _setlocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('setlocale');
  late final _setlocale = _setlocalePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int __math_errhandling() {
    return ___math_errhandling();
  }

  late final ___math_errhandlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__math_errhandling');
  late final ___math_errhandling =
      ___math_errhandlingPtr.asFunction<int Function()>();

  int __fpclassifyf(
    double arg0,
  ) {
    return ___fpclassifyf(
      arg0,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __fpclassifyd(
    double arg0,
  ) {
    return ___fpclassifyd(
      arg0,
    );
  }

  late final ___fpclassifydPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          '__fpclassifyd');
  late final ___fpclassifyd =
      ___fpclassifydPtr.asFunction<int Function(double)>();

  double acosf(
    double arg0,
  ) {
    return _acosf(
      arg0,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acos(
    double arg0,
  ) {
    return _acos(
      arg0,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asinf(
    double arg0,
  ) {
    return _asinf(
      arg0,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asin(
    double arg0,
  ) {
    return _asin(
      arg0,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atanf(
    double arg0,
  ) {
    return _atanf(
      arg0,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan(
    double arg0,
  ) {
    return _atan(
      arg0,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2f(
    double arg0,
    double arg1,
  ) {
    return _atan2f(
      arg0,
      arg1,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atan2(
    double arg0,
    double arg1,
  ) {
    return _atan2(
      arg0,
      arg1,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cosf(
    double arg0,
  ) {
    return _cosf(
      arg0,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cos(
    double arg0,
  ) {
    return _cos(
      arg0,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sinf(
    double arg0,
  ) {
    return _sinf(
      arg0,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sin(
    double arg0,
  ) {
    return _sin(
      arg0,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tanf(
    double arg0,
  ) {
    return _tanf(
      arg0,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tan(
    double arg0,
  ) {
    return _tan(
      arg0,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double acoshf(
    double arg0,
  ) {
    return _acoshf(
      arg0,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double acosh(
    double arg0,
  ) {
    return _acosh(
      arg0,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinhf(
    double arg0,
  ) {
    return _asinhf(
      arg0,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double asinh(
    double arg0,
  ) {
    return _asinh(
      arg0,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanhf(
    double arg0,
  ) {
    return _atanhf(
      arg0,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double atanh(
    double arg0,
  ) {
    return _atanh(
      arg0,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double coshf(
    double arg0,
  ) {
    return _coshf(
      arg0,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double cosh(
    double arg0,
  ) {
    return _cosh(
      arg0,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinhf(
    double arg0,
  ) {
    return _sinhf(
      arg0,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sinh(
    double arg0,
  ) {
    return _sinh(
      arg0,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanhf(
    double arg0,
  ) {
    return _tanhf(
      arg0,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double tanh(
    double arg0,
  ) {
    return _tanh(
      arg0,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double expf(
    double arg0,
  ) {
    return _expf(
      arg0,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double exp(
    double arg0,
  ) {
    return _exp(
      arg0,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2f(
    double arg0,
  ) {
    return _exp2f(
      arg0,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double exp2(
    double arg0,
  ) {
    return _exp2(
      arg0,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1f(
    double arg0,
  ) {
    return _expm1f(
      arg0,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double expm1(
    double arg0,
  ) {
    return _expm1(
      arg0,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double logf(
    double arg0,
  ) {
    return _logf(
      arg0,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log(
    double arg0,
  ) {
    return _log(
      arg0,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10f(
    double arg0,
  ) {
    return _log10f(
      arg0,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log10(
    double arg0,
  ) {
    return _log10(
      arg0,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log2f(
    double arg0,
  ) {
    return _log2f(
      arg0,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double log2(
    double arg0,
  ) {
    return _log2(
      arg0,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log1pf(
    double arg0,
  ) {
    return _log1pf(
      arg0,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log1p(
    double arg0,
  ) {
    return _log1p(
      arg0,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logbf(
    double arg0,
  ) {
    return _logbf(
      arg0,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logb(
    double arg0,
  ) {
    return _logb(
      arg0,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double modff(
    double arg0,
    ffi.Pointer<ffi.Float> arg1,
  ) {
    return _modff(
      arg0,
      arg1,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double modf(
    double arg0,
    ffi.Pointer<ffi.Double> arg1,
  ) {
    return _modf(
      arg0,
      arg1,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double ldexpf(
    double arg0,
    int arg1,
  ) {
    return _ldexpf(
      arg0,
      arg1,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double ldexp(
    double arg0,
    int arg1,
  ) {
    return _ldexp(
      arg0,
      arg1,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double frexpf(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexpf(
      arg0,
      arg1,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double frexp(
    double arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _frexp(
      arg0,
      arg1,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  int ilogbf(
    double arg0,
  ) {
    return _ilogbf(
      arg0,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int ilogb(
    double arg0,
  ) {
    return _ilogb(
      arg0,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbnf(
    double arg0,
    int arg1,
  ) {
    return _scalbnf(
      arg0,
      arg1,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double arg0,
    int arg1,
  ) {
    return _scalbn(
      arg0,
      arg1,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double arg0,
    int arg1,
  ) {
    return _scalblnf(
      arg0,
      arg1,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbln(
    double arg0,
    int arg1,
  ) {
    return _scalbln(
      arg0,
      arg1,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double fabsf(
    double arg0,
  ) {
    return _fabsf(
      arg0,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double fabs(
    double arg0,
  ) {
    return _fabs(
      arg0,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double cbrtf(
    double arg0,
  ) {
    return _cbrtf(
      arg0,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double cbrt(
    double arg0,
  ) {
    return _cbrt(
      arg0,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double hypotf(
    double arg0,
    double arg1,
  ) {
    return _hypotf(
      arg0,
      arg1,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double hypot(
    double arg0,
    double arg1,
  ) {
    return _hypot(
      arg0,
      arg1,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double powf(
    double arg0,
    double arg1,
  ) {
    return _powf(
      arg0,
      arg1,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double pow(
    double arg0,
    double arg1,
  ) {
    return _pow(
      arg0,
      arg1,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double arg0,
  ) {
    return _sqrtf(
      arg0,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double sqrt(
    double arg0,
  ) {
    return _sqrt(
      arg0,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double ceilf(
    double arg0,
  ) {
    return _ceilf(
      arg0,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double ceil(
    double arg0,
  ) {
    return _ceil(
      arg0,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double floorf(
    double arg0,
  ) {
    return _floorf(
      arg0,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double floor(
    double arg0,
  ) {
    return _floor(
      arg0,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double arg0,
  ) {
    return _nearbyintf(
      arg0,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nearbyint(
    double arg0,
  ) {
    return _nearbyint(
      arg0,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double rintf(
    double arg0,
  ) {
    return _rintf(
      arg0,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double rint(
    double arg0,
  ) {
    return _rint(
      arg0,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  int lrintf(
    double arg0,
  ) {
    return _lrintf(
      arg0,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lrint(
    double arg0,
  ) {
    return _lrint(
      arg0,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  double roundf(
    double arg0,
  ) {
    return _roundf(
      arg0,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double round(
    double arg0,
  ) {
    return _round(
      arg0,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  int lroundf(
    double arg0,
  ) {
    return _lroundf(
      arg0,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int lround(
    double arg0,
  ) {
    return _lround(
      arg0,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llrintf(
    double arg0,
  ) {
    return _llrintf(
      arg0,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llrint(
    double arg0,
  ) {
    return _llrint(
      arg0,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llroundf(
    double arg0,
  ) {
    return _llroundf(
      arg0,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int llround(
    double arg0,
  ) {
    return _llround(
      arg0,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double truncf(
    double arg0,
  ) {
    return _truncf(
      arg0,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double trunc(
    double arg0,
  ) {
    return _trunc(
      arg0,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double fmodf(
    double arg0,
    double arg1,
  ) {
    return _fmodf(
      arg0,
      arg1,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double arg0,
    double arg1,
  ) {
    return _fmod(
      arg0,
      arg1,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double arg0,
    double arg1,
  ) {
    return _remainderf(
      arg0,
      arg1,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remainder(
    double arg0,
    double arg1,
  ) {
    return _remainder(
      arg0,
      arg1,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquof(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double remquo(
    double arg0,
    double arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _remquo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double copysignf(
    double arg0,
    double arg1,
  ) {
    return _copysignf(
      arg0,
      arg1,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysign(
    double arg0,
    double arg1,
  ) {
    return _copysign(
      arg0,
      arg1,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nanf(
      arg0,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nan(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _nan(
      arg0,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nextafterf(
    double arg0,
    double arg1,
  ) {
    return _nextafterf(
      arg0,
      arg1,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double nextafter(
    double arg0,
    double arg1,
  ) {
    return _nextafter(
      arg0,
      arg1,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double arg0,
    double arg1,
  ) {
    return _fdimf(
      arg0,
      arg1,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fdim(
    double arg0,
    double arg1,
  ) {
    return _fdim(
      arg0,
      arg1,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double arg0,
    double arg1,
  ) {
    return _fmaxf(
      arg0,
      arg1,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fmax(
    double arg0,
    double arg1,
  ) {
    return _fmax(
      arg0,
      arg1,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fminf(
    double arg0,
    double arg1,
  ) {
    return _fminf(
      arg0,
      arg1,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmin(
    double arg0,
    double arg1,
  ) {
    return _fmin(
      arg0,
      arg1,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fmaf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fma(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fma(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __exp10f(
    double arg0,
  ) {
    return ___exp10f(
      arg0,
    );
  }

  late final ___exp10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp10f');
  late final ___exp10f = ___exp10fPtr.asFunction<double Function(double)>();

  double __exp10(
    double arg0,
  ) {
    return ___exp10(
      arg0,
    );
  }

  late final ___exp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp10');
  late final ___exp10 = ___exp10Ptr.asFunction<double Function(double)>();

  double __cospif(
    double arg0,
  ) {
    return ___cospif(
      arg0,
    );
  }

  late final ___cospifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cospif');
  late final ___cospif = ___cospifPtr.asFunction<double Function(double)>();

  double __cospi(
    double arg0,
  ) {
    return ___cospi(
      arg0,
    );
  }

  late final ___cospiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cospi');
  late final ___cospi = ___cospiPtr.asFunction<double Function(double)>();

  double __sinpif(
    double arg0,
  ) {
    return ___sinpif(
      arg0,
    );
  }

  late final ___sinpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinpif');
  late final ___sinpif = ___sinpifPtr.asFunction<double Function(double)>();

  double __sinpi(
    double arg0,
  ) {
    return ___sinpi(
      arg0,
    );
  }

  late final ___sinpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinpi');
  late final ___sinpi = ___sinpiPtr.asFunction<double Function(double)>();

  double __tanpif(
    double arg0,
  ) {
    return ___tanpif(
      arg0,
    );
  }

  late final ___tanpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanpif');
  late final ___tanpif = ___tanpifPtr.asFunction<double Function(double)>();

  double __tanpi(
    double arg0,
  ) {
    return ___tanpi(
      arg0,
    );
  }

  late final ___tanpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanpi');
  late final ___tanpi = ___tanpiPtr.asFunction<double Function(double)>();

  __float2 __sincosf_stret(
    double arg0,
  ) {
    return ___sincosf_stret(
      arg0,
    );
  }

  late final ___sincosf_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincosf_stret');
  late final ___sincosf_stret =
      ___sincosf_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincos_stret(
    double arg0,
  ) {
    return ___sincos_stret(
      arg0,
    );
  }

  late final ___sincos_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincos_stret');
  late final ___sincos_stret =
      ___sincos_stretPtr.asFunction<__double2 Function(double)>();

  __float2 __sincospif_stret(
    double arg0,
  ) {
    return ___sincospif_stret(
      arg0,
    );
  }

  late final ___sincospif_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincospif_stret');
  late final ___sincospif_stret =
      ___sincospif_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincospi_stret(
    double arg0,
  ) {
    return ___sincospi_stret(
      arg0,
    );
  }

  late final ___sincospi_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincospi_stret');
  late final ___sincospi_stret =
      ___sincospi_stretPtr.asFunction<__double2 Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double scalb(
    double arg0,
    double arg1,
  ) {
    return _scalb(
      arg0,
      arg1,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int> _signgam = _lookup<ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  int setjmp(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _setjmp$1(
      arg0,
    );
  }

  late final _setjmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'setjmp');
  late final _setjmp$1 =
      _setjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  void longjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _longjmp$1(
      arg0,
      arg1,
    );
  }

  late final _longjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'longjmp');
  late final _longjmp$1 =
      _longjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int _setjmp(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return __setjmp(
      arg0,
    );
  }

  late final __setjmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          '_setjmp');
  late final __setjmp =
      __setjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  void _longjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return __longjmp(
      arg0,
      arg1,
    );
  }

  late final __longjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      '_longjmp');
  late final __longjmp =
      __longjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  int sigsetjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _sigsetjmp(
      arg0,
      arg1,
    );
  }

  late final _sigsetjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'sigsetjmp');
  late final _sigsetjmp =
      _sigsetjmpPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  void siglongjmp(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _siglongjmp(
      arg0,
      arg1,
    );
  }

  late final _siglongjmpPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'siglongjmp');
  late final _siglongjmp =
      _siglongjmpPtr.asFunction<void Function(ffi.Pointer<ffi.Int>, int)>();

  void longjmperror() {
    return _longjmperror();
  }

  late final _longjmperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('longjmperror');
  late final _longjmperror = _longjmperrorPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _sys_signame =
      _lookup<ffi.Pointer<ffi.Char>>('sys_signame');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_signame => _sys_signame;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Char>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_siglist => _sys_siglist;

  int raise(
    int arg0,
  ) {
    return _raise(
      arg0,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> bsd_signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _bsd_signal(
      arg0,
      arg1,
    );
  }

  late final _bsd_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Void Function(ffi.Int)>>)>>('bsd_signal');
  late final _bsd_signal = _bsd_signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int kill(
    int arg0,
    int arg1,
  ) {
    return _kill(
      arg0,
      arg1,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int arg0,
    int arg1,
  ) {
    return _killpg(
      arg0,
      arg1,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Int)>>('killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigaction$1(
    int arg0,
    ffi.Pointer<sigaction> arg1,
    ffi.Pointer<sigaction> arg2,
  ) {
    return _sigaction$1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigaction$1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction$1 = _sigaction$1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  late final _sigaddsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> arg0,
    ffi.Pointer<stack_t> arg1,
  ) {
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigdelset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  late final _sigdelsetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigemptyset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigemptyset(
      arg0,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigfillset(
      arg0,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sighold(
    int arg0,
  ) {
    return _sighold(
      arg0,
    );
  }

  late final _sigholdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sighold');
  late final _sighold = _sigholdPtr.asFunction<int Function(int)>();

  int sigignore(
    int arg0,
  ) {
    return _sigignore(
      arg0,
    );
  }

  late final _sigignorePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigignore');
  late final _sigignore = _sigignorePtr.asFunction<int Function(int)>();

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigismember(
      arg0,
      arg1,
    );
  }

  late final _sigismemberPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>, ffi.Int)>>(
      'sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigpause(
    int arg0,
  ) {
    return _sigpause(
      arg0,
    );
  }

  late final _sigpausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigpause');
  late final _sigpause = _sigpausePtr.asFunction<int Function(int)>();

  int sigpending(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigpending(
      arg0,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigprocmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigrelse(
    int arg0,
  ) {
    return _sigrelse(
      arg0,
    );
  }

  late final _sigrelsePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigrelse');
  late final _sigrelse = _sigrelsePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> sigset(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> arg1,
  ) {
    return _sigset(
      arg0,
      arg1,
    );
  }

  late final _sigsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>>('sigset');
  late final _sigset = _sigsetPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> Function(
          int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigsuspend(
      arg0,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _sigwait(
      arg0,
      arg1,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr
      .asFunction<int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int>)>();

  void psignal(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _psignal(
      arg0,
      arg1,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int sigblock(
    int arg0,
  ) {
    return _sigblock(
      arg0,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int arg0,
  ) {
    return _sigsetmask(
      arg0,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int sigvec$1(
    int arg0,
    ffi.Pointer<sigvec> arg1,
    ffi.Pointer<sigvec> arg2,
  ) {
    return _sigvec$1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigvec$1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>>('sigvec');
  late final _sigvec$1 = _sigvec$1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int printf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> gets(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('gets');
  late final _gets = _getsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void perror(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int remove(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, va_list)>>(
      'vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __str,
    int __size,
    ffi.Pointer<ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __linep,
    ffi.Pointer<ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufp,
    ffi.Pointer<ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  late final ffi.Pointer<ffi.Int> _sys_nerr = _lookup<ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid_r(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> fmtcheck(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Char>, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int, ffi.Size,
              ffi.Pointer<ffi.Char>, va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>,
          va_list)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rusage>)>>(
      'getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, id_t, ffi.Int)>>(
          'setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<rlimit>)>>(
      'setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait$1(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _wait$1(
      arg0,
    );
  }

  late final _wait$1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<ffi.Int>)>>('wait');
  late final _wait$1 =
      _wait$1Ptr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int)>>('waitpid');
  late final _waitpid =
      _waitpidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>, int)>();

  int waitid(
    idtype_t arg0,
    Dart__uint32_t arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0.value,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, id_t, ffi.Pointer<siginfo_t>,
              ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              ffi.Pointer<ffi.Int>, ffi.Int, ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<ffi.Int>, ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc_type_malloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_malloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_malloc');
  late final _malloc_type_malloc = _malloc_type_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_calloc(
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_calloc(
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, malloc_type_id_t)>>('malloc_type_calloc');
  late final _malloc_type_calloc = _malloc_type_callocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  void malloc_type_free(
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_free(
      ptr,
      type_id,
    );
  }

  late final _malloc_type_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, malloc_type_id_t)>>('malloc_type_free');
  late final _malloc_type_free = _malloc_type_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_realloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_realloc(
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_realloc');
  late final _malloc_type_realloc = _malloc_type_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_valloc(
    int size,
    int type_id,
  ) {
    return _malloc_type_valloc(
      size,
      type_id,
    );
  }

  late final _malloc_type_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, malloc_type_id_t)>>('malloc_type_valloc');
  late final _malloc_type_valloc = _malloc_type_vallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_aligned_alloc(
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_aligned_alloc(
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              malloc_type_id_t)>>('malloc_type_aligned_alloc');
  late final _malloc_type_aligned_alloc = _malloc_type_aligned_allocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int malloc_type_posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> memptr,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_posix_memalign(
      memptr,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_posix_memalign');
  late final _malloc_type_posix_memalign =
      _malloc_type_posix_memalignPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_malloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_malloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_malloc');
  late final _malloc_type_zone_malloc = _malloc_type_zone_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_calloc(
    ffi.Pointer<malloc_zone_t> zone,
    int count,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_calloc(
      zone,
      count,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_calloc');
  late final _malloc_type_zone_calloc = _malloc_type_zone_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<malloc_zone_t>, int, int, int)>();

  void malloc_type_zone_free(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int type_id,
  ) {
    return _malloc_type_zone_free(
      zone,
      ptr,
      type_id,
    );
  }

  late final _malloc_type_zone_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>,
              malloc_type_id_t)>>('malloc_type_zone_free');
  late final _malloc_type_zone_free = _malloc_type_zone_freePtr.asFunction<
      void Function(ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_realloc(
    ffi.Pointer<malloc_zone_t> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_realloc(
      zone,
      ptr,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_realloc');
  late final _malloc_type_zone_realloc =
      _malloc_type_zone_reallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_valloc(
    ffi.Pointer<malloc_zone_t> zone,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_valloc(
      zone,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_vallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              malloc_type_id_t)>>('malloc_type_zone_valloc');
  late final _malloc_type_zone_valloc = _malloc_type_zone_vallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, int, int)>();

  ffi.Pointer<ffi.Void> malloc_type_zone_memalign(
    ffi.Pointer<malloc_zone_t> zone,
    int alignment,
    int size,
    int type_id,
  ) {
    return _malloc_type_zone_memalign(
      zone,
      alignment,
      size,
      type_id,
    );
  }

  late final _malloc_type_zone_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<malloc_zone_t>, ffi.Size,
              ffi.Size, malloc_type_id_t)>>('malloc_type_zone_memalign');
  late final _malloc_type_zone_memalign =
      _malloc_type_zone_memalignPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<malloc_zone_t>, int, int, int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit$1(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit$1 = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void quick_exit(
    int arg0,
  ) {
    return _quick_exit(
      arg0,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int system(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  ffi.Pointer<ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ptsname_r');
  late final _ptsname_r =
      _ptsname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>, ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  int atexit_b(
    objc.ObjCBlock<ffi.Void Function()> arg0,
  ) {
    return _atexit_b(
      arg0.ref.pointer,
    );
  }

  late final _atexit_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>)>>('atexit_b');
  late final _atexit_b =
      _atexit_bPtr.asFunction<int Function(ffi.Pointer<objc.ObjCBlockImpl>)>();

  ffi.Pointer<ffi.Void> bsearch_b(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    objc.ObjCBlock<
            ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>
        __compar,
  ) {
    return _bsearch_b(
      __key,
      __base,
      __nel,
      __width,
      __compar.ref.pointer,
    );
  }

  late final _bsearch_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('bsearch_b');
  late final _bsearch_b = _bsearch_bPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlockImpl>)>();

  ffi.Pointer<ffi.Char> cgetcap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Long>)>();

  int cgetset(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dev_t, mode_t)>>(
      'devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              dev_t, mode_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getbsize(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int heapsort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    objc.ObjCBlock<
            ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>
        __compar,
  ) {
    return _heapsort_b(
      __base,
      __nel,
      __width,
      __compar.ref.pointer,
    );
  }

  late final _heapsort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('heapsort_b');
  late final _heapsort_b = _heapsort_bPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlockImpl>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    objc.ObjCBlock<
            ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>
        __compar,
  ) {
    return _mergesort_b(
      __base,
      __nel,
      __width,
      __compar.ref.pointer,
    );
  }

  late final _mergesort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('mergesort_b');
  late final _mergesort_b = _mergesort_bPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlockImpl>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    objc.ObjCBlock<
            ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>
        __compar,
  ) {
    return _psort_b(
      __base,
      __nel,
      __width,
      __compar.ref.pointer,
    );
  }

  late final _psort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('psort_b');
  late final _psort_b = _psort_bPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlockImpl>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  void qsort_b(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    objc.ObjCBlock<
            ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>
        __compar,
  ) {
    return _qsort_b(
      __base,
      __nel,
      __width,
      __compar.ref.pointer,
    );
  }

  late final _qsort_bPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('qsort_b');
  late final _qsort_b = _qsort_bPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<objc.ObjCBlockImpl>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, ffi.Int,
              ffi.Pointer<ffi.UnsignedChar>, ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>, int,
          ffi.Pointer<ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  int strtonum(
    ffi.Pointer<ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, ffi.LongLong,
              ffi.LongLong, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __str,
    ffi.Pointer<ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Void>, rsize_t, ffi.Int, rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strcasestr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strnstr(
    ffi.Pointer<ffi.Char> __big,
    ffi.Pointer<ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<ffi.Char> __dst,
    ffi.Pointer<ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int> _getdate_err =
      _lookup<ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>>(
      'getdate');
  late final _getdate =
      _getdatePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> strptime(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id.value,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  Dart__uint64_t clock_gettime_nsec_np(
    clockid_t __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id.value,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.UnsignedInt)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    clockid_t __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id.value,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  late final ffi.Pointer<CFBagCallBacks> _kCFTypeBagCallBacks =
      _lookup<CFBagCallBacks>('kCFTypeBagCallBacks');

  CFBagCallBacks get kCFTypeBagCallBacks => _kCFTypeBagCallBacks.ref;

  late final ffi.Pointer<CFBagCallBacks> _kCFCopyStringBagCallBacks =
      _lookup<CFBagCallBacks>('kCFCopyStringBagCallBacks');

  CFBagCallBacks get kCFCopyStringBagCallBacks =>
      _kCFCopyStringBagCallBacks.ref;

  int CFBagGetTypeID() {
    return _CFBagGetTypeID();
  }

  late final _CFBagGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID = _CFBagGetTypeIDPtr.asFunction<int Function()>();

  CFBagRef CFBagCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate = _CFBagCreatePtr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy = _CFBagCreateCopyPtr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable = _CFBagCreateMutablePtr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy = _CFBagCreateMutableCopyPtr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount(
      theBag,
    );
  }

  late final _CFBagGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount =
      _CFBagGetCountPtr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValuePtr = _lookup<
          ffi
          .NativeFunction<CFIndex Function(CFBagRef, ffi.Pointer<ffi.Void>)>>(
      'CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue = _CFBagGetCountOfValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValuePtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>)>>(
      'CFBagContainsValue');
  late final _CFBagContainsValue = _CFBagContainsValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue = _CFBagGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent = _CFBagGetValueIfPresentPtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues(
      theBag,
      values,
    );
  }

  late final _CFBagGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues = _CFBagGetValuesPtr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction = _CFBagApplyFunctionPtr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue(
      theBag,
      value,
    );
  }

  late final _CFBagAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue = _CFBagAddValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue = _CFBagReplaceValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue(
      theBag,
      value,
    );
  }

  late final _CFBagSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue = _CFBagSetValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue = _CFBagRemoveValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues(
      theBag,
    );
  }

  late final _CFBagRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues =
      _CFBagRemoveAllValuesPtr.asFunction<void Function(CFMutableBagRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFBinaryHeapGetTypeID() {
    return _CFBinaryHeapGetTypeID();
  }

  late final _CFBinaryHeapGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID =
      _CFBinaryHeapGetTypeIDPtr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate = _CFBinaryHeapCreatePtr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy = _CFBinaryHeapCreateCopyPtr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount(
      heap,
    );
  }

  late final _CFBinaryHeapGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount =
      _CFBinaryHeapGetCountPtr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue = _CFBinaryHeapGetCountOfValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue = _CFBinaryHeapContainsValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum = _CFBinaryHeapGetMinimumPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent =
      _CFBinaryHeapGetMinimumIfPresentPtr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues = _CFBinaryHeapGetValuesPtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction =
      _CFBinaryHeapApplyFunctionPtr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue = _CFBinaryHeapAddValuePtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue =
      _CFBinaryHeapRemoveMinimumValuePtr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues = _CFBinaryHeapRemoveAllValuesPtr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID() {
    return _CFBitVectorGetTypeID();
  }

  late final _CFBitVectorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID =
      _CFBitVectorGetTypeIDPtr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate = _CFBitVectorCreatePtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy = _CFBitVectorCreateCopyPtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable = _CFBitVectorCreateMutablePtr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy =
      _CFBitVectorCreateMutableCopyPtr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount(
      bv,
    );
  }

  late final _CFBitVectorGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount =
      _CFBitVectorGetCountPtr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit = _CFBitVectorGetCountOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBitPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit = _CFBitVectorContainsBitPtr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndexPtr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex = _CFBitVectorGetBitAtIndexPtr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits = _CFBitVectorGetBitsPtr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit = _CFBitVectorGetFirstIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit = _CFBitVectorGetLastIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFIndex)>>(
      'CFBitVectorSetCount');
  late final _CFBitVectorSetCount = _CFBitVectorSetCountPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFIndex)>>(
      'CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex = _CFBitVectorFlipBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBitsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFRange)>>(
      'CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits = _CFBitVectorFlipBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex = _CFBitVectorSetBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits = _CFBitVectorSetBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits = _CFBitVectorSetAllBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  int CFTimeZoneGetTypeID() {
    return _CFTimeZoneGetTypeID();
  }

  late final _CFTimeZoneGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID =
      _CFTimeZoneGetTypeIDPtr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem() {
    return _CFTimeZoneCopySystem();
  }

  late final _CFTimeZoneCopySystemPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem =
      _CFTimeZoneCopySystemPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem() {
    return _CFTimeZoneResetSystem();
  }

  late final _CFTimeZoneResetSystemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem =
      _CFTimeZoneResetSystemPtr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault() {
    return _CFTimeZoneCopyDefault();
  }

  late final _CFTimeZoneCopyDefaultPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault =
      _CFTimeZoneCopyDefaultPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault(
      tz,
    );
  }

  late final _CFTimeZoneSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault =
      _CFTimeZoneSetDefaultPtr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames() {
    return _CFTimeZoneCopyKnownNames();
  }

  late final _CFTimeZoneCopyKnownNamesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames =
      _CFTimeZoneCopyKnownNamesPtr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary() {
    return _CFTimeZoneCopyAbbreviationDictionary();
  }

  late final _CFTimeZoneCopyAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary =
      _CFTimeZoneCopyAbbreviationDictionaryPtr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary =
      _CFTimeZoneSetAbbreviationDictionaryPtr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate = _CFTimeZoneCreatePtr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT =
      _CFTimeZoneCreateWithTimeIntervalFromGMTPtr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithNamePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName = _CFTimeZoneCreateWithNamePtr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName(
      tz,
    );
  }

  late final _CFTimeZoneGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName =
      _CFTimeZoneGetNamePtr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData(
      tz,
    );
  }

  late final _CFTimeZoneGetDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData =
      _CFTimeZoneGetDataPtr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT = _CFTimeZoneGetSecondsFromGMTPtr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviationPtr = _lookup<
          ffi
          .NativeFunction<CFStringRef Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation = _CFTimeZoneCopyAbbreviationPtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTimePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime =
      _CFTimeZoneIsDaylightSavingTimePtr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffsetPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset =
      _CFTimeZoneGetDaylightSavingTimeOffsetPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition =
      _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName(
    CFTimeZoneRef tz,
    CFTimeZoneNameStyle style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName(
      tz,
      style.value,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedNamePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, CFIndex,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName = _CFTimeZoneCopyLocalizedNamePtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFTimeZoneSystemTimeZoneDidChangeNotification');

  CFNotificationName get kCFTimeZoneSystemTimeZoneDidChangeNotification =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value;

  int CFCalendarGetTypeID() {
    return _CFCalendarGetTypeID();
  }

  late final _CFCalendarGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID =
      _CFCalendarGetTypeIDPtr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent() {
    return _CFCalendarCopyCurrent();
  }

  late final _CFCalendarCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent =
      _CFCalendarCopyCurrentPtr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifierPtr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier =
      _CFCalendarCreateWithIdentifierPtr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier = _CFCalendarGetIdentifierPtr.asFunction<
      CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale(
      calendar,
    );
  }

  late final _CFCalendarCopyLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale = _CFCalendarCopyLocalePtr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale = _CFCalendarSetLocalePtr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZonePtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone = _CFCalendarCopyTimeZonePtr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZonePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone = _CFCalendarSetTimeZonePtr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday =
      _CFCalendarGetFirstWeekdayPtr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday = _CFCalendarSetFirstWeekdayPtr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek =
      _CFCalendarGetMinimumDaysInFirstWeekPtr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek =
      _CFCalendarSetMinimumDaysInFirstWeekPtr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit(
      calendar,
      unit.value,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFOptionFlags)>>(
      'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit =
      _CFCalendarGetMinimumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit(
      calendar,
      unit.value,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFOptionFlags)>>(
      'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit =
      _CFCalendarGetMaximumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit smallerUnit,
    CFCalendarUnit biggerUnit,
    DartCFTimeInterval at,
  ) {
    return _CFCalendarGetRangeOfUnit(
      calendar,
      smallerUnit.value,
      biggerUnit.value,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, CFOptionFlags, CFOptionFlags,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit = _CFCalendarGetRangeOfUnitPtr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  DartCFIndex CFCalendarGetOrdinalityOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit smallerUnit,
    CFCalendarUnit biggerUnit,
    DartCFTimeInterval at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit(
      calendar,
      smallerUnit.value,
      biggerUnit.value,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, CFOptionFlags, CFOptionFlags,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit = _CFCalendarGetOrdinalityOfUnitPtr
      .asFunction<int Function(CFCalendarRef, int, int, double)>();

  DartBoolean CFCalendarGetTimeRangeOfUnit(
    CFCalendarRef calendar,
    CFCalendarUnit unit,
    DartCFTimeInterval at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit(
      calendar,
      unit.value,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFOptionFlags,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit =
      _CFCalendarGetTimeRangeOfUnitPtr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime =
      _CFCalendarComposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime =
      _CFCalendarDecomposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<ffi.Char>)>();

  int CFCalendarAddComponents(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponentsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents = _CFCalendarAddComponentsPtr.asFunction<
      int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
          ffi.Pointer<ffi.Char>)>();

  int CFCalendarGetComponentDifference(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifferencePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference =
      _CFCalendarGetComponentDifferencePtr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    CFAllocatorRef allocator,
    CFISO8601DateFormatOptions formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions.value,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef,
              CFOptionFlags)>>('CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    CFDateFormatterStyle dateStyle,
    CFDateFormatterStyle timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle.value,
      timeStyle.value,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, CFIndex,
              CFIndex)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  CFDateFormatterStyle CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return CFDateFormatterStyle.fromValue(_CFDateFormatterGetDateStyle(
      formatter,
    ));
  }

  late final _CFDateFormatterGetDateStylePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFDateFormatterStyle CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return CFDateFormatterStyle.fromValue(_CFDateFormatterGetTimeStyle(
      formatter,
    ));
  }

  late final _CFDateFormatterGetTimeStylePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CFDateFormatterRef, CFStringRef)>>(
      'CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanFalse =
      _lookup<CFBooleanRef>('kCFBooleanFalse');

  CFBooleanRef get kCFBooleanFalse => _kCFBooleanFalse.value;

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  int CFBooleanGetValue(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<int Function(CFBooleanRef)>();

  late final ffi.Pointer<CFNumberRef> _kCFNumberPositiveInfinity =
      _lookup<CFNumberRef>('kCFNumberPositiveInfinity');

  CFNumberRef get kCFNumberPositiveInfinity => _kCFNumberPositiveInfinity.value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNegativeInfinity =
      _lookup<CFNumberRef>('kCFNumberNegativeInfinity');

  CFNumberRef get kCFNumberNegativeInfinity => _kCFNumberNegativeInfinity.value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNaN =
      _lookup<CFNumberRef>('kCFNumberNaN');

  CFNumberRef get kCFNumberNaN => _kCFNumberNaN.value;

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate(
    CFAllocatorRef allocator,
    CFNumberType theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate(
      allocator,
      theType.value,
      valuePtr,
    );
  }

  late final _CFNumberCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate = _CFNumberCreatePtr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  CFNumberType CFNumberGetType(
    CFNumberRef number,
  ) {
    return CFNumberType.fromValue(_CFNumberGetType(
      number,
    ));
  }

  late final _CFNumberGetTypePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType =
      _CFNumberGetTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize(
      number,
    );
  }

  late final _CFNumberGetByteSizePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize =
      _CFNumberGetByteSizePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType(
      number,
    );
  }

  late final _CFNumberIsFloatTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType =
      _CFNumberIsFloatTypePtr.asFunction<int Function(CFNumberRef)>();

  DartBoolean CFNumberGetValue(
    CFNumberRef number,
    CFNumberType theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType.value,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  CFComparisonResult CFNumberCompare(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return CFComparisonResult.fromValue(_CFNumberCompare(
      number,
      otherNumber,
      context,
    ));
  }

  late final _CFNumberComparePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare = _CFNumberComparePtr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID() {
    return _CFNumberFormatterGetTypeID();
  }

  late final _CFNumberFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID =
      _CFNumberFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    CFNumberFormatterStyle style,
  ) {
    return _CFNumberFormatterCreate(
      allocator,
      locale,
      style.value,
    );
  }

  late final _CFNumberFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              CFIndex)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate = _CFNumberFormatterCreatePtr.asFunction<
      CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale = _CFNumberFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  CFNumberFormatterStyle CFNumberFormatterGetStyle(
    CFNumberFormatterRef formatter,
  ) {
    return CFNumberFormatterStyle.fromValue(_CFNumberFormatterGetStyle(
      formatter,
    ));
  }

  late final _CFNumberFormatterGetStylePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle = _CFNumberFormatterGetStylePtr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat = _CFNumberFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat = _CFNumberFormatterSetFormatPtr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumberPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber =
      _CFNumberFormatterCreateStringWithNumberPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberType numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue(
      allocator,
      formatter,
      numberType.value,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValuePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  CFIndex, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue =
      _CFNumberFormatterCreateStringWithValuePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString =
      _CFNumberFormatterCreateNumberFromStringPtr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  DartBoolean CFNumberFormatterGetValueFromString(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    CFNumberType numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString(
      formatter,
      string,
      rangep,
      numberType.value,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString =
      _CFNumberFormatterGetValueFromStringPtr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty =
      _CFNumberFormatterSetPropertyPtr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty =
      _CFNumberFormatterCopyPropertyPtr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterCurrencyCode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencyCode');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyCode =>
      _kCFNumberFormatterCurrencyCode.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDecimalSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterDecimalSeparator =>
      _kCFNumberFormatterDecimalSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyDecimalSeparator =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterAlwaysShowDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterAlwaysShowDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterAlwaysShowDecimalSeparator =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSeparator =>
      _kCFNumberFormatterGroupingSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterUseGroupingSeparator =>
      _kCFNumberFormatterUseGroupingSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPercentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPercentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPercentSymbol =>
      _kCFNumberFormatterPercentSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterZeroSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterZeroSymbol');

  CFNumberFormatterKey get kCFNumberFormatterZeroSymbol =>
      _kCFNumberFormatterZeroSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterNaNSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNaNSymbol');

  CFNumberFormatterKey get kCFNumberFormatterNaNSymbol =>
      _kCFNumberFormatterNaNSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInfinitySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterInfinitySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInfinitySymbol =>
      _kCFNumberFormatterInfinitySymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMinusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinusSign');

  CFNumberFormatterKey get kCFNumberFormatterMinusSign =>
      _kCFNumberFormatterMinusSign.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterPlusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPlusSign');

  CFNumberFormatterKey get kCFNumberFormatterPlusSign =>
      _kCFNumberFormatterPlusSign.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterCurrencySymbol =>
      _kCFNumberFormatterCurrencySymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterExponentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterExponentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterExponentSymbol =>
      _kCFNumberFormatterExponentSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinIntegerDigits =>
      _kCFNumberFormatterMinIntegerDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxIntegerDigits =>
      _kCFNumberFormatterMaxIntegerDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinFractionDigits =>
      _kCFNumberFormatterMinFractionDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxFractionDigits =>
      _kCFNumberFormatterMaxFractionDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSize =>
      _kCFNumberFormatterGroupingSize.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterSecondaryGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterSecondaryGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterSecondaryGroupingSize =>
      _kCFNumberFormatterSecondaryGroupingSize.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterRoundingMode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingMode');

  CFNumberFormatterKey get kCFNumberFormatterRoundingMode =>
      _kCFNumberFormatterRoundingMode.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterRoundingIncrement =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingIncrement');

  CFNumberFormatterKey get kCFNumberFormatterRoundingIncrement =>
      _kCFNumberFormatterRoundingIncrement.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterFormatWidth =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterFormatWidth');

  CFNumberFormatterKey get kCFNumberFormatterFormatWidth =>
      _kCFNumberFormatterFormatWidth.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingPosition =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingPosition');

  CFNumberFormatterKey get kCFNumberFormatterPaddingPosition =>
      _kCFNumberFormatterPaddingPosition.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingCharacter =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingCharacter');

  CFNumberFormatterKey get kCFNumberFormatterPaddingCharacter =>
      _kCFNumberFormatterPaddingCharacter.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDefaultFormat =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDefaultFormat');

  CFNumberFormatterKey get kCFNumberFormatterDefaultFormat =>
      _kCFNumberFormatterDefaultFormat.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMultiplier =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMultiplier');

  CFNumberFormatterKey get kCFNumberFormatterMultiplier =>
      _kCFNumberFormatterMultiplier.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositivePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositivePrefix');

  CFNumberFormatterKey get kCFNumberFormatterPositivePrefix =>
      _kCFNumberFormatterPositivePrefix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositiveSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositiveSuffix');

  CFNumberFormatterKey get kCFNumberFormatterPositiveSuffix =>
      _kCFNumberFormatterPositiveSuffix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativePrefix');

  CFNumberFormatterKey get kCFNumberFormatterNegativePrefix =>
      _kCFNumberFormatterNegativePrefix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativeSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativeSuffix');

  CFNumberFormatterKey get kCFNumberFormatterNegativeSuffix =>
      _kCFNumberFormatterNegativeSuffix.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPerMillSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPerMillSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPerMillSymbol =>
      _kCFNumberFormatterPerMillSymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInternationalCurrencySymbol =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterInternationalCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInternationalCurrencySymbol =>
      _kCFNumberFormatterInternationalCurrencySymbol.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyGroupingSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyGroupingSeparator =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterIsLenient =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterIsLenient');

  CFNumberFormatterKey get kCFNumberFormatterIsLenient =>
      _kCFNumberFormatterIsLenient.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterUseSignificantDigits =>
      _kCFNumberFormatterUseSignificantDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinSignificantDigits =>
      _kCFNumberFormatterMinSignificantDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxSignificantDigits =>
      _kCFNumberFormatterMaxSignificantDigits.value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinGroupingDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinGroupingDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinGroupingDigits =>
      _kCFNumberFormatterMinGroupingDigits.value;

  int CFNumberFormatterGetDecimalInfoForCurrencyCode(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode =
      _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyApplication =
      _lookup<CFStringRef>('kCFPreferencesAnyApplication');

  CFStringRef get kCFPreferencesAnyApplication =>
      _kCFPreferencesAnyApplication.value;

  set kCFPreferencesAnyApplication(CFStringRef value) =>
      _kCFPreferencesAnyApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentApplication =
      _lookup<CFStringRef>('kCFPreferencesCurrentApplication');

  CFStringRef get kCFPreferencesCurrentApplication =>
      _kCFPreferencesCurrentApplication.value;

  set kCFPreferencesCurrentApplication(CFStringRef value) =>
      _kCFPreferencesCurrentApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyHost =
      _lookup<CFStringRef>('kCFPreferencesAnyHost');

  CFStringRef get kCFPreferencesAnyHost => _kCFPreferencesAnyHost.value;

  set kCFPreferencesAnyHost(CFStringRef value) =>
      _kCFPreferencesAnyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentHost =
      _lookup<CFStringRef>('kCFPreferencesCurrentHost');

  CFStringRef get kCFPreferencesCurrentHost => _kCFPreferencesCurrentHost.value;

  set kCFPreferencesCurrentHost(CFStringRef value) =>
      _kCFPreferencesCurrentHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyUser =
      _lookup<CFStringRef>('kCFPreferencesAnyUser');

  CFStringRef get kCFPreferencesAnyUser => _kCFPreferencesAnyUser.value;

  set kCFPreferencesAnyUser(CFStringRef value) =>
      _kCFPreferencesAnyUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentUser =
      _lookup<CFStringRef>('kCFPreferencesCurrentUser');

  CFStringRef get kCFPreferencesCurrentUser => _kCFPreferencesCurrentUser.value;

  set kCFPreferencesCurrentUser(CFStringRef value) =>
      _kCFPreferencesCurrentUser.value = value;

  CFPropertyListRef CFPreferencesCopyAppValue(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue = _CFPreferencesCopyAppValuePtr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue =
      _CFPreferencesGetAppBooleanValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue =
      _CFPreferencesGetAppIntegerValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue = _CFPreferencesSetAppValuePtr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp =
      _CFPreferencesAddSuitePreferencesToAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp =
      _CFPreferencesRemoveSuitePreferencesFromAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronizePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize =
      _CFPreferencesAppSynchronizePtr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue = _CFPreferencesCopyValuePtr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiplePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple =
      _CFPreferencesCopyMultiplePtr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue = _CFPreferencesSetValuePtr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple =
      _CFPreferencesSetMultiplePtr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronizePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize = _CFPreferencesSynchronizePtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationListPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList =
      _CFPreferencesCopyApplicationListPtr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyListPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList = _CFPreferencesCopyKeyListPtr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForcedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced = _CFPreferencesAppValueIsForcedPtr
      .asFunction<int Function(CFStringRef, CFStringRef)>();

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopDefaultMode =
      _lookup<CFRunLoopMode>('kCFRunLoopDefaultMode');

  CFRunLoopMode get kCFRunLoopDefaultMode => _kCFRunLoopDefaultMode.value;

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopCommonModes =
      _lookup<CFRunLoopMode>('kCFRunLoopCommonModes');

  CFRunLoopMode get kCFRunLoopCommonModes => _kCFRunLoopCommonModes.value;

  int CFRunLoopGetTypeID() {
    return _CFRunLoopGetTypeID();
  }

  late final _CFRunLoopGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID =
      _CFRunLoopGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGetMain();
  }

  late final _CFRunLoopGetMainPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain =
      _CFRunLoopGetMainPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentModePtr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode = _CFRunLoopCopyCurrentModePtr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes =
      _CFRunLoopCopyAllModesPtr.asFunction<CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonModePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode = _CFRunLoopAddCommonModePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDatePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate = _CFRunLoopGetNextTimerFireDatePtr
      .asFunction<double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun() {
    return _CFRunLoopRun();
  }

  late final _CFRunLoopRunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun = _CFRunLoopRunPtr.asFunction<void Function()>();

  CFRunLoopRunResult CFRunLoopRunInMode(
    CFRunLoopMode mode,
    DartCFTimeInterval seconds,
    DartBoolean returnAfterSourceHandled,
  ) {
    return CFRunLoopRunResult.fromValue(_CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    ));
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting(
      rl,
    );
  }

  late final _CFRunLoopIsWaitingPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting =
      _CFRunLoopIsWaitingPtr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp(
      rl,
    );
  }

  late final _CFRunLoopWakeUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp =
      _CFRunLoopWakeUpPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop(
      rl,
    );
  }

  late final _CFRunLoopStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop =
      _CFRunLoopStopPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopPerformBlock(
    CFRunLoopRef rl,
    CFTypeRef mode,
    objc.ObjCBlock<ffi.Void Function()> block,
  ) {
    return _CFRunLoopPerformBlock(
      rl,
      mode,
      block.ref.pointer,
    );
  }

  late final _CFRunLoopPerformBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFTypeRef,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('CFRunLoopPerformBlock');
  late final _CFRunLoopPerformBlock = _CFRunLoopPerformBlockPtr.asFunction<
      void Function(
          CFRunLoopRef, CFTypeRef, ffi.Pointer<objc.ObjCBlockImpl>)>();

  int CFRunLoopContainsSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource = _CFRunLoopContainsSourcePtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource = _CFRunLoopRemoveSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserverPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver =
      _CFRunLoopContainsObserverPtr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver = _CFRunLoopAddObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver = _CFRunLoopRemoveObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer = _CFRunLoopContainsTimerPtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer = _CFRunLoopAddTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer = _CFRunLoopRemoveTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID() {
    return _CFRunLoopSourceGetTypeID();
  }

  late final _CFRunLoopSourceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID =
      _CFRunLoopSourceGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate = _CFRunLoopSourceCreatePtr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder = _CFRunLoopSourceGetOrderPtr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate = _CFRunLoopSourceInvalidatePtr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid(
      source,
    );
  }

  late final _CFRunLoopSourceIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid =
      _CFRunLoopSourceIsValidPtr.asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext =
      _CFRunLoopSourceGetContextPtr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal(
      source,
    );
  }

  late final _CFRunLoopSourceSignalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal =
      _CFRunLoopSourceSignalPtr.asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID() {
    return _CFRunLoopObserverGetTypeID();
  }

  late final _CFRunLoopObserverGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID =
      _CFRunLoopObserverGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreatePtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate = _CFRunLoopObserverCreatePtr.asFunction<
      CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
          CFRunLoopObserverCallBack, ffi.Pointer<CFRunLoopObserverContext>)>();

  CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(
    CFAllocatorRef allocator,
    DartCFOptionFlags activities,
    DartBoolean repeats,
    DartCFIndex order,
    objc.ObjCBlock<
            ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>
        block,
  ) {
    return _CFRunLoopObserverCreateWithHandler(
      allocator,
      activities,
      repeats,
      order,
      block.ref.pointer,
    );
  }

  late final _CFRunLoopObserverCreateWithHandlerPtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(CFAllocatorRef, CFOptionFlags,
                  Boolean, CFIndex, ffi.Pointer<objc.ObjCBlockImpl>)>>(
      'CFRunLoopObserverCreateWithHandler');
  late final _CFRunLoopObserverCreateWithHandler =
      _CFRunLoopObserverCreateWithHandlerPtr.asFunction<
          CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
              ffi.Pointer<objc.ObjCBlockImpl>)>();

  int CFRunLoopObserverGetActivities(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivitiesPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities =
      _CFRunLoopObserverGetActivitiesPtr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat = _CFRunLoopObserverDoesRepeatPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder = _CFRunLoopObserverGetOrderPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate = _CFRunLoopObserverInvalidatePtr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid = _CFRunLoopObserverIsValidPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext =
      _CFRunLoopObserverGetContextPtr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID() {
    return _CFRunLoopTimerGetTypeID();
  }

  late final _CFRunLoopTimerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID =
      _CFRunLoopTimerGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate = _CFRunLoopTimerCreatePtr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(
    CFAllocatorRef allocator,
    DartCFTimeInterval fireDate,
    DartCFTimeInterval interval,
    DartCFOptionFlags flags,
    DartCFIndex order,
    objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)> block,
  ) {
    return _CFRunLoopTimerCreateWithHandler(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      block.ref.pointer,
    );
  }

  late final _CFRunLoopTimerCreateWithHandlerPtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopTimerRef Function(
                  CFAllocatorRef,
                  CFAbsoluteTime,
                  CFTimeInterval,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<objc.ObjCBlockImpl>)>>(
      'CFRunLoopTimerCreateWithHandler');
  late final _CFRunLoopTimerCreateWithHandler =
      _CFRunLoopTimerCreateWithHandlerPtr.asFunction<
          CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
              ffi.Pointer<objc.ObjCBlockImpl>)>();

  double CFRunLoopTimerGetNextFireDate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDatePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate = _CFRunLoopTimerGetNextFireDatePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate = _CFRunLoopTimerSetNextFireDatePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval(
      timer,
    );
  }

  late final _CFRunLoopTimerGetIntervalPtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval = _CFRunLoopTimerGetIntervalPtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat = _CFRunLoopTimerDoesRepeatPtr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder =
      _CFRunLoopTimerGetOrderPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate = _CFRunLoopTimerInvalidatePtr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid =
      _CFRunLoopTimerIsValidPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext =
      _CFRunLoopTimerGetContextPtr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerancePtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance = _CFRunLoopTimerGetTolerancePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance = _CFRunLoopTimerSetTolerancePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID() {
    return _CFSocketGetTypeID();
  }

  late final _CFSocketGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID =
      _CFSocketGetTypeIDPtr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate = _CFSocketCreatePtr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNativePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative =
      _CFSocketCreateWithNativePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature =
      _CFSocketCreateWithSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignaturePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature =
      _CFSocketCreateConnectedToSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  CFSocketError CFSocketSetAddress(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return CFSocketError.fromValue(_CFSocketSetAddress(
      s,
      address,
    ));
  }

  late final _CFSocketSetAddressPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSocketRef, CFDataRef)>>(
          'CFSocketSetAddress');
  late final _CFSocketSetAddress =
      _CFSocketSetAddressPtr.asFunction<int Function(CFSocketRef, CFDataRef)>();

  CFSocketError CFSocketConnectToAddress(
    CFSocketRef s,
    CFDataRef address,
    DartCFTimeInterval timeout,
  ) {
    return CFSocketError.fromValue(_CFSocketConnectToAddress(
      s,
      address,
      timeout,
    ));
  }

  late final _CFSocketConnectToAddressPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress = _CFSocketConnectToAddressPtr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate(
      s,
    );
  }

  late final _CFSocketInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate =
      _CFSocketInvalidatePtr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid(
      s,
    );
  }

  late final _CFSocketIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid =
      _CFSocketIsValidPtr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress(
      s,
    );
  }

  late final _CFSocketCopyAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress =
      _CFSocketCopyAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress(
      s,
    );
  }

  late final _CFSocketCopyPeerAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress =
      _CFSocketCopyPeerAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext(
      s,
      context,
    );
  }

  late final _CFSocketGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext = _CFSocketGetContextPtr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative(
      s,
    );
  }

  late final _CFSocketGetNativePtr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative =
      _CFSocketGetNativePtr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource =
      _CFSocketCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags(
      s,
    );
  }

  late final _CFSocketGetSocketFlagsPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags =
      _CFSocketGetSocketFlagsPtr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags =
      _CFSocketSetSocketFlagsPtr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks = _CFSocketDisableCallBacksPtr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks =
      _CFSocketEnableCallBacksPtr.asFunction<void Function(CFSocketRef, int)>();

  CFSocketError CFSocketSendData(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    DartCFTimeInterval timeout,
  ) {
    return CFSocketError.fromValue(_CFSocketSendData(
      s,
      address,
      data,
      timeout,
    ));
  }

  late final _CFSocketSendDataPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData = _CFSocketSendDataPtr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  CFSocketError CFSocketRegisterValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return CFSocketError.fromValue(_CFSocketRegisterValue(
      nameServerSignature,
      timeout,
      name,
      value,
    ));
  }

  late final _CFSocketRegisterValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue = _CFSocketRegisterValuePtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  CFSocketError CFSocketCopyRegisteredValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return CFSocketError.fromValue(_CFSocketCopyRegisteredValue(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    ));
  }

  late final _CFSocketCopyRegisteredValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue =
      _CFSocketCopyRegisteredValuePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  CFSocketError CFSocketRegisterSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return CFSocketError.fromValue(_CFSocketRegisterSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
    ));
  }

  late final _CFSocketRegisterSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
                  CFStringRef, ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature =
      _CFSocketRegisterSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  CFSocketError CFSocketCopyRegisteredSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return CFSocketError.fromValue(_CFSocketCopyRegisteredSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    ));
  }

  late final _CFSocketCopyRegisteredSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature =
      _CFSocketCopyRegisteredSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  CFSocketError CFSocketUnregister(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    DartCFTimeInterval timeout,
    CFStringRef name,
  ) {
    return CFSocketError.fromValue(_CFSocketUnregister(
      nameServerSignature,
      timeout,
      name,
    ));
  }

  late final _CFSocketUnregisterPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister = _CFSocketUnregisterPtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber =
      _CFSocketSetDefaultNameRegistryPortNumberPtr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber() {
    return _CFSocketGetDefaultNameRegistryPortNumber();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber =
      _CFSocketGetDefaultNameRegistryPortNumberPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCFSocketCommandKey =
      _lookup<CFStringRef>('kCFSocketCommandKey');

  CFStringRef get kCFSocketCommandKey => _kCFSocketCommandKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketNameKey =
      _lookup<CFStringRef>('kCFSocketNameKey');

  CFStringRef get kCFSocketNameKey => _kCFSocketNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketValueKey =
      _lookup<CFStringRef>('kCFSocketValueKey');

  CFStringRef get kCFSocketValueKey => _kCFSocketValueKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketResultKey =
      _lookup<CFStringRef>('kCFSocketResultKey');

  CFStringRef get kCFSocketResultKey => _kCFSocketResultKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketErrorKey =
      _lookup<CFStringRef>('kCFSocketErrorKey');

  CFStringRef get kCFSocketErrorKey => _kCFSocketErrorKey.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRegisterCommand =
      _lookup<CFStringRef>('kCFSocketRegisterCommand');

  CFStringRef get kCFSocketRegisterCommand => _kCFSocketRegisterCommand.value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRetrieveCommand =
      _lookup<CFStringRef>('kCFSocketRetrieveCommand');

  CFStringRef get kCFSocketRetrieveCommand => _kCFSocketRetrieveCommand.value;

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistbulkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Uint64)>>('getattrlistbulk');
  late final _getattrlistbulk = _getattrlistbulkPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedLong)>>('getattrlistat');
  late final _getattrlistat = _getattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlistat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setattrlistatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Uint32)>>('setattrlistat');
  late final _setattrlistat = _setattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int freadlink(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _freadlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freadlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('freadlink');
  late final _freadlink =
      _freadlinkPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, uid_t, gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int linkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
  ) {
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int readlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  void _exit(
    int arg0,
  ) {
    return __exit(
      arg0,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int access(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _access(
      arg0,
      arg1,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int alarm(
    int arg0,
  ) {
    return _alarm(
      arg0,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int chdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chdir(
      arg0,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int chown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int dup(
    int arg0,
  ) {
    return _dup(
      arg0,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int arg0,
    int arg1,
  ) {
    return _dup2(
      arg0,
      arg1,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execl(
      __path,
      __arg0,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execle(
      __path,
      __arg0,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg0,
  ) {
    return _execlp(
      __file,
      __arg0,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execve(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getcwd(
      arg0,
      arg1,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _getgroups(
      arg0,
      arg1,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int isatty(
    int arg0,
  ) {
    return _isatty(
      arg0,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int link(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _link(
      arg0,
      arg1,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Int, off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _pathconf(
      arg0,
      arg1,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int pipe(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _pipe(
      arg0,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _rmdir(
      arg0,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pid_t, pid_t)>>('setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int sleep(
    int arg0,
  ) {
    return _sleep(
      arg0,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int sysconf(
    int arg0,
  ) {
    return _sysconf(
      arg0,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int tcgetpgrp(
    int arg0,
  ) {
    return _tcgetpgrp(
      arg0,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> ttyname(
    int arg0,
  ) {
    return _ttyname(
      arg0,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unlink(
      arg0,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int confstr(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _brk(
      arg0,
    );
  }

  late final _brkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('brk');
  late final _brk = _brkPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int chroot(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _chroot(
      arg0,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _crypt(
      arg0,
      arg1,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void encrypt(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _encrypt(
      arg0,
      arg1,
    );
  }

  late final _encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('encrypt');
  late final _encrypt =
      _encryptPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  int fchdir(
    int arg0,
  ) {
    return _fchdir(
      arg0,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getpass(
      arg0,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _getwd(
      arg0,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int lchown(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, uid_t, gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int nice(
    int arg0,
  ) {
    return _nice(
      arg0,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    return _sbrk(
      arg0,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t, gid_t)>>('setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, uid_t)>>('setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  void sync$() {
    return _sync$();
  }

  late final _sync$Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync$ = _sync$Ptr.asFunction<void Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _truncate(
      arg0,
      arg1,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ualarm(
    int arg0,
    int arg1,
  ) {
    return _ualarm(
      arg0,
      arg1,
    );
  }

  late final _ualarmPtr =
      _lookup<ffi.NativeFunction<useconds_t Function(useconds_t, useconds_t)>>(
          'ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int arg0,
  ) {
    return _usleep(
      arg0,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  int fsync(
    int arg0,
  ) {
    return _fsync(
      arg0,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, uid_t, gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int gethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _gethostname(
      arg0,
      arg1,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int readlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int symlink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _symlink(
      arg0,
      arg1,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<sigset_t> arg5,
  ) {
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<sigset_t>)>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    int arg3,
  ) {
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _accessx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<accessx_descriptor>, ffi.Size,
              ffi.Pointer<ffi.Int>, uid_t)>>('accessx_np');
  late final _accessx_np = _accessx_npPtr.asFunction<
      int Function(
          ffi.Pointer<accessx_descriptor>, int, ffi.Pointer<ffi.Int>, int)>();

  int acct(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _acct(
      arg0,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int add_profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _add_profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('add_profil');
  late final _add_profil = _add_profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  int execvP(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __searchpath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  late final _execvPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvP');
  late final _execvP = _execvPPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> fflagstostr(
    int arg0,
  ) {
    return _fflagstostr(
      arg0,
    );
  }

  late final _fflagstostrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedLong)>>(
      'fflagstostr');
  late final _fflagstostr =
      _fflagstostrPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  late final _getdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int getgrouplist(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<ffi.Int> arg3,
  ) {
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getgrouplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('getgrouplist');
  late final _getgrouplist = _getgrouplistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int gethostuuid(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<timespec>)>>('gethostuuid');
  late final _gethostuuid = _gethostuuidPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<timespec>)>();

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getmode(
      arg0,
      arg1,
    );
  }

  late final _getmodePtr = _lookup<
          ffi.NativeFunction<mode_t Function(ffi.Pointer<ffi.Void>, mode_t)>>(
      'getmode');
  late final _getmode =
      _getmodePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int getpeereid(
    int arg0,
    ffi.Pointer<uid_t> arg1,
    ffi.Pointer<gid_t> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('getpeereid');
  late final _getpeereid = _getpeereidPtr
      .asFunction<int Function(int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int getsgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getsgroups_np');
  late final _getsgroups_np = _getsgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getwgroups_np(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>)>>('getwgroups_np');
  late final _getwgroups_np = _getwgroups_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.UnsignedChar>)>();

  int initgroups(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _initgroups(
      arg0,
      arg1,
    );
  }

  late final _initgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'initgroups');
  late final _initgroups =
      _initgroupsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int issetugid() {
    return _issetugid();
  }

  late final _issetugidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('issetugid');
  late final _issetugid = _issetugidPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _mkdtemp(
      arg0,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mknod(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mknodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t, dev_t)>>('mknod');
  late final _mknod =
      _mknodPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mkpath_np(
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpath_np(
      path,
      omode,
    );
  }

  late final _mkpath_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'mkpath_np');
  late final _mkpath_np =
      _mkpath_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkpathat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int omode,
  ) {
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  late final _mkpathat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, mode_t)>>('mkpathat_np');
  late final _mkpathat_np = _mkpathat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkostemp(
    ffi.Pointer<ffi.Char> path,
    int oflags,
  ) {
    return _mkostemp(
      path,
      oflags,
    );
  }

  late final _mkostempPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkostemp');
  late final _mkostemp =
      _mkostempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkostemps(
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('mkostemps');
  late final _mkostemps =
      _mkostempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int mkstemp_dprotected_np(
    ffi.Pointer<ffi.Char> path,
    int dpclass,
    int dpflags,
  ) {
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  late final _mkstemp_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkstemp_dprotected_np');
  late final _mkstemp_dprotected_np = _mkstemp_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> mkdtempat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  late final _mkdtempat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('mkdtempat_np');
  late final _mkdtempat_np = _mkdtempat_npPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
  ) {
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  late final _mkstempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('mkstempsat_np');
  late final _mkstempsat_np = _mkstempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('mkostempsat_np');
  late final _mkostempsat_np = _mkostempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  late final _nfssvcPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'nfssvc');
  late final _nfssvc =
      _nfssvcPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int profil(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedLong,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_setugid_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t, gid_t)>>(
          'pthread_setugid_np');
  late final _pthread_setugid_np =
      _pthread_setugid_npPtr.asFunction<int Function(int, int)>();

  int pthread_getugid_np(
    ffi.Pointer<uid_t> arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_getugid_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('pthread_getugid_np');
  late final _pthread_getugid_np = _pthread_getugid_npPtr
      .asFunction<int Function(ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int reboot(
    int arg0,
  ) {
    return _reboot(
      arg0,
    );
  }

  late final _rebootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('reboot');
  late final _reboot = _rebootPtr.asFunction<int Function(int)>();

  int revoke(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _revoke(
      arg0,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
  ) {
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _rcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('rcmd');
  late final _rcmd = _rcmdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Int> arg5,
    int arg6,
  ) {
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _rcmd_afPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('rcmd_af');
  late final _rcmd_af = _rcmd_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          int)>();

  int rresvport(
    ffi.Pointer<ffi.Int> arg0,
  ) {
    return _rresvport(
      arg0,
    );
  }

  late final _rresvportPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'rresvport');
  late final _rresvport =
      _rresvportPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int rresvport_af(
    ffi.Pointer<ffi.Int> arg0,
    int arg1,
  ) {
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  late final _rresvport_afPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'rresvport_af');
  late final _rresvport_af =
      _rresvport_afPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _iruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('iruserok');
  late final _iruserok = _iruserokPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _iruserok_saPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('iruserok_sa');
  late final _iruserok_sa = _iruserok_saPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ruserok(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ruserokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ruserok');
  late final _ruserok = _ruserokPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  late final _setdomainnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _setgroups(
      arg0,
      arg1,
    );
  }

  late final _setgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<gid_t>)>>(
      'setgroups');
  late final _setgroups =
      _setgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<void Function(int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sethostname(
      arg0,
      arg1,
    );
  }

  late final _sethostnamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setlogin(
      arg0,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _setmode(
      arg0,
    );
  }

  late final _setmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>>('setmode');
  late final _setmode = _setmodePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(gid_t)>>('setrgid');
  late final _setrgid = _setrgidPtr.asFunction<int Function(int)>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(uid_t)>>('setruid');
  late final _setruid = _setruidPtr.asFunction<int Function(int)>();

  int setsgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setsgroups_np');
  late final _setsgroups_np = _setsgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int setwgroups_np(
    int arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.UnsignedChar>)>>('setwgroups_np');
  late final _setwgroups_np = _setwgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.UnsignedChar>)>();

  int strtofflags(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.UnsignedLong> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
  ) {
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strtofflagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>)>>('strtofflags');
  late final _strtofflags = _strtofflagsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.UnsignedLong>, ffi.Pointer<ffi.UnsignedLong>)>();

  int swapon(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _swapon(
      arg0,
    );
  }

  late final _swaponPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'swapon');
  late final _swapon =
      _swaponPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int undelete(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _undelete(
      arg0,
    );
  }

  late final _undeletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'undelete');
  late final _undelete =
      _undeletePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unwhiteout(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _unwhiteout(
      arg0,
    );
  }

  late final _unwhiteoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unwhiteout');
  late final _unwhiteout =
      _unwhiteoutPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int syscall(
    int arg0,
  ) {
    return _syscall(
      arg0,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fgetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fgetattrlist');
  late final _fgetattrlist = _fgetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fsetattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('fsetattrlist');
  late final _fsetattrlist = _fsetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('getattrlist');
  late final _getattrlist = _getattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlist(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setattrlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.UnsignedInt)>>('setattrlist');
  late final _setattrlist = _setattrlistPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int exchangedata(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _exchangedataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('exchangedata');
  late final _exchangedata = _exchangedataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedInt> arg4,
    ffi.Pointer<ffi.UnsignedInt> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
    int arg7,
  ) {
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _getdirentriesattrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('getdirentriesattr');
  late final _getdirentriesattr = _getdirentriesattrPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>,
          int)>();

  int searchfs(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<ffi.UnsignedLong> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _searchfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<fssearchblock>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<searchstate>)>>('searchfs');
  late final _searchfs = _searchfsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<fssearchblock>,
          ffi.Pointer<ffi.UnsignedLong>, int, int, ffi.Pointer<searchstate>)>();

  int fsctl(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('fsctl');
  late final _fsctl = _fsctlPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>, int)>();

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ffsctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.UnsignedLong, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ffsctl');
  late final _ffsctl = _ffsctlPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _fsync_volume_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'fsync_volume_np');
  late final _fsync_volume_np =
      _fsync_volume_npPtr.asFunction<int Function(int, int)>();

  int sync_volume_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _sync_volume_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'sync_volume_np');
  late final _sync_volume_np =
      _sync_volume_npPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Int> _optreset = _lookup<ffi.Int>('optreset');

  int get optreset => _optreset.value;

  set optreset(int value) => _optreset.value = value;

  int open(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int openat(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('openat');
  late final _openat =
      _openatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int creat(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fcntl(
    int arg0,
    int arg1,
  ) {
    return _fcntl(
      arg0,
      arg1,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int openx_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    filesec_t arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, filesec_t)>>('openx_np');
  late final _openx_np = _openx_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, filesec_t)>();

  int open_dprotected_np(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('open_dprotected_np');
  late final _open_dprotected_np = _open_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  int openat_dprotected_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _openat_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _openat_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('openat_dprotected_np');
  late final _openat_dprotected_np = _openat_dprotected_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int openat_authenticated_np(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _openat_authenticated_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _openat_authenticated_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('openat_authenticated_np');
  late final _openat_authenticated_np = _openat_authenticated_npPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int flock$1(
    int arg0,
    int arg1,
  ) {
    return _flock$1(
      arg0,
      arg1,
    );
  }

  late final _flock$1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('flock');
  late final _flock$1 = _flock$1Ptr.asFunction<int Function(int, int)>();

  filesec_t filesec_init() {
    return _filesec_init();
  }

  late final _filesec_initPtr =
      _lookup<ffi.NativeFunction<filesec_t Function()>>('filesec_init');
  late final _filesec_init =
      _filesec_initPtr.asFunction<filesec_t Function()>();

  filesec_t filesec_dup(
    filesec_t arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dupPtr =
      _lookup<ffi.NativeFunction<filesec_t Function(filesec_t)>>('filesec_dup');
  late final _filesec_dup =
      _filesec_dupPtr.asFunction<filesec_t Function(filesec_t)>();

  void filesec_free(
    filesec_t arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(filesec_t)>>('filesec_free');
  late final _filesec_free =
      _filesec_freePtr.asFunction<void Function(filesec_t)>();

  int filesec_get_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('filesec_get_property');
  late final _filesec_get_property = _filesec_get_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_query_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Int> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_query_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>)>>('filesec_query_property');
  late final _filesec_query_property = _filesec_query_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Int>)>();

  int filesec_set_property(
    filesec_t arg0,
    filesec_property_t arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1.value,
      arg2,
    );
  }

  late final _filesec_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(filesec_t, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('filesec_set_property');
  late final _filesec_set_property = _filesec_set_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_unset_property(
    filesec_t arg0,
    filesec_property_t arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1.value,
    );
  }

  late final _filesec_unset_propertyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(filesec_t, ffi.UnsignedInt)>>(
          'filesec_unset_property');
  late final _filesec_unset_property =
      _filesec_unset_propertyPtr.asFunction<int Function(filesec_t, int)>();

  ffi.Pointer<ffi.Char> sel_getName(
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return _sel_getName(
      sel,
    );
  }

  late final _sel_getNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCSelector>)>>('sel_getName');
  late final _sel_getName = _sel_getNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCSelector>)>();

  ffi.Pointer<objc.ObjCSelector> sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_registerName(
      str,
    );
  }

  late final _sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final _sel_registerName = _sel_registerNamePtr.asFunction<
      ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> object_getClassName(
    objc.ObjCObjectBase? obj,
  ) {
    return _object_getClassName(
      obj?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _object_getClassNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<objc.ObjCObject>)>>('object_getClassName');
  late final _object_getClassName = _object_getClassNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<objc.ObjCObject>)>();

  ffi.Pointer<ffi.Void> object_getIndexedIvars(
    objc.ObjCObjectBase? obj,
  ) {
    return _object_getIndexedIvars(
      obj?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _object_getIndexedIvarsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<objc.ObjCObject>)>>('object_getIndexedIvars');
  late final _object_getIndexedIvars = _object_getIndexedIvarsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<objc.ObjCObject>)>();

  bool sel_isMapped(
    ffi.Pointer<objc.ObjCSelector> sel,
  ) {
    return _sel_isMapped(
      sel,
    );
  }

  late final _sel_isMappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<objc.ObjCSelector>)>>('sel_isMapped');
  late final _sel_isMapped = _sel_isMappedPtr
      .asFunction<bool Function(ffi.Pointer<objc.ObjCSelector>)>();

  ffi.Pointer<objc.ObjCSelector> sel_getUid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _sel_getUid(
      str,
    );
  }

  late final _sel_getUidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCSelector> Function(
              ffi.Pointer<ffi.Char>)>>('sel_getUid');
  late final _sel_getUid = _sel_getUidPtr.asFunction<
      ffi.Pointer<objc.ObjCSelector> Function(ffi.Pointer<ffi.Char>)>();

  objc.ObjCObjectBase? objc_retainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_retainedObject(
              obj,
            ).address ==
            0
        ? null
        : objc.ObjCObjectBase(
            _objc_retainedObject(
              obj,
            ),
            retain: true,
            release: true);
  }

  late final _objc_retainedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              objc_objectptr_t)>>('objc_retainedObject');
  late final _objc_retainedObject = _objc_retainedObjectPtr
      .asFunction<ffi.Pointer<objc.ObjCObject> Function(objc_objectptr_t)>();

  objc.ObjCObjectBase? objc_unretainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_unretainedObject(
              obj,
            ).address ==
            0
        ? null
        : objc.ObjCObjectBase(
            _objc_unretainedObject(
              obj,
            ),
            retain: true,
            release: true);
  }

  late final _objc_unretainedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<objc.ObjCObject> Function(
              objc_objectptr_t)>>('objc_unretainedObject');
  late final _objc_unretainedObject = _objc_unretainedObjectPtr
      .asFunction<ffi.Pointer<objc.ObjCObject> Function(objc_objectptr_t)>();

  objc_objectptr_t objc_unretainedPointer(
    objc.ObjCObjectBase? obj,
  ) {
    return _objc_unretainedPointer(
      obj?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _objc_unretainedPointerPtr = _lookup<
      ffi.NativeFunction<
          objc_objectptr_t Function(
              ffi.Pointer<objc.ObjCObject>)>>('objc_unretainedPointer');
  late final _objc_unretainedPointer = _objc_unretainedPointerPtr
      .asFunction<objc_objectptr_t Function(ffi.Pointer<objc.ObjCObject>)>();

  ffi.Pointer<ffi.Void> os_retain(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_retain(
      object,
    );
  }

  late final _os_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('os_retain');
  late final _os_retain = _os_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void os_release(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_release(
      object,
    );
  }

  late final _os_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'os_release');
  late final _os_release =
      _os_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int os_workgroup_copy_port(
    Dartos_workgroup_t wg,
    ffi.Pointer<mach_port_t> mach_port_out,
  ) {
    return _os_workgroup_copy_port(
      wg.ref.pointer,
      mach_port_out,
    );
  }

  late final _os_workgroup_copy_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_t,
              ffi.Pointer<mach_port_t>)>>('os_workgroup_copy_port');
  late final _os_workgroup_copy_port = _os_workgroup_copy_portPtr
      .asFunction<int Function(os_workgroup_t, ffi.Pointer<mach_port_t>)>();

  Dartos_workgroup_t? os_workgroup_create_with_port(
    ffi.Pointer<ffi.Char> name,
    Dart__darwin_natural_t mach_port,
  ) {
    return _os_workgroup_create_with_port(
              name,
              mach_port,
            ).address ==
            0
        ? null
        : OS_os_workgroup.castFromPointer(
            _os_workgroup_create_with_port(
              name,
              mach_port,
            ),
            retain: false,
            release: true);
  }

  late final _os_workgroup_create_with_portPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>,
              mach_port_t)>>('os_workgroup_create_with_port');
  late final _os_workgroup_create_with_port = _os_workgroup_create_with_portPtr
      .asFunction<os_workgroup_t Function(ffi.Pointer<ffi.Char>, int)>();

  Dartos_workgroup_t? os_workgroup_create_with_workgroup(
    ffi.Pointer<ffi.Char> name,
    Dartos_workgroup_t wg,
  ) {
    return _os_workgroup_create_with_workgroup(
              name,
              wg.ref.pointer,
            ).address ==
            0
        ? null
        : OS_os_workgroup.castFromPointer(
            _os_workgroup_create_with_workgroup(
              name,
              wg.ref.pointer,
            ),
            retain: false,
            release: true);
  }

  late final _os_workgroup_create_with_workgroupPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>,
              os_workgroup_t)>>('os_workgroup_create_with_workgroup');
  late final _os_workgroup_create_with_workgroup =
      _os_workgroup_create_with_workgroupPtr.asFunction<
          os_workgroup_t Function(ffi.Pointer<ffi.Char>, os_workgroup_t)>();

  int os_workgroup_join(
    Dartos_workgroup_t wg,
    os_workgroup_join_token_t token_out,
  ) {
    return _os_workgroup_join(
      wg.ref.pointer,
      token_out,
    );
  }

  late final _os_workgroup_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              os_workgroup_t, os_workgroup_join_token_t)>>('os_workgroup_join');
  late final _os_workgroup_join = _os_workgroup_joinPtr
      .asFunction<int Function(os_workgroup_t, os_workgroup_join_token_t)>();

  void os_workgroup_leave(
    Dartos_workgroup_t wg,
    os_workgroup_join_token_t token,
  ) {
    return _os_workgroup_leave(
      wg.ref.pointer,
      token,
    );
  }

  late final _os_workgroup_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(os_workgroup_t,
              os_workgroup_join_token_t)>>('os_workgroup_leave');
  late final _os_workgroup_leave = _os_workgroup_leavePtr
      .asFunction<void Function(os_workgroup_t, os_workgroup_join_token_t)>();

  int os_workgroup_set_working_arena(
    Dartos_workgroup_t wg,
    ffi.Pointer<ffi.Void> arena,
    int max_workers,
    os_workgroup_working_arena_destructor_t destructor,
  ) {
    return _os_workgroup_set_working_arena(
      wg.ref.pointer,
      arena,
      max_workers,
      destructor,
    );
  }

  late final _os_workgroup_set_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(os_workgroup_t, ffi.Pointer<ffi.Void>,
                  ffi.Uint32, os_workgroup_working_arena_destructor_t)>>(
      'os_workgroup_set_working_arena');
  late final _os_workgroup_set_working_arena =
      _os_workgroup_set_working_arenaPtr.asFunction<
          int Function(os_workgroup_t, ffi.Pointer<ffi.Void>, int,
              os_workgroup_working_arena_destructor_t)>();

  ffi.Pointer<ffi.Void> os_workgroup_get_working_arena(
    Dartos_workgroup_t wg,
    ffi.Pointer<os_workgroup_index> index_out,
  ) {
    return _os_workgroup_get_working_arena(
      wg.ref.pointer,
      index_out,
    );
  }

  late final _os_workgroup_get_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  os_workgroup_t, ffi.Pointer<os_workgroup_index>)>>(
      'os_workgroup_get_working_arena');
  late final _os_workgroup_get_working_arena =
      _os_workgroup_get_working_arenaPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              os_workgroup_t, ffi.Pointer<os_workgroup_index>)>();

  void os_workgroup_cancel(
    Dartos_workgroup_t wg,
  ) {
    return _os_workgroup_cancel(
      wg.ref.pointer,
    );
  }

  late final _os_workgroup_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(os_workgroup_t)>>(
          'os_workgroup_cancel');
  late final _os_workgroup_cancel =
      _os_workgroup_cancelPtr.asFunction<void Function(os_workgroup_t)>();

  bool os_workgroup_testcancel(
    Dartos_workgroup_t wg,
  ) {
    return _os_workgroup_testcancel(
      wg.ref.pointer,
    );
  }

  late final _os_workgroup_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(os_workgroup_t)>>(
          'os_workgroup_testcancel');
  late final _os_workgroup_testcancel =
      _os_workgroup_testcancelPtr.asFunction<bool Function(os_workgroup_t)>();

  int os_workgroup_max_parallel_threads(
    Dartos_workgroup_t wg,
    os_workgroup_mpt_attr_t attr,
  ) {
    return _os_workgroup_max_parallel_threads(
      wg.ref.pointer,
      attr,
    );
  }

  late final _os_workgroup_max_parallel_threadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_t,
              os_workgroup_mpt_attr_t)>>('os_workgroup_max_parallel_threads');
  late final _os_workgroup_max_parallel_threads =
      _os_workgroup_max_parallel_threadsPtr
          .asFunction<int Function(os_workgroup_t, os_workgroup_mpt_attr_t)>();

  int os_workgroup_interval_start(
    Dartos_workgroup_interval_t wg,
    int start,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_start(
      wg.ref.pointer,
      start,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t, ffi.Uint64, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_start');
  late final _os_workgroup_interval_start =
      _os_workgroup_interval_startPtr.asFunction<
          int Function(os_workgroup_interval_t, int, int,
              os_workgroup_interval_data_t)>();

  int os_workgroup_interval_update(
    Dartos_workgroup_interval_t wg,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_update(
      wg.ref.pointer,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_update');
  late final _os_workgroup_interval_update =
      _os_workgroup_interval_updatePtr.asFunction<
          int Function(
              os_workgroup_interval_t, int, os_workgroup_interval_data_t)>();

  int os_workgroup_interval_finish(
    Dartos_workgroup_interval_t wg,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_finish(
      wg.ref.pointer,
      data,
    );
  }

  late final _os_workgroup_interval_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(os_workgroup_interval_t,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_finish');
  late final _os_workgroup_interval_finish =
      _os_workgroup_interval_finishPtr.asFunction<
          int Function(
              os_workgroup_interval_t, os_workgroup_interval_data_t)>();

  Dartos_workgroup_parallel_t? os_workgroup_parallel_create(
    ffi.Pointer<ffi.Char> name,
    os_workgroup_attr_t attr,
  ) {
    return _os_workgroup_parallel_create(
              name,
              attr,
            ).address ==
            0
        ? null
        : OS_os_workgroup.castFromPointer(
            _os_workgroup_parallel_create(
              name,
              attr,
            ),
            retain: false,
            release: true);
  }

  late final _os_workgroup_parallel_createPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_parallel_t Function(ffi.Pointer<ffi.Char>,
              os_workgroup_attr_t)>>('os_workgroup_parallel_create');
  late final _os_workgroup_parallel_create =
      _os_workgroup_parallel_createPtr.asFunction<
          os_workgroup_parallel_t Function(
              ffi.Pointer<ffi.Char>, os_workgroup_attr_t)>();

  int dispatch_time(
    int when,
    int delta,
  ) {
    return _dispatch_time(
      when,
      delta,
    );
  }

  late final _dispatch_timePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              dispatch_time_t, ffi.Int64)>>('dispatch_time');
  late final _dispatch_time =
      _dispatch_timePtr.asFunction<int Function(int, int)>();

  int dispatch_walltime(
    ffi.Pointer<timespec> when,
    int delta,
  ) {
    return _dispatch_walltime(
      when,
      delta,
    );
  }

  late final _dispatch_walltimePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              ffi.Pointer<timespec>, ffi.Int64)>>('dispatch_walltime');
  late final _dispatch_walltime = _dispatch_walltimePtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>();

  qos_class_t qos_class_self() {
    return qos_class_t.fromValue(_qos_class_self());
  }

  late final _qos_class_selfPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('qos_class_self');
  late final _qos_class_self = _qos_class_selfPtr.asFunction<int Function()>();

  qos_class_t qos_class_main() {
    return qos_class_t.fromValue(_qos_class_main());
  }

  late final _qos_class_mainPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('qos_class_main');
  late final _qos_class_main = _qos_class_mainPtr.asFunction<int Function()>();

  void dispatch_retain(
    Dartdispatch_object_t object,
  ) {
    return _dispatch_retain(
      object.ref.pointer,
    );
  }

  late final _dispatch_retainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_retain');
  late final _dispatch_retain =
      _dispatch_retainPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_release(
    Dartdispatch_object_t object,
  ) {
    return _dispatch_release(
      object.ref.pointer,
    );
  }

  late final _dispatch_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_release');
  late final _dispatch_release =
      _dispatch_releasePtr.asFunction<void Function(dispatch_object_t)>();

  ffi.Pointer<ffi.Void> dispatch_get_context(
    Dartdispatch_object_t object,
  ) {
    return _dispatch_get_context(
      object.ref.pointer,
    );
  }

  late final _dispatch_get_contextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(dispatch_object_t)>>(
      'dispatch_get_context');
  late final _dispatch_get_context = _dispatch_get_contextPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(dispatch_object_t)>();

  void dispatch_set_context(
    Dartdispatch_object_t object,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _dispatch_set_context(
      object.ref.pointer,
      context,
    );
  }

  late final _dispatch_set_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_set_context');
  late final _dispatch_set_context = _dispatch_set_contextPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Void>)>();

  void dispatch_set_finalizer_f(
    Dartdispatch_object_t object,
    dispatch_function_t finalizer,
  ) {
    return _dispatch_set_finalizer_f(
      object.ref.pointer,
      finalizer,
    );
  }

  late final _dispatch_set_finalizer_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_function_t)>>('dispatch_set_finalizer_f');
  late final _dispatch_set_finalizer_f = _dispatch_set_finalizer_fPtr
      .asFunction<void Function(dispatch_object_t, dispatch_function_t)>();

  void dispatch_activate(
    Dartdispatch_object_t object,
  ) {
    return _dispatch_activate(
      object.ref.pointer,
    );
  }

  late final _dispatch_activatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_activate');
  late final _dispatch_activate =
      _dispatch_activatePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_suspend(
    Dartdispatch_object_t object,
  ) {
    return _dispatch_suspend(
      object.ref.pointer,
    );
  }

  late final _dispatch_suspendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_suspend');
  late final _dispatch_suspend =
      _dispatch_suspendPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_resume(
    Dartdispatch_object_t object,
  ) {
    return _dispatch_resume(
      object.ref.pointer,
    );
  }

  late final _dispatch_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_resume');
  late final _dispatch_resume =
      _dispatch_resumePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_set_qos_class_floor(
    Dartdispatch_object_t object,
    qos_class_t qos_class,
    int relative_priority,
  ) {
    return _dispatch_set_qos_class_floor(
      object.ref.pointer,
      qos_class.value,
      relative_priority,
    );
  }

  late final _dispatch_set_qos_class_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, ffi.UnsignedInt,
              ffi.Int)>>('dispatch_set_qos_class_floor');
  late final _dispatch_set_qos_class_floor = _dispatch_set_qos_class_floorPtr
      .asFunction<void Function(dispatch_object_t, int, int)>();

  int dispatch_wait(
    ffi.Pointer<ffi.Void> object,
    int timeout,
  ) {
    return _dispatch_wait(
      object,
      timeout,
    );
  }

  late final _dispatch_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<ffi.Void>, dispatch_time_t)>>('dispatch_wait');
  late final _dispatch_wait =
      _dispatch_waitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  void dispatch_notify(
    ffi.Pointer<ffi.Void> object,
    Dartdispatch_object_t queue,
    Dartdispatch_block_t notification_block,
  ) {
    return _dispatch_notify(
      object,
      queue.ref.pointer,
      notification_block.ref.pointer,
    );
  }

  late final _dispatch_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, dispatch_object_t,
              dispatch_block_t)>>('dispatch_notify');
  late final _dispatch_notify = _dispatch_notifyPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, dispatch_object_t, dispatch_block_t)>();

  void dispatch_cancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_cancel(
      object,
    );
  }

  late final _dispatch_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_cancel');
  late final _dispatch_cancel =
      _dispatch_cancelPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dispatch_testcancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_testcancel(
      object,
    );
  }

  late final _dispatch_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_testcancel');
  late final _dispatch_testcancel =
      _dispatch_testcancelPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_debug(
    Dartdispatch_object_t object,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _dispatch_debug(
      object.ref.pointer,
      message,
    );
  }

  late final _dispatch_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_object_t, ffi.Pointer<ffi.Char>)>>('dispatch_debug');
  late final _dispatch_debug = _dispatch_debugPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Char>)>();

  void dispatch_debugv(
    Dartdispatch_object_t object,
    ffi.Pointer<ffi.Char> message,
    va_list ap,
  ) {
    return _dispatch_debugv(
      object.ref.pointer,
      message,
      ap,
    );
  }

  late final _dispatch_debugvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, ffi.Pointer<ffi.Char>,
              va_list)>>('dispatch_debugv');
  late final _dispatch_debugv = _dispatch_debugvPtr.asFunction<
      void Function(dispatch_object_t, ffi.Pointer<ffi.Char>, va_list)>();

  void dispatch_async(
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_async(
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_async');
  late final _dispatch_async = _dispatch_asyncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_async_f(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_f(
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_f');
  late final _dispatch_async_f = _dispatch_async_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_sync(
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_sync(
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_sync');
  late final _dispatch_sync = _dispatch_syncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_sync_f(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_sync_f(
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_sync_f');
  late final _dispatch_sync_f = _dispatch_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_async_and_wait(
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_async_and_wait(
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_async_and_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_async_and_wait');
  late final _dispatch_async_and_wait = _dispatch_async_and_waitPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_async_and_wait_f(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_and_wait_f(
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_and_wait_f');
  late final _dispatch_async_and_wait_f =
      _dispatch_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_apply(
    int iterations,
    Dartdispatch_queue_t? queue,
    objc.ObjCBlock<ffi.Void Function(ffi.Size)> block,
  ) {
    return _dispatch_apply(
      iterations,
      queue?.ref.pointer ?? ffi.nullptr,
      block.ref.pointer,
    );
  }

  late final _dispatch_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Size, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('dispatch_apply');
  late final _dispatch_apply = _dispatch_applyPtr.asFunction<
      void Function(int, dispatch_queue_t, ffi.Pointer<objc.ObjCBlockImpl>)>();

  void dispatch_apply_f(
    int iterations,
    Dartdispatch_queue_t? queue,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> context, ffi.Size iteration)>>
        work,
  ) {
    return _dispatch_apply_f(
      iterations,
      queue?.ref.pointer ?? ffi.nullptr,
      context,
      work,
    );
  }

  late final _dispatch_apply_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Size,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void> context,
                          ffi.Size iteration)>>)>>('dispatch_apply_f');
  late final _dispatch_apply_f = _dispatch_apply_fPtr.asFunction<
      void Function(
          int,
          dispatch_queue_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> context, ffi.Size iteration)>>)>();

  Dartdispatch_queue_t dispatch_get_current_queue() {
    return objc.NSObject.castFromPointer(_dispatch_get_current_queue(),
        retain: true, release: true);
  }

  late final _dispatch_get_current_queuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function()>>(
          'dispatch_get_current_queue');
  late final _dispatch_get_current_queue =
      _dispatch_get_current_queuePtr.asFunction<dispatch_queue_t Function()>();

  late final ffi.Pointer<dispatch_queue_s> __dispatch_main_q =
      _lookup<dispatch_queue_s>('_dispatch_main_q');

  ffi.Pointer<dispatch_queue_s> get _dispatch_main_q => __dispatch_main_q;

  Dartdispatch_queue_global_t dispatch_get_global_queue(
    int identifier,
    int flags,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_get_global_queue(
          identifier,
          flags,
        ),
        retain: true,
        release: true);
  }

  late final _dispatch_get_global_queuePtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_global_t Function(
              ffi.IntPtr, ffi.UintPtr)>>('dispatch_get_global_queue');
  late final _dispatch_get_global_queue = _dispatch_get_global_queuePtr
      .asFunction<dispatch_queue_global_t Function(int, int)>();

  late final ffi.Pointer<dispatch_queue_attr_s>
      __dispatch_queue_attr_concurrent =
      _lookup<dispatch_queue_attr_s>('_dispatch_queue_attr_concurrent');

  ffi.Pointer<dispatch_queue_attr_s> get _dispatch_queue_attr_concurrent =>
      __dispatch_queue_attr_concurrent;

  Dartdispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(
    Dartdispatch_queue_attr_t? attr,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_queue_attr_make_initially_inactive(
          attr?.ref.pointer ?? ffi.nullptr,
        ),
        retain: true,
        release: true);
  }

  late final _dispatch_queue_attr_make_initially_inactivePtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(dispatch_queue_attr_t)>>(
      'dispatch_queue_attr_make_initially_inactive');
  late final _dispatch_queue_attr_make_initially_inactive =
      _dispatch_queue_attr_make_initially_inactivePtr
          .asFunction<dispatch_queue_attr_t Function(dispatch_queue_attr_t)>();

  Dartdispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(
    Dartdispatch_queue_attr_t? attr,
    dispatch_autorelease_frequency_t frequency,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_queue_attr_make_with_autorelease_frequency(
          attr?.ref.pointer ?? ffi.nullptr,
          frequency.value,
        ),
        retain: true,
        release: true);
  }

  late final _dispatch_queue_attr_make_with_autorelease_frequencyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(
                  dispatch_queue_attr_t, ffi.UnsignedLong)>>(
      'dispatch_queue_attr_make_with_autorelease_frequency');
  late final _dispatch_queue_attr_make_with_autorelease_frequency =
      _dispatch_queue_attr_make_with_autorelease_frequencyPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int)>();

  Dartdispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(
    Dartdispatch_queue_attr_t? attr,
    qos_class_t qos_class,
    int relative_priority,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_queue_attr_make_with_qos_class(
          attr?.ref.pointer ?? ffi.nullptr,
          qos_class.value,
          relative_priority,
        ),
        retain: true,
        release: true);
  }

  late final _dispatch_queue_attr_make_with_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, ffi.UnsignedInt,
              ffi.Int)>>('dispatch_queue_attr_make_with_qos_class');
  late final _dispatch_queue_attr_make_with_qos_class =
      _dispatch_queue_attr_make_with_qos_classPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int, int)>();

  Dartdispatch_queue_t dispatch_queue_create_with_target(
    ffi.Pointer<ffi.Char> label,
    Dartdispatch_queue_attr_t? attr,
    Dartdispatch_queue_t? target,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_queue_create_with_target(
          label,
          attr?.ref.pointer ?? ffi.nullptr,
          target?.ref.pointer ?? ffi.nullptr,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_queue_create_with_targetPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(
              ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t,
              dispatch_queue_t)>>('dispatch_queue_create_with_target');
  late final _dispatch_queue_create_with_target =
      _dispatch_queue_create_with_targetPtr.asFunction<
          dispatch_queue_t Function(ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t, dispatch_queue_t)>();

  Dartdispatch_queue_t dispatch_queue_create(
    ffi.Pointer<ffi.Char> label,
    Dartdispatch_queue_attr_t? attr,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_queue_create(
          label,
          attr?.ref.pointer ?? ffi.nullptr,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_queue_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(ffi.Pointer<ffi.Char>,
              dispatch_queue_attr_t)>>('dispatch_queue_create');
  late final _dispatch_queue_create = _dispatch_queue_createPtr.asFunction<
      dispatch_queue_t Function(
          ffi.Pointer<ffi.Char>, dispatch_queue_attr_t)>();

  ffi.Pointer<ffi.Char> dispatch_queue_get_label(
    Dartdispatch_queue_t? queue,
  ) {
    return _dispatch_queue_get_label(
      queue?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _dispatch_queue_get_labelPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(dispatch_queue_t)>>(
      'dispatch_queue_get_label');
  late final _dispatch_queue_get_label = _dispatch_queue_get_labelPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(dispatch_queue_t)>();

  qos_class_t dispatch_queue_get_qos_class(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Int> relative_priority_ptr,
  ) {
    return qos_class_t.fromValue(_dispatch_queue_get_qos_class(
      queue.ref.pointer,
      relative_priority_ptr,
    ));
  }

  late final _dispatch_queue_get_qos_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(dispatch_queue_t,
              ffi.Pointer<ffi.Int>)>>('dispatch_queue_get_qos_class');
  late final _dispatch_queue_get_qos_class = _dispatch_queue_get_qos_classPtr
      .asFunction<int Function(dispatch_queue_t, ffi.Pointer<ffi.Int>)>();

  void dispatch_set_target_queue(
    Dartdispatch_object_t object,
    Dartdispatch_queue_t? queue,
  ) {
    return _dispatch_set_target_queue(
      object.ref.pointer,
      queue?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _dispatch_set_target_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_queue_t)>>('dispatch_set_target_queue');
  late final _dispatch_set_target_queue = _dispatch_set_target_queuePtr
      .asFunction<void Function(dispatch_object_t, dispatch_queue_t)>();

  void dispatch_main() {
    return _dispatch_main();
  }

  late final _dispatch_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dispatch_main');
  late final _dispatch_main = _dispatch_mainPtr.asFunction<void Function()>();

  void dispatch_after(
    Dartdispatch_time_t when,
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_after(
      when,
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_time_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_after');
  late final _dispatch_after = _dispatch_afterPtr
      .asFunction<void Function(int, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_after_f(
    Dartdispatch_time_t when,
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_after_f(
      when,
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_after_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_time_t, dispatch_queue_t,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>>('dispatch_after_f');
  late final _dispatch_after_f = _dispatch_after_fPtr.asFunction<
      void Function(
          int, dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async(
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_barrier_async(
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_barrier_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_barrier_async');
  late final _dispatch_barrier_async = _dispatch_barrier_asyncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_barrier_async_f(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_f(
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_f');
  late final _dispatch_barrier_async_f =
      _dispatch_barrier_async_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_sync(
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_barrier_sync(
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_barrier_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t, dispatch_block_t)>>('dispatch_barrier_sync');
  late final _dispatch_barrier_sync = _dispatch_barrier_syncPtr
      .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_barrier_sync_f(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_sync_f(
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_barrier_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_sync_f');
  late final _dispatch_barrier_sync_f = _dispatch_barrier_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async_and_wait(
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_barrier_async_and_wait(
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_barrier_async_and_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t,
              dispatch_block_t)>>('dispatch_barrier_async_and_wait');
  late final _dispatch_barrier_async_and_wait =
      _dispatch_barrier_async_and_waitPtr
          .asFunction<void Function(dispatch_queue_t, dispatch_block_t)>();

  void dispatch_barrier_async_and_wait_f(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_and_wait_f(
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_and_wait_f');
  late final _dispatch_barrier_async_and_wait_f =
      _dispatch_barrier_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_queue_set_specific(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t destructor,
  ) {
    return _dispatch_queue_set_specific(
      queue.ref.pointer,
      key,
      context,
      destructor,
    );
  }

  late final _dispatch_queue_set_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_queue_set_specific');
  late final _dispatch_queue_set_specific =
      _dispatch_queue_set_specificPtr.asFunction<
          void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  ffi.Pointer<ffi.Void> dispatch_queue_get_specific(
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_queue_get_specific(
      queue.ref.pointer,
      key,
    );
  }

  late final _dispatch_queue_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(dispatch_queue_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_queue_get_specific');
  late final _dispatch_queue_get_specific =
      _dispatch_queue_get_specificPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> dispatch_get_specific(
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_get_specific(
      key,
    );
  }

  late final _dispatch_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('dispatch_get_specific');
  late final _dispatch_get_specific = _dispatch_get_specificPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_assert_queue(
    Dartdispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue(
      queue.ref.pointer,
    );
  }

  late final _dispatch_assert_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue');
  late final _dispatch_assert_queue =
      _dispatch_assert_queuePtr.asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_barrier(
    Dartdispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_barrier(
      queue.ref.pointer,
    );
  }

  late final _dispatch_assert_queue_barrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_barrier');
  late final _dispatch_assert_queue_barrier = _dispatch_assert_queue_barrierPtr
      .asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_not(
    Dartdispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_not(
      queue.ref.pointer,
    );
  }

  late final _dispatch_assert_queue_notPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_not');
  late final _dispatch_assert_queue_not = _dispatch_assert_queue_notPtr
      .asFunction<void Function(dispatch_queue_t)>();

  int dispatch_allow_send_signals(
    int preserve_signum,
  ) {
    return _dispatch_allow_send_signals(
      preserve_signum,
    );
  }

  late final _dispatch_allow_send_signalsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'dispatch_allow_send_signals');
  late final _dispatch_allow_send_signals =
      _dispatch_allow_send_signalsPtr.asFunction<int Function(int)>();

  Dartdispatch_block_t dispatch_block_create(
    dispatch_block_flags_t flags,
    Dartdispatch_block_t block,
  ) {
    return ObjCBlock_ffiVoid.castFromPointer(
        _dispatch_block_create(
          flags.value,
          block.ref.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_block_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_block_t Function(
              ffi.UnsignedLong, dispatch_block_t)>>('dispatch_block_create');
  late final _dispatch_block_create = _dispatch_block_createPtr
      .asFunction<dispatch_block_t Function(int, dispatch_block_t)>();

  Dartdispatch_block_t dispatch_block_create_with_qos_class(
    dispatch_block_flags_t flags,
    qos_class_t qos_class,
    int relative_priority,
    Dartdispatch_block_t block,
  ) {
    return ObjCBlock_ffiVoid.castFromPointer(
        _dispatch_block_create_with_qos_class(
          flags.value,
          qos_class.value,
          relative_priority,
          block.ref.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_block_create_with_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_block_t Function(ffi.UnsignedLong, ffi.UnsignedInt, ffi.Int,
              dispatch_block_t)>>('dispatch_block_create_with_qos_class');
  late final _dispatch_block_create_with_qos_class =
      _dispatch_block_create_with_qos_classPtr.asFunction<
          dispatch_block_t Function(int, int, int, dispatch_block_t)>();

  void dispatch_block_perform(
    dispatch_block_flags_t flags,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_block_perform(
      flags.value,
      block.ref.pointer,
    );
  }

  late final _dispatch_block_performPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedLong, dispatch_block_t)>>('dispatch_block_perform');
  late final _dispatch_block_perform = _dispatch_block_performPtr
      .asFunction<void Function(int, dispatch_block_t)>();

  int dispatch_block_wait(
    Dartdispatch_block_t block,
    Dartdispatch_time_t timeout,
  ) {
    return _dispatch_block_wait(
      block.ref.pointer,
      timeout,
    );
  }

  late final _dispatch_block_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              dispatch_block_t, dispatch_time_t)>>('dispatch_block_wait');
  late final _dispatch_block_wait =
      _dispatch_block_waitPtr.asFunction<int Function(dispatch_block_t, int)>();

  void dispatch_block_notify(
    Dartdispatch_block_t block,
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t notification_block,
  ) {
    return _dispatch_block_notify(
      block.ref.pointer,
      queue.ref.pointer,
      notification_block.ref.pointer,
    );
  }

  late final _dispatch_block_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_block_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_block_notify');
  late final _dispatch_block_notify = _dispatch_block_notifyPtr.asFunction<
      void Function(dispatch_block_t, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_block_cancel(
    Dartdispatch_block_t block,
  ) {
    return _dispatch_block_cancel(
      block.ref.pointer,
    );
  }

  late final _dispatch_block_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_block_t)>>(
          'dispatch_block_cancel');
  late final _dispatch_block_cancel =
      _dispatch_block_cancelPtr.asFunction<void Function(dispatch_block_t)>();

  int dispatch_block_testcancel(
    Dartdispatch_block_t block,
  ) {
    return _dispatch_block_testcancel(
      block.ref.pointer,
    );
  }

  late final _dispatch_block_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_block_t)>>(
          'dispatch_block_testcancel');
  late final _dispatch_block_testcancel = _dispatch_block_testcancelPtr
      .asFunction<int Function(dispatch_block_t)>();

  late final ffi.Pointer<security_token_t> _KERNEL_SECURITY_TOKEN =
      _lookup<security_token_t>('KERNEL_SECURITY_TOKEN');

  security_token_t get KERNEL_SECURITY_TOKEN => _KERNEL_SECURITY_TOKEN.ref;

  late final ffi.Pointer<audit_token_t> _KERNEL_AUDIT_TOKEN =
      _lookup<audit_token_t>('KERNEL_AUDIT_TOKEN');

  audit_token_t get KERNEL_AUDIT_TOKEN => _KERNEL_AUDIT_TOKEN.ref;

  int mach_msg_overwrite(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
    ffi.Pointer<mach_msg_header_t> rcv_msg,
    int rcv_limit,
  ) {
    return _mach_msg_overwrite(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
      rcv_msg,
      rcv_limit,
    );
  }

  late final _mach_msg_overwritePtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t,
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_size_t)>>('mach_msg_overwrite');
  late final _mach_msg_overwrite = _mach_msg_overwritePtr.asFunction<
      int Function(ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int,
          ffi.Pointer<mach_msg_header_t>, int)>();

  int mach_msg(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
  ) {
    return _mach_msg(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
    );
  }

  late final _mach_msgPtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t)>>('mach_msg');
  late final _mach_msg = _mach_msgPtr.asFunction<
      int Function(
          ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int)>();

  int mach_voucher_deallocate(
    int voucher,
  ) {
    return _mach_voucher_deallocate(
      voucher,
    );
  }

  late final _mach_voucher_deallocatePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(mach_port_name_t)>>(
          'mach_voucher_deallocate');
  late final _mach_voucher_deallocate =
      _mach_voucher_deallocatePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_add =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_add');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_add =>
      __dispatch_source_type_data_add;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_or =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_or');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_or =>
      __dispatch_source_type_data_or;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_replace =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_replace');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_replace =>
      __dispatch_source_type_data_replace;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_send =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_send');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_send =>
      __dispatch_source_type_mach_send;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_recv =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_recv');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_recv =>
      __dispatch_source_type_mach_recv;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_memorypressure =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_memorypressure');

  ffi.Pointer<dispatch_source_type_s>
      get _dispatch_source_type_memorypressure =>
          __dispatch_source_type_memorypressure;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_proc =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_proc');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_proc =>
      __dispatch_source_type_proc;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_read =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_read');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_read =>
      __dispatch_source_type_read;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_signal =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_signal');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_signal =>
      __dispatch_source_type_signal;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_timer =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_timer');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_timer =>
      __dispatch_source_type_timer;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_vnode =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_vnode');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_vnode =>
      __dispatch_source_type_vnode;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_write =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_write');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_write =>
      __dispatch_source_type_write;

  Dartdispatch_source_t dispatch_source_create(
    dispatch_source_type_t type,
    int handle,
    int mask,
    Dartdispatch_queue_t? queue,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_source_create(
          type,
          handle,
          mask,
          queue?.ref.pointer ?? ffi.nullptr,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_source_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_source_t Function(dispatch_source_type_t, ffi.UintPtr,
              ffi.UintPtr, dispatch_queue_t)>>('dispatch_source_create');
  late final _dispatch_source_create = _dispatch_source_createPtr.asFunction<
      dispatch_source_t Function(
          dispatch_source_type_t, int, int, dispatch_queue_t)>();

  void dispatch_source_set_event_handler(
    Dartdispatch_source_t source,
    Dartdispatch_block_t? handler,
  ) {
    return _dispatch_source_set_event_handler(
      source.ref.pointer,
      handler?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _dispatch_source_set_event_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_block_t)>>('dispatch_source_set_event_handler');
  late final _dispatch_source_set_event_handler =
      _dispatch_source_set_event_handlerPtr
          .asFunction<void Function(dispatch_source_t, dispatch_block_t)>();

  void dispatch_source_set_event_handler_f(
    Dartdispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_event_handler_f(
      source.ref.pointer,
      handler,
    );
  }

  late final _dispatch_source_set_event_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_event_handler_f');
  late final _dispatch_source_set_event_handler_f =
      _dispatch_source_set_event_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_set_cancel_handler(
    Dartdispatch_source_t source,
    Dartdispatch_block_t? handler,
  ) {
    return _dispatch_source_set_cancel_handler(
      source.ref.pointer,
      handler?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _dispatch_source_set_cancel_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_block_t)>>('dispatch_source_set_cancel_handler');
  late final _dispatch_source_set_cancel_handler =
      _dispatch_source_set_cancel_handlerPtr
          .asFunction<void Function(dispatch_source_t, dispatch_block_t)>();

  void dispatch_source_set_cancel_handler_f(
    Dartdispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_cancel_handler_f(
      source.ref.pointer,
      handler,
    );
  }

  late final _dispatch_source_set_cancel_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_cancel_handler_f');
  late final _dispatch_source_set_cancel_handler_f =
      _dispatch_source_set_cancel_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_cancel(
    Dartdispatch_source_t source,
  ) {
    return _dispatch_source_cancel(
      source.ref.pointer,
    );
  }

  late final _dispatch_source_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_source_t)>>(
          'dispatch_source_cancel');
  late final _dispatch_source_cancel =
      _dispatch_source_cancelPtr.asFunction<void Function(dispatch_source_t)>();

  int dispatch_source_testcancel(
    Dartdispatch_source_t source,
  ) {
    return _dispatch_source_testcancel(
      source.ref.pointer,
    );
  }

  late final _dispatch_source_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_source_t)>>(
          'dispatch_source_testcancel');
  late final _dispatch_source_testcancel = _dispatch_source_testcancelPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_handle(
    Dartdispatch_source_t source,
  ) {
    return _dispatch_source_get_handle(
      source.ref.pointer,
    );
  }

  late final _dispatch_source_get_handlePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(dispatch_source_t)>>(
          'dispatch_source_get_handle');
  late final _dispatch_source_get_handle = _dispatch_source_get_handlePtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_mask(
    Dartdispatch_source_t source,
  ) {
    return _dispatch_source_get_mask(
      source.ref.pointer,
    );
  }

  late final _dispatch_source_get_maskPtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(dispatch_source_t)>>(
          'dispatch_source_get_mask');
  late final _dispatch_source_get_mask = _dispatch_source_get_maskPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_data(
    Dartdispatch_source_t source,
  ) {
    return _dispatch_source_get_data(
      source.ref.pointer,
    );
  }

  late final _dispatch_source_get_dataPtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(dispatch_source_t)>>(
          'dispatch_source_get_data');
  late final _dispatch_source_get_data = _dispatch_source_get_dataPtr
      .asFunction<int Function(dispatch_source_t)>();

  void dispatch_source_merge_data(
    Dartdispatch_source_t source,
    int value,
  ) {
    return _dispatch_source_merge_data(
      source.ref.pointer,
      value,
    );
  }

  late final _dispatch_source_merge_dataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(dispatch_source_t, ffi.UintPtr)>>(
      'dispatch_source_merge_data');
  late final _dispatch_source_merge_data = _dispatch_source_merge_dataPtr
      .asFunction<void Function(dispatch_source_t, int)>();

  void dispatch_source_set_timer(
    Dartdispatch_source_t source,
    Dartdispatch_time_t start,
    int interval,
    int leeway,
  ) {
    return _dispatch_source_set_timer(
      source.ref.pointer,
      start,
      interval,
      leeway,
    );
  }

  late final _dispatch_source_set_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t, dispatch_time_t, ffi.Uint64,
              ffi.Uint64)>>('dispatch_source_set_timer');
  late final _dispatch_source_set_timer = _dispatch_source_set_timerPtr
      .asFunction<void Function(dispatch_source_t, int, int, int)>();

  void dispatch_source_set_registration_handler(
    Dartdispatch_source_t source,
    Dartdispatch_block_t? handler,
  ) {
    return _dispatch_source_set_registration_handler(
      source.ref.pointer,
      handler?.ref.pointer ?? ffi.nullptr,
    );
  }

  late final _dispatch_source_set_registration_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_block_t)>>('dispatch_source_set_registration_handler');
  late final _dispatch_source_set_registration_handler =
      _dispatch_source_set_registration_handlerPtr
          .asFunction<void Function(dispatch_source_t, dispatch_block_t)>();

  void dispatch_source_set_registration_handler_f(
    Dartdispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_registration_handler_f(
      source.ref.pointer,
      handler,
    );
  }

  late final _dispatch_source_set_registration_handler_fPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_source_t, dispatch_function_t)>>(
      'dispatch_source_set_registration_handler_f');
  late final _dispatch_source_set_registration_handler_f =
      _dispatch_source_set_registration_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  Dartdispatch_group_t dispatch_group_create() {
    return objc.NSObject.castFromPointer(_dispatch_group_create(),
        retain: false, release: true);
  }

  late final _dispatch_group_createPtr =
      _lookup<ffi.NativeFunction<dispatch_group_t Function()>>(
          'dispatch_group_create');
  late final _dispatch_group_create =
      _dispatch_group_createPtr.asFunction<dispatch_group_t Function()>();

  void dispatch_group_async(
    Dartdispatch_group_t group,
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_group_async(
      group.ref.pointer,
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_group_asyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_group_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_group_async');
  late final _dispatch_group_async = _dispatch_group_asyncPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_group_async_f(
    Dartdispatch_group_t group,
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_async_f(
      group.ref.pointer,
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_group_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_async_f');
  late final _dispatch_group_async_f = _dispatch_group_async_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  int dispatch_group_wait(
    Dartdispatch_group_t group,
    Dartdispatch_time_t timeout,
  ) {
    return _dispatch_group_wait(
      group.ref.pointer,
      timeout,
    );
  }

  late final _dispatch_group_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              dispatch_group_t, dispatch_time_t)>>('dispatch_group_wait');
  late final _dispatch_group_wait =
      _dispatch_group_waitPtr.asFunction<int Function(dispatch_group_t, int)>();

  void dispatch_group_notify(
    Dartdispatch_group_t group,
    Dartdispatch_queue_t queue,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_group_notify(
      group.ref.pointer,
      queue.ref.pointer,
      block.ref.pointer,
    );
  }

  late final _dispatch_group_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_group_t, dispatch_queue_t,
              dispatch_block_t)>>('dispatch_group_notify');
  late final _dispatch_group_notify = _dispatch_group_notifyPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, dispatch_block_t)>();

  void dispatch_group_notify_f(
    Dartdispatch_group_t group,
    Dartdispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_notify_f(
      group.ref.pointer,
      queue.ref.pointer,
      context,
      work,
    );
  }

  late final _dispatch_group_notify_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_notify_f');
  late final _dispatch_group_notify_f = _dispatch_group_notify_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  void dispatch_group_enter(
    Dartdispatch_group_t group,
  ) {
    return _dispatch_group_enter(
      group.ref.pointer,
    );
  }

  late final _dispatch_group_enterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_enter');
  late final _dispatch_group_enter =
      _dispatch_group_enterPtr.asFunction<void Function(dispatch_group_t)>();

  void dispatch_group_leave(
    Dartdispatch_group_t group,
  ) {
    return _dispatch_group_leave(
      group.ref.pointer,
    );
  }

  late final _dispatch_group_leavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_leave');
  late final _dispatch_group_leave =
      _dispatch_group_leavePtr.asFunction<void Function(dispatch_group_t)>();

  Dartdispatch_semaphore_t dispatch_semaphore_create(
    int value,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_semaphore_create(
          value,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_semaphore_createPtr =
      _lookup<ffi.NativeFunction<dispatch_semaphore_t Function(ffi.IntPtr)>>(
          'dispatch_semaphore_create');
  late final _dispatch_semaphore_create = _dispatch_semaphore_createPtr
      .asFunction<dispatch_semaphore_t Function(int)>();

  int dispatch_semaphore_wait(
    Dartdispatch_semaphore_t dsema,
    Dartdispatch_time_t timeout,
  ) {
    return _dispatch_semaphore_wait(
      dsema.ref.pointer,
      timeout,
    );
  }

  late final _dispatch_semaphore_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(dispatch_semaphore_t,
              dispatch_time_t)>>('dispatch_semaphore_wait');
  late final _dispatch_semaphore_wait = _dispatch_semaphore_waitPtr
      .asFunction<int Function(dispatch_semaphore_t, int)>();

  int dispatch_semaphore_signal(
    Dartdispatch_semaphore_t dsema,
  ) {
    return _dispatch_semaphore_signal(
      dsema.ref.pointer,
    );
  }

  late final _dispatch_semaphore_signalPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_semaphore_t)>>(
          'dispatch_semaphore_signal');
  late final _dispatch_semaphore_signal = _dispatch_semaphore_signalPtr
      .asFunction<int Function(dispatch_semaphore_t)>();

  void dispatch_once(
    ffi.Pointer<dispatch_once_t> predicate,
    Dartdispatch_block_t block,
  ) {
    return _dispatch_once(
      predicate,
      block.ref.pointer,
    );
  }

  late final _dispatch_oncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dispatch_once_t>,
              dispatch_block_t)>>('dispatch_once');
  late final _dispatch_once = _dispatch_oncePtr.asFunction<
      void Function(ffi.Pointer<dispatch_once_t>, dispatch_block_t)>();

  void dispatch_once_f(
    ffi.Pointer<dispatch_once_t> predicate,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t function,
  ) {
    return _dispatch_once_f(
      predicate,
      context,
      function,
    );
  }

  late final _dispatch_once_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_once_f');
  late final _dispatch_once_f = _dispatch_once_fPtr.asFunction<
      void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  late final ffi.Pointer<dispatch_data_s> __dispatch_data_empty =
      _lookup<dispatch_data_s>('_dispatch_data_empty');

  ffi.Pointer<dispatch_data_s> get _dispatch_data_empty =>
      __dispatch_data_empty;

  late final ffi.Pointer<dispatch_block_t> __dispatch_data_destructor_free =
      _lookup<dispatch_block_t>('_dispatch_data_destructor_free');

  Dartdispatch_block_t get _dispatch_data_destructor_free =>
      ObjCBlock_ffiVoid.castFromPointer(__dispatch_data_destructor_free.value,
          retain: true, release: true);

  set _dispatch_data_destructor_free(Dartdispatch_block_t value) {
    ObjCBlock_ffiVoid.castFromPointer(__dispatch_data_destructor_free.value,
            retain: false, release: true)
        .ref
        .release();
    __dispatch_data_destructor_free.value = value.ref.retainAndReturnPointer();
  }

  late final ffi.Pointer<dispatch_block_t> __dispatch_data_destructor_munmap =
      _lookup<dispatch_block_t>('_dispatch_data_destructor_munmap');

  Dartdispatch_block_t get _dispatch_data_destructor_munmap =>
      ObjCBlock_ffiVoid.castFromPointer(__dispatch_data_destructor_munmap.value,
          retain: true, release: true);

  set _dispatch_data_destructor_munmap(Dartdispatch_block_t value) {
    ObjCBlock_ffiVoid.castFromPointer(__dispatch_data_destructor_munmap.value,
            retain: false, release: true)
        .ref
        .release();
    __dispatch_data_destructor_munmap.value =
        value.ref.retainAndReturnPointer();
  }

  Dartdispatch_data_t dispatch_data_create(
    ffi.Pointer<ffi.Void> buffer,
    int size,
    Dartdispatch_queue_t? queue,
    Dartdispatch_block_t? destructor,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_data_create(
          buffer,
          size,
          queue?.ref.pointer ?? ffi.nullptr,
          destructor?.ref.pointer ?? ffi.nullptr,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_data_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(ffi.Pointer<ffi.Void>, ffi.Size,
              dispatch_queue_t, dispatch_block_t)>>('dispatch_data_create');
  late final _dispatch_data_create = _dispatch_data_createPtr.asFunction<
      dispatch_data_t Function(
          ffi.Pointer<ffi.Void>, int, dispatch_queue_t, dispatch_block_t)>();

  int dispatch_data_get_size(
    Dartdispatch_data_t data,
  ) {
    return _dispatch_data_get_size(
      data.ref.pointer,
    );
  }

  late final _dispatch_data_get_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(dispatch_data_t)>>(
          'dispatch_data_get_size');
  late final _dispatch_data_get_size =
      _dispatch_data_get_sizePtr.asFunction<int Function(dispatch_data_t)>();

  Dartdispatch_data_t dispatch_data_create_map(
    Dartdispatch_data_t data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer_ptr,
    ffi.Pointer<ffi.Size> size_ptr,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_data_create_map(
          data.ref.pointer,
          buffer_ptr,
          size_ptr,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_data_create_mapPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('dispatch_data_create_map');
  late final _dispatch_data_create_map =
      _dispatch_data_create_mapPtr.asFunction<
          dispatch_data_t Function(dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  Dartdispatch_data_t dispatch_data_create_concat(
    Dartdispatch_data_t data1,
    Dartdispatch_data_t data2,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_data_create_concat(
          data1.ref.pointer,
          data2.ref.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_data_create_concatPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t,
              dispatch_data_t)>>('dispatch_data_create_concat');
  late final _dispatch_data_create_concat = _dispatch_data_create_concatPtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, dispatch_data_t)>();

  Dartdispatch_data_t dispatch_data_create_subrange(
    Dartdispatch_data_t data,
    int offset,
    int length,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_data_create_subrange(
          data.ref.pointer,
          offset,
          length,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_data_create_subrangePtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, ffi.Size,
              ffi.Size)>>('dispatch_data_create_subrange');
  late final _dispatch_data_create_subrange = _dispatch_data_create_subrangePtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, int, int)>();

  bool dispatch_data_apply(
    Dartdispatch_data_t data,
    Dartdispatch_data_applier_t applier,
  ) {
    return _dispatch_data_apply(
      data.ref.pointer,
      applier.ref.pointer,
    );
  }

  late final _dispatch_data_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(dispatch_data_t,
              dispatch_data_applier_t)>>('dispatch_data_apply');
  late final _dispatch_data_apply = _dispatch_data_applyPtr
      .asFunction<bool Function(dispatch_data_t, dispatch_data_applier_t)>();

  Dartdispatch_data_t dispatch_data_copy_region(
    Dartdispatch_data_t data,
    int location,
    ffi.Pointer<ffi.Size> offset_ptr,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_data_copy_region(
          data.ref.pointer,
          location,
          offset_ptr,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_data_copy_regionPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('dispatch_data_copy_region');
  late final _dispatch_data_copy_region =
      _dispatch_data_copy_regionPtr.asFunction<
          dispatch_data_t Function(
              dispatch_data_t, int, ffi.Pointer<ffi.Size>)>();

  void dispatch_read(
    Dartdispatch_fd_t fd,
    int length,
    Dartdispatch_queue_t queue,
    objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)> handler,
  ) {
    return _dispatch_read(
      fd,
      length,
      queue.ref.pointer,
      handler.ref.pointer,
    );
  }

  late final _dispatch_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_fd_t, ffi.Size, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('dispatch_read');
  late final _dispatch_read = _dispatch_readPtr.asFunction<
      void Function(
          int, int, dispatch_queue_t, ffi.Pointer<objc.ObjCBlockImpl>)>();

  void dispatch_write(
    Dartdispatch_fd_t fd,
    Dartdispatch_data_t data,
    Dartdispatch_queue_t queue,
    objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)> handler,
  ) {
    return _dispatch_write(
      fd,
      data.ref.pointer,
      queue.ref.pointer,
      handler.ref.pointer,
    );
  }

  late final _dispatch_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_fd_t, dispatch_data_t, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('dispatch_write');
  late final _dispatch_write = _dispatch_writePtr.asFunction<
      void Function(int, dispatch_data_t, dispatch_queue_t,
          ffi.Pointer<objc.ObjCBlockImpl>)>();

  Dartdispatch_io_t dispatch_io_create(
    Dartdispatch_io_type_t type,
    Dartdispatch_fd_t fd,
    Dartdispatch_queue_t queue,
    objc.ObjCBlock<ffi.Void Function(ffi.Int)> cleanup_handler,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_io_create(
          type,
          fd,
          queue.ref.pointer,
          cleanup_handler.ref.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_io_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_io_t Function(
              dispatch_io_type_t,
              dispatch_fd_t,
              dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('dispatch_io_create');
  late final _dispatch_io_create = _dispatch_io_createPtr.asFunction<
      dispatch_io_t Function(
          int, int, dispatch_queue_t, ffi.Pointer<objc.ObjCBlockImpl>)>();

  Dartdispatch_io_t dispatch_io_create_with_path(
    Dartdispatch_io_type_t type,
    ffi.Pointer<ffi.Char> path,
    int oflag,
    Dart__uint16_t mode,
    Dartdispatch_queue_t queue,
    objc.ObjCBlock<ffi.Void Function(ffi.Int)> cleanup_handler,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_io_create_with_path(
          type,
          path,
          oflag,
          mode,
          queue.ref.pointer,
          cleanup_handler.ref.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_io_create_with_pathPtr = _lookup<
          ffi.NativeFunction<
              dispatch_io_t Function(
                  dispatch_io_type_t,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  mode_t,
                  dispatch_queue_t,
                  ffi.Pointer<objc.ObjCBlockImpl>)>>(
      'dispatch_io_create_with_path');
  late final _dispatch_io_create_with_path =
      _dispatch_io_create_with_pathPtr.asFunction<
          dispatch_io_t Function(int, ffi.Pointer<ffi.Char>, int, int,
              dispatch_queue_t, ffi.Pointer<objc.ObjCBlockImpl>)>();

  Dartdispatch_io_t dispatch_io_create_with_io(
    Dartdispatch_io_type_t type,
    Dartdispatch_io_t io,
    Dartdispatch_queue_t queue,
    objc.ObjCBlock<ffi.Void Function(ffi.Int)> cleanup_handler,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_io_create_with_io(
          type,
          io.ref.pointer,
          queue.ref.pointer,
          cleanup_handler.ref.pointer,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_io_create_with_ioPtr = _lookup<
      ffi.NativeFunction<
          dispatch_io_t Function(
              dispatch_io_type_t,
              dispatch_io_t,
              dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlockImpl>)>>('dispatch_io_create_with_io');
  late final _dispatch_io_create_with_io =
      _dispatch_io_create_with_ioPtr.asFunction<
          dispatch_io_t Function(int, dispatch_io_t, dispatch_queue_t,
              ffi.Pointer<objc.ObjCBlockImpl>)>();

  void dispatch_io_read(
    Dartdispatch_io_t channel,
    Dart__int64_t offset,
    int length,
    Dartdispatch_queue_t queue,
    Dartdispatch_io_handler_t io_handler,
  ) {
    return _dispatch_io_read(
      channel.ref.pointer,
      offset,
      length,
      queue.ref.pointer,
      io_handler.ref.pointer,
    );
  }

  late final _dispatch_io_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, off_t, ffi.Size, dispatch_queue_t,
              dispatch_io_handler_t)>>('dispatch_io_read');
  late final _dispatch_io_read = _dispatch_io_readPtr.asFunction<
      void Function(
          dispatch_io_t, int, int, dispatch_queue_t, dispatch_io_handler_t)>();

  void dispatch_io_write(
    Dartdispatch_io_t channel,
    Dart__int64_t offset,
    Dartdispatch_data_t data,
    Dartdispatch_queue_t queue,
    Dartdispatch_io_handler_t io_handler,
  ) {
    return _dispatch_io_write(
      channel.ref.pointer,
      offset,
      data.ref.pointer,
      queue.ref.pointer,
      io_handler.ref.pointer,
    );
  }

  late final _dispatch_io_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, off_t, dispatch_data_t,
              dispatch_queue_t, dispatch_io_handler_t)>>('dispatch_io_write');
  late final _dispatch_io_write = _dispatch_io_writePtr.asFunction<
      void Function(dispatch_io_t, int, dispatch_data_t, dispatch_queue_t,
          dispatch_io_handler_t)>();

  void dispatch_io_close(
    Dartdispatch_io_t channel,
    Dartdispatch_io_close_flags_t flags,
  ) {
    return _dispatch_io_close(
      channel.ref.pointer,
      flags,
    );
  }

  late final _dispatch_io_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_io_t, dispatch_io_close_flags_t)>>('dispatch_io_close');
  late final _dispatch_io_close =
      _dispatch_io_closePtr.asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_barrier(
    Dartdispatch_io_t channel,
    Dartdispatch_block_t barrier,
  ) {
    return _dispatch_io_barrier(
      channel.ref.pointer,
      barrier.ref.pointer,
    );
  }

  late final _dispatch_io_barrierPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(dispatch_io_t, dispatch_block_t)>>(
      'dispatch_io_barrier');
  late final _dispatch_io_barrier = _dispatch_io_barrierPtr
      .asFunction<void Function(dispatch_io_t, dispatch_block_t)>();

  Dartdispatch_fd_t dispatch_io_get_descriptor(
    Dartdispatch_io_t channel,
  ) {
    return _dispatch_io_get_descriptor(
      channel.ref.pointer,
    );
  }

  late final _dispatch_io_get_descriptorPtr =
      _lookup<ffi.NativeFunction<dispatch_fd_t Function(dispatch_io_t)>>(
          'dispatch_io_get_descriptor');
  late final _dispatch_io_get_descriptor =
      _dispatch_io_get_descriptorPtr.asFunction<int Function(dispatch_io_t)>();

  void dispatch_io_set_high_water(
    Dartdispatch_io_t channel,
    int high_water,
  ) {
    return _dispatch_io_set_high_water(
      channel.ref.pointer,
      high_water,
    );
  }

  late final _dispatch_io_set_high_waterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_io_t, ffi.Size)>>(
          'dispatch_io_set_high_water');
  late final _dispatch_io_set_high_water = _dispatch_io_set_high_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_low_water(
    Dartdispatch_io_t channel,
    int low_water,
  ) {
    return _dispatch_io_set_low_water(
      channel.ref.pointer,
      low_water,
    );
  }

  late final _dispatch_io_set_low_waterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_io_t, ffi.Size)>>(
          'dispatch_io_set_low_water');
  late final _dispatch_io_set_low_water = _dispatch_io_set_low_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_interval(
    Dartdispatch_io_t channel,
    int interval,
    Dartdispatch_io_interval_flags_t flags,
  ) {
    return _dispatch_io_set_interval(
      channel.ref.pointer,
      interval,
      flags,
    );
  }

  late final _dispatch_io_set_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, ffi.Uint64,
              dispatch_io_interval_flags_t)>>('dispatch_io_set_interval');
  late final _dispatch_io_set_interval = _dispatch_io_set_intervalPtr
      .asFunction<void Function(dispatch_io_t, int, int)>();

  Dartdispatch_workloop_t dispatch_workloop_create(
    ffi.Pointer<ffi.Char> label,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_workloop_create(
          label,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_workloop_createPtr = _lookup<
          ffi
          .NativeFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>>(
      'dispatch_workloop_create');
  late final _dispatch_workloop_create = _dispatch_workloop_createPtr
      .asFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>();

  Dartdispatch_workloop_t dispatch_workloop_create_inactive(
    ffi.Pointer<ffi.Char> label,
  ) {
    return objc.NSObject.castFromPointer(
        _dispatch_workloop_create_inactive(
          label,
        ),
        retain: false,
        release: true);
  }

  late final _dispatch_workloop_create_inactivePtr = _lookup<
          ffi
          .NativeFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>>(
      'dispatch_workloop_create_inactive');
  late final _dispatch_workloop_create_inactive =
      _dispatch_workloop_create_inactivePtr
          .asFunction<dispatch_workloop_t Function(ffi.Pointer<ffi.Char>)>();

  void dispatch_workloop_set_autorelease_frequency(
    Dartdispatch_workloop_t workloop,
    dispatch_autorelease_frequency_t frequency,
  ) {
    return _dispatch_workloop_set_autorelease_frequency(
      workloop.ref.pointer,
      frequency.value,
    );
  }

  late final _dispatch_workloop_set_autorelease_frequencyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_workloop_t, ffi.UnsignedLong)>>(
      'dispatch_workloop_set_autorelease_frequency');
  late final _dispatch_workloop_set_autorelease_frequency =
      _dispatch_workloop_set_autorelease_frequencyPtr
          .asFunction<void Function(dispatch_workloop_t, int)>();

  void dispatch_workloop_set_os_workgroup(
    Dartdispatch_workloop_t workloop,
    Dartos_workgroup_t workgroup,
  ) {
    return _dispatch_workloop_set_os_workgroup(
      workloop.ref.pointer,
      workgroup.ref.pointer,
    );
  }

  late final _dispatch_workloop_set_os_workgroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_workloop_t,
              os_workgroup_t)>>('dispatch_workloop_set_os_workgroup');
  late final _dispatch_workloop_set_os_workgroup =
      _dispatch_workloop_set_os_workgroupPtr
          .asFunction<void Function(dispatch_workloop_t, os_workgroup_t)>();

  int CFReadStreamGetTypeID() {
    return _CFReadStreamGetTypeID();
  }

  late final _CFReadStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID =
      _CFReadStreamGetTypeIDPtr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID() {
    return _CFWriteStreamGetTypeID();
  }

  late final _CFWriteStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID =
      _CFWriteStreamGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyDataWritten =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyDataWritten');

  CFStreamPropertyKey get kCFStreamPropertyDataWritten =>
      _kCFStreamPropertyDataWritten.value;

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy =
      _CFReadStreamCreateWithBytesNoCopyPtr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBufferPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer =
      _CFWriteStreamCreateWithBufferPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffersPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers =
      _CFWriteStreamCreateWithAllocatedBuffersPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFilePtr = _lookup<
          ffi
          .NativeFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile = _CFReadStreamCreateWithFilePtr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFilePtr = _lookup<
          ffi
          .NativeFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile = _CFWriteStreamCreateWithFilePtr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair = _CFStreamCreateBoundPairPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
          ffi.Pointer<CFWriteStreamRef>, int)>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyAppendToFile =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyAppendToFile');

  CFStreamPropertyKey get kCFStreamPropertyAppendToFile =>
      _kCFStreamPropertyAppendToFile.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertyFileCurrentOffset =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyFileCurrentOffset');

  CFStreamPropertyKey get kCFStreamPropertyFileCurrentOffset =>
      _kCFStreamPropertyFileCurrentOffset.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketNativeHandle =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketNativeHandle');

  CFStreamPropertyKey get kCFStreamPropertySocketNativeHandle =>
      _kCFStreamPropertySocketNativeHandle.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemoteHostName =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemoteHostName');

  CFStreamPropertyKey get kCFStreamPropertySocketRemoteHostName =>
      _kCFStreamPropertySocketRemoteHostName.value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemotePortNumber =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemotePortNumber');

  CFStreamPropertyKey get kCFStreamPropertySocketRemotePortNumber =>
      _kCFStreamPropertySocketRemotePortNumber.value;

  late final ffi.Pointer<ffi.Int> _kCFStreamErrorDomainSOCKS =
      _lookup<ffi.Int>('kCFStreamErrorDomainSOCKS');

  int get kCFStreamErrorDomainSOCKS => _kCFStreamErrorDomainSOCKS.value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxy =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxy');

  CFStringRef get kCFStreamPropertySOCKSProxy =>
      _kCFStreamPropertySOCKSProxy.value;

  set kCFStreamPropertySOCKSProxy(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyHost =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyHost');

  CFStringRef get kCFStreamPropertySOCKSProxyHost =>
      _kCFStreamPropertySOCKSProxyHost.value;

  set kCFStreamPropertySOCKSProxyHost(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyPort =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyPort');

  CFStringRef get kCFStreamPropertySOCKSProxyPort =>
      _kCFStreamPropertySOCKSProxyPort.value;

  set kCFStreamPropertySOCKSProxyPort(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyPort.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSVersion =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSVersion');

  CFStringRef get kCFStreamPropertySOCKSVersion =>
      _kCFStreamPropertySOCKSVersion.value;

  set kCFStreamPropertySOCKSVersion(CFStringRef value) =>
      _kCFStreamPropertySOCKSVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion4 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion4');

  CFStringRef get kCFStreamSocketSOCKSVersion4 =>
      _kCFStreamSocketSOCKSVersion4.value;

  set kCFStreamSocketSOCKSVersion4(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion4.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion5 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion5');

  CFStringRef get kCFStreamSocketSOCKSVersion5 =>
      _kCFStreamSocketSOCKSVersion5.value;

  set kCFStreamSocketSOCKSVersion5(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion5.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSUser =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSUser');

  CFStringRef get kCFStreamPropertySOCKSUser =>
      _kCFStreamPropertySOCKSUser.value;

  set kCFStreamPropertySOCKSUser(CFStringRef value) =>
      _kCFStreamPropertySOCKSUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSPassword =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSPassword');

  CFStringRef get kCFStreamPropertySOCKSPassword =>
      _kCFStreamPropertySOCKSPassword.value;

  set kCFStreamPropertySOCKSPassword(CFStringRef value) =>
      _kCFStreamPropertySOCKSPassword.value = value;

  late final ffi.Pointer<ffi.Int> _kCFStreamErrorDomainSSL =
      _lookup<ffi.Int>('kCFStreamErrorDomainSSL');

  int get kCFStreamErrorDomainSSL => _kCFStreamErrorDomainSSL.value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySocketSecurityLevel =
      _lookup<CFStringRef>('kCFStreamPropertySocketSecurityLevel');

  CFStringRef get kCFStreamPropertySocketSecurityLevel =>
      _kCFStreamPropertySocketSecurityLevel.value;

  set kCFStreamPropertySocketSecurityLevel(CFStringRef value) =>
      _kCFStreamPropertySocketSecurityLevel.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelNone =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNone');

  CFStringRef get kCFStreamSocketSecurityLevelNone =>
      _kCFStreamSocketSecurityLevelNone.value;

  set kCFStreamSocketSecurityLevelNone(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv2 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv2');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv2 =>
      _kCFStreamSocketSecurityLevelSSLv2.value;

  set kCFStreamSocketSecurityLevelSSLv2(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv3 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv3');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv3 =>
      _kCFStreamSocketSecurityLevelSSLv3.value;

  set kCFStreamSocketSecurityLevelSSLv3(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelTLSv1 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelTLSv1');

  CFStringRef get kCFStreamSocketSecurityLevelTLSv1 =>
      _kCFStreamSocketSecurityLevelTLSv1.value;

  set kCFStreamSocketSecurityLevelTLSv1(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNegotiatedSSL');

  CFStringRef get kCFStreamSocketSecurityLevelNegotiatedSSL =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value;

  set kCFStreamSocketSecurityLevelNegotiatedSSL(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamPropertyShouldCloseNativeSocket =
      _lookup<CFStringRef>('kCFStreamPropertyShouldCloseNativeSocket');

  CFStringRef get kCFStreamPropertyShouldCloseNativeSocket =>
      _kCFStreamPropertyShouldCloseNativeSocket.value;

  set kCFStreamPropertyShouldCloseNativeSocket(CFStringRef value) =>
      _kCFStreamPropertyShouldCloseNativeSocket.value = value;

  void CFStreamCreatePairWithSocket(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket =
      _CFStreamCreatePairWithSocketPtr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost =
      _CFStreamCreatePairWithSocketToHostPtr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature =
      _CFStreamCreatePairWithPeerSocketSignaturePtr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  CFStreamStatus CFReadStreamGetStatus(
    CFReadStreamRef stream,
  ) {
    return CFStreamStatus.fromValue(_CFReadStreamGetStatus(
      stream,
    ));
  }

  late final _CFReadStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus =
      _CFReadStreamGetStatusPtr.asFunction<int Function(CFReadStreamRef)>();

  CFStreamStatus CFWriteStreamGetStatus(
    CFWriteStreamRef stream,
  ) {
    return CFStreamStatus.fromValue(_CFWriteStreamGetStatus(
      stream,
    ));
  }

  late final _CFWriteStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus =
      _CFWriteStreamGetStatusPtr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError(
      stream,
    );
  }

  late final _CFReadStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError = _CFReadStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError(
      stream,
    );
  }

  late final _CFWriteStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError = _CFWriteStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen(
      stream,
    );
  }

  late final _CFReadStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen =
      _CFReadStreamOpenPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen(
      stream,
    );
  }

  late final _CFWriteStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen =
      _CFWriteStreamOpenPtr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose(
      stream,
    );
  }

  late final _CFReadStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose =
      _CFReadStreamClosePtr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose(
      stream,
    );
  }

  late final _CFWriteStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose =
      _CFWriteStreamClosePtr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable = _CFReadStreamHasBytesAvailablePtr
      .asFunction<int Function(CFReadStreamRef)>();

  int CFReadStreamRead(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamReadPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead = _CFReadStreamReadPtr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer = _CFReadStreamGetBufferPtr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytesPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes = _CFWriteStreamCanAcceptBytesPtr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite = _CFWriteStreamWritePtr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty = _CFReadStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty = _CFWriteStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty = _CFReadStreamSetPropertyPtr.asFunction<
      int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty =
      _CFWriteStreamSetPropertyPtr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient = _CFReadStreamSetClientPtr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient = _CFWriteStreamSetClientPtr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop =
      _CFReadStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop =
      _CFWriteStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop =
      _CFReadStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop =
      _CFWriteStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue(
    CFReadStreamRef stream,
    Dartdispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue(
      stream,
      q.ref.pointer,
    );
  }

  late final _CFReadStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue = _CFReadStreamSetDispatchQueuePtr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue(
    CFWriteStreamRef stream,
    Dartdispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue(
      stream,
      q.ref.pointer,
    );
  }

  late final _CFWriteStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue = _CFWriteStreamSetDispatchQueuePtr
      .asFunction<void Function(CFWriteStreamRef, dispatch_queue_t)>();

  Dartdispatch_queue_t CFReadStreamCopyDispatchQueue(
    CFReadStreamRef stream,
  ) {
    return objc.NSObject.castFromPointer(
        _CFReadStreamCopyDispatchQueue(
          stream,
        ),
        retain: true,
        release: true);
  }

  late final _CFReadStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue = _CFReadStreamCopyDispatchQueuePtr
      .asFunction<dispatch_queue_t Function(CFReadStreamRef)>();

  Dartdispatch_queue_t CFWriteStreamCopyDispatchQueue(
    CFWriteStreamRef stream,
  ) {
    return objc.NSObject.castFromPointer(
        _CFWriteStreamCopyDispatchQueue(
          stream,
        ),
        retain: true,
        release: true);
  }

  late final _CFWriteStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue =
      _CFWriteStreamCopyDispatchQueuePtr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError(
      stream,
    );
  }

  late final _CFReadStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError = _CFReadStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError(
      stream,
    );
  }

  late final _CFWriteStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError = _CFWriteStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData =
      _CFPropertyListCreateFromXMLDataPtr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData = _CFPropertyListCreateXMLDataPtr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopyPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy =
      _CFPropertyListCreateDeepCopyPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  DartBoolean CFPropertyListIsValid(
    CFPropertyListRef plist,
    CFPropertyListFormat format,
  ) {
    return _CFPropertyListIsValid(
      plist,
      format.value,
    );
  }

  late final _CFPropertyListIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPropertyListRef, CFIndex)>>(
          'CFPropertyListIsValid');
  late final _CFPropertyListIsValid = _CFPropertyListIsValidPtr.asFunction<
      int Function(CFPropertyListRef, int)>();

  DartCFIndex CFPropertyListWriteToStream(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    CFPropertyListFormat format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream(
      propertyList,
      stream,
      format.value,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, CFIndex,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream =
      _CFPropertyListWriteToStreamPtr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<CFIndex> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream =
      _CFPropertyListCreateFromStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<CFIndex> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData =
      _CFPropertyListCreateWithDataPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<CFIndex> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream =
      _CFPropertyListCreateWithStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFErrorRef>)>();

  DartCFIndex CFPropertyListWrite(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    CFPropertyListFormat format,
    DartCFOptionFlags options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite(
      propertyList,
      stream,
      format.value,
      options,
      error,
    );
  }

  late final _CFPropertyListWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, CFIndex,
              CFOptionFlags, ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite = _CFPropertyListWritePtr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    CFPropertyListFormat format,
    DartCFOptionFlags options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData(
      allocator,
      propertyList,
      format.value,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData =
      _CFPropertyListCreateDataPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFSetCallBacks> _kCFTypeSetCallBacks =
      _lookup<CFSetCallBacks>('kCFTypeSetCallBacks');

  CFSetCallBacks get kCFTypeSetCallBacks => _kCFTypeSetCallBacks.ref;

  late final ffi.Pointer<CFSetCallBacks> _kCFCopyStringSetCallBacks =
      _lookup<CFSetCallBacks>('kCFCopyStringSetCallBacks');

  CFSetCallBacks get kCFCopyStringSetCallBacks =>
      _kCFCopyStringSetCallBacks.ref;

  int CFSetGetTypeID() {
    return _CFSetGetTypeID();
  }

  late final _CFSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID = _CFSetGetTypeIDPtr.asFunction<int Function()>();

  CFSetRef CFSetCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate = _CFSetCreatePtr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy = _CFSetCreateCopyPtr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable = _CFSetCreateMutablePtr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy = _CFSetCreateMutableCopyPtr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount =
      _CFSetGetCountPtr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValuePtr = _lookup<
          ffi
          .NativeFunction<CFIndex Function(CFSetRef, ffi.Pointer<ffi.Void>)>>(
      'CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue = _CFSetGetCountOfValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValuePtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>)>>(
      'CFSetContainsValue');
  late final _CFSetContainsValue = _CFSetContainsValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue = _CFSetGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent = _CFSetGetValueIfPresentPtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues = _CFSetGetValuesPtr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction = _CFSetApplyFunctionPtr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue(
      theSet,
      value,
    );
  }

  late final _CFSetAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue = _CFSetAddValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue = _CFSetReplaceValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue(
      theSet,
      value,
    );
  }

  late final _CFSetSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue = _CFSetSetValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue = _CFSetRemoveValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues(
      theSet,
    );
  }

  late final _CFSetRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues =
      _CFSetRemoveAllValuesPtr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID() {
    return _CFTreeGetTypeID();
  }

  late final _CFTreeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID =
      _CFTreeGetTypeIDPtr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate(
      allocator,
      context,
    );
  }

  late final _CFTreeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate = _CFTreeCreatePtr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent(
      tree,
    );
  }

  late final _CFTreeGetParentPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent =
      _CFTreeGetParentPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling(
      tree,
    );
  }

  late final _CFTreeGetNextSiblingPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling =
      _CFTreeGetNextSiblingPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild(
      tree,
    );
  }

  late final _CFTreeGetFirstChildPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild =
      _CFTreeGetFirstChildPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext(
      tree,
      context,
    );
  }

  late final _CFTreeGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext = _CFTreeGetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount(
      tree,
    );
  }

  late final _CFTreeGetChildCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount =
      _CFTreeGetChildCountPtr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndexPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex = _CFTreeGetChildAtIndexPtr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren = _CFTreeGetChildrenPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren =
      _CFTreeApplyFunctionToChildrenPtr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot(
      tree,
    );
  }

  late final _CFTreeFindRootPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot =
      _CFTreeFindRootPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext(
      tree,
      context,
    );
  }

  late final _CFTreeSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext = _CFTreeSetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild =
      _CFTreePrependChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild =
      _CFTreeAppendChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling =
      _CFTreeInsertSiblingPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove(
      tree,
    );
  }

  late final _CFTreeRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove =
      _CFTreeRemovePtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren =
      _CFTreeRemoveAllChildrenPtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren = _CFTreeSortChildrenPtr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResourcePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource =
      _CFURLCreateDataAndPropertiesFromResourcePtr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource =
      _CFURLWriteDataAndPropertiesToResourcePtr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResourcePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource = _CFURLDestroyResourcePtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResourcePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource =
      _CFURLCreatePropertyFromResourcePtr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLFileExists =
      _lookup<CFStringRef>('kCFURLFileExists');

  CFStringRef get kCFURLFileExists => _kCFURLFileExists.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileDirectoryContents =
      _lookup<CFStringRef>('kCFURLFileDirectoryContents');

  CFStringRef get kCFURLFileDirectoryContents =>
      _kCFURLFileDirectoryContents.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLength =
      _lookup<CFStringRef>('kCFURLFileLength');

  CFStringRef get kCFURLFileLength => _kCFURLFileLength.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLastModificationTime =
      _lookup<CFStringRef>('kCFURLFileLastModificationTime');

  CFStringRef get kCFURLFileLastModificationTime =>
      _kCFURLFileLastModificationTime.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFilePOSIXMode =
      _lookup<CFStringRef>('kCFURLFilePOSIXMode');

  CFStringRef get kCFURLFilePOSIXMode => _kCFURLFilePOSIXMode.value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileOwnerID =
      _lookup<CFStringRef>('kCFURLFileOwnerID');

  CFStringRef get kCFURLFileOwnerID => _kCFURLFileOwnerID.value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusCode =
      _lookup<CFStringRef>('kCFURLHTTPStatusCode');

  CFStringRef get kCFURLHTTPStatusCode => _kCFURLHTTPStatusCode.value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusLine =
      _lookup<CFStringRef>('kCFURLHTTPStatusLine');

  CFStringRef get kCFURLHTTPStatusLine => _kCFURLHTTPStatusLine.value;

  int CFUUIDGetTypeID() {
    return _CFUUIDGetTypeID();
  }

  late final _CFUUIDGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID =
      _CFUUIDGetTypeIDPtr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate(
      alloc,
    );
  }

  late final _CFUUIDCreatePtr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate =
      _CFUUIDCreatePtr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes = _CFUUIDCreateWithBytesPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromStringPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString = _CFUUIDCreateFromStringPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString = _CFUUIDCreateStringPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes =
      _CFUUIDGetConstantUUIDWithBytesPtr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytesPtr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes =
      _CFUUIDGetUUIDBytesPtr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytesPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes = _CFUUIDCreateFromUUIDBytesPtr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL() {
    return _CFCopyHomeDirectoryURL();
  }

  late final _CFCopyHomeDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL =
      _CFCopyHomeDirectoryURLPtr.asFunction<CFURLRef Function()>();

  late final ffi.Pointer<CFStringRef> _kCFBundleInfoDictionaryVersionKey =
      _lookup<CFStringRef>('kCFBundleInfoDictionaryVersionKey');

  CFStringRef get kCFBundleInfoDictionaryVersionKey =>
      _kCFBundleInfoDictionaryVersionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleExecutableKey =
      _lookup<CFStringRef>('kCFBundleExecutableKey');

  CFStringRef get kCFBundleExecutableKey => _kCFBundleExecutableKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleIdentifierKey =
      _lookup<CFStringRef>('kCFBundleIdentifierKey');

  CFStringRef get kCFBundleIdentifierKey => _kCFBundleIdentifierKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleVersionKey =
      _lookup<CFStringRef>('kCFBundleVersionKey');

  CFStringRef get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleDevelopmentRegionKey =
      _lookup<CFStringRef>('kCFBundleDevelopmentRegionKey');

  CFStringRef get kCFBundleDevelopmentRegionKey =>
      _kCFBundleDevelopmentRegionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleNameKey =
      _lookup<CFStringRef>('kCFBundleNameKey');

  CFStringRef get kCFBundleNameKey => _kCFBundleNameKey.value;

  late final ffi.Pointer<CFStringRef> _kCFBundleLocalizationsKey =
      _lookup<CFStringRef>('kCFBundleLocalizationsKey');

  CFStringRef get kCFBundleLocalizationsKey => _kCFBundleLocalizationsKey.value;

  CFBundleRef CFBundleGetMainBundle() {
    return _CFBundleGetMainBundle();
  }

  late final _CFBundleGetMainBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle =
      _CFBundleGetMainBundlePtr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifierPtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier =
      _CFBundleGetBundleWithIdentifierPtr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles() {
    return _CFBundleGetAllBundles();
  }

  late final _CFBundleGetAllBundlesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles =
      _CFBundleGetAllBundlesPtr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID() {
    return _CFBundleGetTypeID();
  }

  late final _CFBundleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID =
      _CFBundleGetTypeIDPtr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreatePtr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate = _CFBundleCreatePtr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory =
      _CFBundleCreateBundlesFromDirectoryPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL =
      _CFBundleCopyBundleURLPtr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKeyPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey =
      _CFBundleGetValueForInfoDictionaryKeyPtr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary = _CFBundleGetInfoDictionaryPtr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary =
      _CFBundleGetLocalInfoDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo = _CFBundleGetPackageInfoPtr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier(
      bundle,
    );
  }

  late final _CFBundleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier =
      _CFBundleGetIdentifierPtr.asFunction<CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber =
      _CFBundleGetVersionNumberPtr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion = _CFBundleGetDevelopmentRegionPtr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL =
      _CFBundleCopySupportFilesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL =
      _CFBundleCopyResourcesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL =
      _CFBundleCopyPrivateFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL =
      _CFBundleCopySharedFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL = _CFBundleCopySharedSupportURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL = _CFBundleCopyBuiltInPlugInsURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectoryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory =
      _CFBundleCopyInfoDictionaryInDirectoryPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory =
      _CFBundleGetPackageInfoInDirectoryPtr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL = _CFBundleCopyResourceURLPtr.asFunction<
      CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType =
      _CFBundleCopyResourceURLsOfTypePtr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString =
      _CFBundleCopyLocalizedStringPtr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory =
      _CFBundleCopyResourceURLInDirectoryPtr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory =
      _CFBundleCopyResourceURLsOfTypeInDirectoryPtr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizationsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations =
      _CFBundleCopyBundleLocalizationsPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArrayPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray =
      _CFBundleCopyPreferredLocalizationsFromArrayPtr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferencesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences =
      _CFBundleCopyLocalizationsForPreferencesPtr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization =
      _CFBundleCopyResourceURLForLocalizationPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization =
      _CFBundleCopyResourceURLsOfTypeForLocalizationPtr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURLPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL =
      _CFBundleCopyInfoDictionaryForURLPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL =
      _CFBundleCopyLocalizationsForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL =
      _CFBundleCopyExecutableArchitecturesForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL = _CFBundleCopyExecutableURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures =
      _CFBundleCopyExecutableArchitecturesPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable = _CFBundlePreflightExecutablePtr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnErrorPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError =
      _CFBundleLoadExecutableAndReturnErrorPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable(
      bundle,
    );
  }

  late final _CFBundleLoadExecutablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable =
      _CFBundleLoadExecutablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded =
      _CFBundleIsExecutableLoadedPtr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable =
      _CFBundleUnloadExecutablePtr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName =
      _CFBundleGetFunctionPointerForNamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames =
      _CFBundleGetFunctionPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName = _CFBundleGetDataPointerForNamePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames =
      _CFBundleGetDataPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL =
      _CFBundleCopyAuxiliaryExecutableURLPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable =
      _CFBundleIsExecutableLoadablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL =
      _CFBundleIsExecutableLoadableForURLPtr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable =
      _CFBundleIsArchitectureLoadablePtr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn(
      bundle,
    );
  }

  late final _CFBundleGetPlugInPtr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn =
      _CFBundleGetPlugInPtr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMapPtr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap =
      _CFBundleOpenBundleResourceMapPtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFilesPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles =
      _CFBundleOpenBundleResourceFilesPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap =
      _CFBundleCloseBundleResourceMapPtr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID() {
    return _CFMessagePortGetTypeID();
  }

  late final _CFMessagePortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID =
      _CFMessagePortGetTypeIDPtr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocalPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal =
      _CFMessagePortCreateLocalPtr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemotePtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote = _CFMessagePortCreateRemotePtr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote(
      ms,
    );
  }

  late final _CFMessagePortIsRemotePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote =
      _CFMessagePortIsRemotePtr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName(
      ms,
    );
  }

  late final _CFMessagePortGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName = _CFMessagePortGetNamePtr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetNamePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName = _CFMessagePortSetNamePtr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext = _CFMessagePortGetContextPtr.asFunction<
      void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate(
      ms,
    );
  }

  late final _CFMessagePortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate =
      _CFMessagePortInvalidatePtr.asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid(
      ms,
    );
  }

  late final _CFMessagePortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid =
      _CFMessagePortIsValidPtr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack =
      _CFMessagePortGetInvalidationCallBackPtr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack =
      _CFMessagePortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequestPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest =
      _CFMessagePortSendRequestPtr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource =
      _CFMessagePortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue(
    CFMessagePortRef ms,
    Dartdispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue(
      ms,
      queue.ref.pointer,
    );
  }

  late final _CFMessagePortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue = _CFMessagePortSetDispatchQueuePtr
      .asFunction<void Function(CFMessagePortRef, dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegistrationKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegistrationKey');

  CFStringRef get kCFPlugInDynamicRegistrationKey =>
      _kCFPlugInDynamicRegistrationKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegisterFunctionKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegisterFunctionKey');

  CFStringRef get kCFPlugInDynamicRegisterFunctionKey =>
      _kCFPlugInDynamicRegisterFunctionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInUnloadFunctionKey =
      _lookup<CFStringRef>('kCFPlugInUnloadFunctionKey');

  CFStringRef get kCFPlugInUnloadFunctionKey =>
      _kCFPlugInUnloadFunctionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInFactoriesKey =
      _lookup<CFStringRef>('kCFPlugInFactoriesKey');

  CFStringRef get kCFPlugInFactoriesKey => _kCFPlugInFactoriesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInTypesKey =
      _lookup<CFStringRef>('kCFPlugInTypesKey');

  CFStringRef get kCFPlugInTypesKey => _kCFPlugInTypesKey.value;

  int CFPlugInGetTypeID() {
    return _CFPlugInGetTypeID();
  }

  late final _CFPlugInGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID =
      _CFPlugInGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreatePtr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate = _CFPlugInCreatePtr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle(
      plugIn,
    );
  }

  late final _CFPlugInGetBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle =
      _CFPlugInGetBundlePtr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand =
      _CFPlugInSetLoadOnDemandPtr.asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand =
      _CFPlugInIsLoadOnDemandPtr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypePtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType =
      _CFPlugInFindFactoriesForPlugInTypePtr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn =
      _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate = _CFPlugInInstanceCreatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction =
      _CFPlugInRegisterFactoryFunctionPtr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByNamePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName =
      _CFPlugInRegisterFactoryFunctionByNamePtr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactoryPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory =
      _CFPlugInUnregisterFactoryPtr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType = _CFPlugInRegisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType = _CFPlugInUnregisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory =
      _CFPlugInAddInstanceForFactoryPtr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory =
      _CFPlugInRemoveInstanceForFactoryPtr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTablePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable =
      _CFPlugInInstanceGetInterfaceFunctionTablePtr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName =
      _CFPlugInInstanceGetFactoryNamePtr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceDataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>>(
      'CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData =
      _CFPlugInInstanceGetInstanceDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID() {
    return _CFPlugInInstanceGetTypeID();
  }

  late final _CFPlugInInstanceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID =
      _CFPlugInInstanceGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSizePtr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize =
      _CFPlugInInstanceCreateWithInstanceDataSizePtr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID() {
    return _CFMachPortGetTypeID();
  }

  late final _CFMachPortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID =
      _CFMachPortGetTypeIDPtr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreatePtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate = _CFMachPortCreatePtr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPortPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort =
      _CFMachPortCreateWithPortPtr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort(
      port,
    );
  }

  late final _CFMachPortGetPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort =
      _CFMachPortGetPortPtr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext(
      port,
      context,
    );
  }

  late final _CFMachPortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext = _CFMachPortGetContextPtr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate(
      port,
    );
  }

  late final _CFMachPortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate =
      _CFMachPortInvalidatePtr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid(
      port,
    );
  }

  late final _CFMachPortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid =
      _CFMachPortIsValidPtr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack =
      _CFMachPortGetInvalidationCallBackPtr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack =
      _CFMachPortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource =
      _CFMachPortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID() {
    return _CFAttributedStringGetTypeID();
  }

  late final _CFAttributedStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID =
      _CFAttributedStringGetTypeIDPtr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate =
      _CFAttributedStringCreatePtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring =
      _CFAttributedStringCreateWithSubstringPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy =
      _CFAttributedStringCreateCopyPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString(
      aStr,
    );
  }

  late final _CFAttributedStringGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString = _CFAttributedStringGetStringPtr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength(
      aStr,
    );
  }

  late final _CFAttributedStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength = _CFAttributedStringGetLengthPtr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes =
      _CFAttributedStringGetAttributesPtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute =
      _CFAttributedStringGetAttributePtr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange =
      _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange =
      _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy =
      _CFAttributedStringCreateMutableCopyPtr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable =
      _CFAttributedStringCreateMutablePtr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString =
      _CFAttributedStringReplaceStringPtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableStringPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString =
      _CFAttributedStringGetMutableStringPtr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes =
      _CFAttributedStringSetAttributesPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute =
      _CFAttributedStringSetAttributePtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute =
      _CFAttributedStringRemoveAttributePtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString =
      _CFAttributedStringReplaceAttributedStringPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing =
      _CFAttributedStringBeginEditingPtr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing = _CFAttributedStringEndEditingPtr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  bool CFAttributedStringGetBidiLevelsAndResolvedDirections(
    CFAttributedStringRef attributedString,
    CFRange range,
    int baseDirection,
    ffi.Pointer<ffi.Uint8> bidiLevels,
    ffi.Pointer<ffi.Uint8> baseDirections,
  ) {
    return _CFAttributedStringGetBidiLevelsAndResolvedDirections(
      attributedString,
      range,
      baseDirection,
      bidiLevels,
      baseDirections,
    );
  }

  late final _CFAttributedStringGetBidiLevelsAndResolvedDirectionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(CFAttributedStringRef, CFRange, ffi.Int8,
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>>(
      'CFAttributedStringGetBidiLevelsAndResolvedDirections');
  late final _CFAttributedStringGetBidiLevelsAndResolvedDirections =
      _CFAttributedStringGetBidiLevelsAndResolvedDirectionsPtr.asFunction<
          bool Function(CFAttributedStringRef, CFRange, int,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  int CFURLEnumeratorGetTypeID() {
    return _CFURLEnumeratorGetTypeID();
  }

  late final _CFURLEnumeratorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID =
      _CFURLEnumeratorGetTypeIDPtr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    CFURLEnumeratorOptions option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL(
      alloc,
      directoryURL,
      option.value,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL =
      _CFURLEnumeratorCreateForDirectoryURLPtr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes(
    CFAllocatorRef alloc,
    CFURLEnumeratorOptions option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes(
      alloc,
      option.value,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumesPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFOptionFlags,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes =
      _CFURLEnumeratorCreateForMountedVolumesPtr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  CFURLEnumeratorResult CFURLEnumeratorGetNextURL(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return CFURLEnumeratorResult.fromValue(_CFURLEnumeratorGetNextURL(
      enumerator,
      url,
      error,
    ));
  }

  late final _CFURLEnumeratorGetNextURLPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL =
      _CFURLEnumeratorGetNextURLPtr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents =
      _CFURLEnumeratorSkipDescendentsPtr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevelPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel =
      _CFURLEnumeratorGetDescendentLevelPtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChangePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange =
      _CFURLEnumeratorGetSourceDidChangePtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  acl_t acl_dup(
    acl_t acl,
  ) {
    return _acl_dup(
      acl,
    );
  }

  late final _acl_dupPtr =
      _lookup<ffi.NativeFunction<acl_t Function(acl_t)>>('acl_dup');
  late final _acl_dup = _acl_dupPtr.asFunction<acl_t Function(acl_t)>();

  int acl_free(
    ffi.Pointer<ffi.Void> obj_p,
  ) {
    return _acl_free(
      obj_p,
    );
  }

  late final _acl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'acl_free');
  late final _acl_free =
      _acl_freePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_init(
    int count,
  ) {
    return _acl_init(
      count,
    );
  }

  late final _acl_initPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int)>>('acl_init');
  late final _acl_init = _acl_initPtr.asFunction<acl_t Function(int)>();

  int acl_copy_entry(
    acl_entry_t dest_d,
    acl_entry_t src_d,
  ) {
    return _acl_copy_entry(
      dest_d,
      src_d,
    );
  }

  late final _acl_copy_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, acl_entry_t)>>(
          'acl_copy_entry');
  late final _acl_copy_entry =
      _acl_copy_entryPtr.asFunction<int Function(acl_entry_t, acl_entry_t)>();

  int acl_create_entry(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_create_entry(
      acl_p,
      entry_p,
    );
  }

  late final _acl_create_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<acl_t>,
              ffi.Pointer<acl_entry_t>)>>('acl_create_entry');
  late final _acl_create_entry = _acl_create_entryPtr
      .asFunction<int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>)>();

  int acl_create_entry_np(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
    int entry_index,
  ) {
    return _acl_create_entry_np(
      acl_p,
      entry_p,
      entry_index,
    );
  }

  late final _acl_create_entry_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>,
              ffi.Int)>>('acl_create_entry_np');
  late final _acl_create_entry_np = _acl_create_entry_npPtr.asFunction<
      int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>, int)>();

  int acl_delete_entry(
    acl_t acl,
    acl_entry_t entry_d,
  ) {
    return _acl_delete_entry(
      acl,
      entry_d,
    );
  }

  late final _acl_delete_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_t, acl_entry_t)>>(
          'acl_delete_entry');
  late final _acl_delete_entry =
      _acl_delete_entryPtr.asFunction<int Function(acl_t, acl_entry_t)>();

  int acl_get_entry(
    acl_t acl,
    int entry_id,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_get_entry(
      acl,
      entry_id,
      entry_p,
    );
  }

  late final _acl_get_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_t, ffi.Int, ffi.Pointer<acl_entry_t>)>>('acl_get_entry');
  late final _acl_get_entry = _acl_get_entryPtr
      .asFunction<int Function(acl_t, int, ffi.Pointer<acl_entry_t>)>();

  int acl_valid(
    acl_t acl,
  ) {
    return _acl_valid(
      acl,
    );
  }

  late final _acl_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_t)>>('acl_valid');
  late final _acl_valid = _acl_validPtr.asFunction<int Function(acl_t)>();

  int acl_valid_fd_np(
    int fd,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_valid_fd_np(
      fd,
      type.value,
      acl,
    );
  }

  late final _acl_valid_fd_npPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedInt, acl_t)>>(
      'acl_valid_fd_np');
  late final _acl_valid_fd_np =
      _acl_valid_fd_npPtr.asFunction<int Function(int, int, acl_t)>();

  int acl_valid_file_np(
    ffi.Pointer<ffi.Char> path,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_valid_file_np(
      path,
      type.value,
      acl,
    );
  }

  late final _acl_valid_file_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              acl_t)>>('acl_valid_file_np');
  late final _acl_valid_file_np = _acl_valid_file_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_valid_link_np(
    ffi.Pointer<ffi.Char> path,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_valid_link_np(
      path,
      type.value,
      acl,
    );
  }

  late final _acl_valid_link_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              acl_t)>>('acl_valid_link_np');
  late final _acl_valid_link_np = _acl_valid_link_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_add_perm(
    acl_permset_t permset_d,
    acl_perm_t perm,
  ) {
    return _acl_add_perm(
      permset_d,
      perm.value,
    );
  }

  late final _acl_add_permPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.UnsignedInt)>>(
      'acl_add_perm');
  late final _acl_add_perm =
      _acl_add_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_calc_mask(
    ffi.Pointer<acl_t> acl_p,
  ) {
    return _acl_calc_mask(
      acl_p,
    );
  }

  late final _acl_calc_maskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<acl_t>)>>(
          'acl_calc_mask');
  late final _acl_calc_mask =
      _acl_calc_maskPtr.asFunction<int Function(ffi.Pointer<acl_t>)>();

  int acl_clear_perms(
    acl_permset_t permset_d,
  ) {
    return _acl_clear_perms(
      permset_d,
    );
  }

  late final _acl_clear_permsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_permset_t)>>(
          'acl_clear_perms');
  late final _acl_clear_perms =
      _acl_clear_permsPtr.asFunction<int Function(acl_permset_t)>();

  int acl_delete_perm(
    acl_permset_t permset_d,
    acl_perm_t perm,
  ) {
    return _acl_delete_perm(
      permset_d,
      perm.value,
    );
  }

  late final _acl_delete_permPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.UnsignedInt)>>(
      'acl_delete_perm');
  late final _acl_delete_perm =
      _acl_delete_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_perm_np(
    acl_permset_t permset_d,
    acl_perm_t perm,
  ) {
    return _acl_get_perm_np(
      permset_d,
      perm.value,
    );
  }

  late final _acl_get_perm_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_permset_t, ffi.UnsignedInt)>>(
      'acl_get_perm_np');
  late final _acl_get_perm_np =
      _acl_get_perm_npPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_permset(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_t> permset_p,
  ) {
    return _acl_get_permset(
      entry_d,
      permset_p,
    );
  }

  late final _acl_get_permsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<acl_permset_t>)>>('acl_get_permset');
  late final _acl_get_permset = _acl_get_permsetPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_t>)>();

  int acl_set_permset(
    acl_entry_t entry_d,
    acl_permset_t permset_d,
  ) {
    return _acl_set_permset(
      entry_d,
      permset_d,
    );
  }

  late final _acl_set_permsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_entry_t, acl_permset_t)>>(
          'acl_set_permset');
  late final _acl_set_permset = _acl_set_permsetPtr
      .asFunction<int Function(acl_entry_t, acl_permset_t)>();

  int acl_maximal_permset_mask_np(
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_maximal_permset_mask_np(
      mask_p,
    );
  }

  late final _acl_maximal_permset_mask_npPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<acl_permset_mask_t>)>>(
      'acl_maximal_permset_mask_np');
  late final _acl_maximal_permset_mask_np = _acl_maximal_permset_mask_npPtr
      .asFunction<int Function(ffi.Pointer<acl_permset_mask_t>)>();

  int acl_get_permset_mask_np(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_get_permset_mask_np(
      entry_d,
      mask_p,
    );
  }

  late final _acl_get_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(acl_entry_t,
              ffi.Pointer<acl_permset_mask_t>)>>('acl_get_permset_mask_np');
  late final _acl_get_permset_mask_np = _acl_get_permset_mask_npPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_mask_t>)>();

  int acl_set_permset_mask_np(
    acl_entry_t entry_d,
    int mask,
  ) {
    return _acl_set_permset_mask_np(
      entry_d,
      mask,
    );
  }

  late final _acl_set_permset_mask_npPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(acl_entry_t, acl_permset_mask_t)>>(
      'acl_set_permset_mask_np');
  late final _acl_set_permset_mask_np =
      _acl_set_permset_mask_npPtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_add_flag_np(
    acl_flagset_t flagset_d,
    acl_flag_t flag,
  ) {
    return _acl_add_flag_np(
      flagset_d,
      flag.value,
    );
  }

  late final _acl_add_flag_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.UnsignedInt)>>(
      'acl_add_flag_np');
  late final _acl_add_flag_np =
      _acl_add_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_clear_flags_np(
    acl_flagset_t flagset_d,
  ) {
    return _acl_clear_flags_np(
      flagset_d,
    );
  }

  late final _acl_clear_flags_npPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(acl_flagset_t)>>(
          'acl_clear_flags_np');
  late final _acl_clear_flags_np =
      _acl_clear_flags_npPtr.asFunction<int Function(acl_flagset_t)>();

  int acl_delete_flag_np(
    acl_flagset_t flagset_d,
    acl_flag_t flag,
  ) {
    return _acl_delete_flag_np(
      flagset_d,
      flag.value,
    );
  }

  late final _acl_delete_flag_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.UnsignedInt)>>(
      'acl_delete_flag_np');
  late final _acl_delete_flag_np =
      _acl_delete_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flag_np(
    acl_flagset_t flagset_d,
    acl_flag_t flag,
  ) {
    return _acl_get_flag_np(
      flagset_d,
      flag.value,
    );
  }

  late final _acl_get_flag_npPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_flagset_t, ffi.UnsignedInt)>>(
      'acl_get_flag_np');
  late final _acl_get_flag_np =
      _acl_get_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    ffi.Pointer<acl_flagset_t> flagset_p,
  ) {
    return _acl_get_flagset_np(
      obj_p,
      flagset_p,
    );
  }

  late final _acl_get_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<acl_flagset_t>)>>('acl_get_flagset_np');
  late final _acl_get_flagset_np = _acl_get_flagset_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<acl_flagset_t>)>();

  int acl_set_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    acl_flagset_t flagset_d,
  ) {
    return _acl_set_flagset_np(
      obj_p,
      flagset_d,
    );
  }

  late final _acl_set_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, acl_flagset_t)>>('acl_set_flagset_np');
  late final _acl_set_flagset_np = _acl_set_flagset_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_flagset_t)>();

  ffi.Pointer<ffi.Void> acl_get_qualifier(
    acl_entry_t entry_d,
  ) {
    return _acl_get_qualifier(
      entry_d,
    );
  }

  late final _acl_get_qualifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>>(
          'acl_get_qualifier');
  late final _acl_get_qualifier = _acl_get_qualifierPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>();

  int acl_get_tag_type(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.UnsignedInt> tag_type_p,
  ) {
    return _acl_get_tag_type(
      entry_d,
      tag_type_p,
    );
  }

  late final _acl_get_tag_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.UnsignedInt>)>>('acl_get_tag_type');
  late final _acl_get_tag_type = _acl_get_tag_typePtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.UnsignedInt>)>();

  int acl_set_qualifier(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.Void> tag_qualifier_p,
  ) {
    return _acl_set_qualifier(
      entry_d,
      tag_qualifier_p,
    );
  }

  late final _acl_set_qualifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.Void>)>>('acl_set_qualifier');
  late final _acl_set_qualifier = _acl_set_qualifierPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.Void>)>();

  int acl_set_tag_type(
    acl_entry_t entry_d,
    acl_tag_t tag_type,
  ) {
    return _acl_set_tag_type(
      entry_d,
      tag_type.value,
    );
  }

  late final _acl_set_tag_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(acl_entry_t, ffi.UnsignedInt)>>(
      'acl_set_tag_type');
  late final _acl_set_tag_type =
      _acl_set_tag_typePtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_delete_def_file(
    ffi.Pointer<ffi.Char> path_p,
  ) {
    return _acl_delete_def_file(
      path_p,
    );
  }

  late final _acl_delete_def_filePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acl_delete_def_file');
  late final _acl_delete_def_file =
      _acl_delete_def_filePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  acl_t acl_get_fd(
    int fd,
  ) {
    return _acl_get_fd(
      fd,
    );
  }

  late final _acl_get_fdPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int)>>('acl_get_fd');
  late final _acl_get_fd = _acl_get_fdPtr.asFunction<acl_t Function(int)>();

  acl_t acl_get_fd_np(
    int fd,
    acl_type_t type,
  ) {
    return _acl_get_fd_np(
      fd,
      type.value,
    );
  }

  late final _acl_get_fd_npPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Int, ffi.UnsignedInt)>>(
          'acl_get_fd_np');
  late final _acl_get_fd_np =
      _acl_get_fd_npPtr.asFunction<acl_t Function(int, int)>();

  acl_t acl_get_file(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
  ) {
    return _acl_get_file(
      path_p,
      type.value,
    );
  }

  late final _acl_get_filePtr = _lookup<
      ffi.NativeFunction<
          acl_t Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('acl_get_file');
  late final _acl_get_file =
      _acl_get_filePtr.asFunction<acl_t Function(ffi.Pointer<ffi.Char>, int)>();

  acl_t acl_get_link_np(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
  ) {
    return _acl_get_link_np(
      path_p,
      type.value,
    );
  }

  late final _acl_get_link_npPtr = _lookup<
      ffi.NativeFunction<
          acl_t Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('acl_get_link_np');
  late final _acl_get_link_np = _acl_get_link_npPtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Char>, int)>();

  int acl_set_fd(
    int fd,
    acl_t acl,
  ) {
    return _acl_set_fd(
      fd,
      acl,
    );
  }

  late final _acl_set_fdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, acl_t)>>(
          'acl_set_fd');
  late final _acl_set_fd =
      _acl_set_fdPtr.asFunction<int Function(int, acl_t)>();

  int acl_set_fd_np(
    int fd,
    acl_t acl,
    acl_type_t acl_type,
  ) {
    return _acl_set_fd_np(
      fd,
      acl,
      acl_type.value,
    );
  }

  late final _acl_set_fd_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, acl_t, ffi.UnsignedInt)>>('acl_set_fd_np');
  late final _acl_set_fd_np =
      _acl_set_fd_npPtr.asFunction<int Function(int, acl_t, int)>();

  int acl_set_file(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_set_file(
      path_p,
      type.value,
      acl,
    );
  }

  late final _acl_set_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt, acl_t)>>('acl_set_file');
  late final _acl_set_file = _acl_set_filePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_set_link_np(
    ffi.Pointer<ffi.Char> path_p,
    acl_type_t type,
    acl_t acl,
  ) {
    return _acl_set_link_np(
      path_p,
      type.value,
      acl,
    );
  }

  late final _acl_set_link_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              acl_t)>>('acl_set_link_np');
  late final _acl_set_link_np = _acl_set_link_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, acl_t)>();

  int acl_copy_ext(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_extPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext');
  late final _acl_copy_ext = _acl_copy_extPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  int acl_copy_ext_native(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext_native(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_ext_nativePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext_native');
  late final _acl_copy_ext_native = _acl_copy_ext_nativePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  acl_t acl_copy_int(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int(
      buf_p,
    );
  }

  late final _acl_copy_intPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int');
  late final _acl_copy_int =
      _acl_copy_intPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_copy_int_native(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int_native(
      buf_p,
    );
  }

  late final _acl_copy_int_nativePtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int_native');
  late final _acl_copy_int_native = _acl_copy_int_nativePtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_from_text(
    ffi.Pointer<ffi.Char> buf_p,
  ) {
    return _acl_from_text(
      buf_p,
    );
  }

  late final _acl_from_textPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Char>)>>(
          'acl_from_text');
  late final _acl_from_text =
      _acl_from_textPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Char>)>();

  int acl_size(
    acl_t acl,
  ) {
    return _acl_size(
      acl,
    );
  }

  late final _acl_sizePtr =
      _lookup<ffi.NativeFunction<ssize_t Function(acl_t)>>('acl_size');
  late final _acl_size = _acl_sizePtr.asFunction<int Function(acl_t)>();

  ffi.Pointer<ffi.Char> acl_to_text(
    acl_t acl,
    ffi.Pointer<ssize_t> len_p,
  ) {
    return _acl_to_text(
      acl,
      len_p,
    );
  }

  late final _acl_to_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              acl_t, ffi.Pointer<ssize_t>)>>('acl_to_text');
  late final _acl_to_text = _acl_to_textPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(acl_t, ffi.Pointer<ssize_t>)>();

  int CFFileSecurityGetTypeID() {
    return _CFFileSecurityGetTypeID();
  }

  late final _CFFileSecurityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID =
      _CFFileSecurityGetTypeIDPtr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate(
      allocator,
    );
  }

  late final _CFFileSecurityCreatePtr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate = _CFFileSecurityCreatePtr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy =
      _CFFileSecurityCreateCopyPtr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID = _CFFileSecurityCopyOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID = _CFFileSecuritySetOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID = _CFFileSecurityCopyGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID = _CFFileSecuritySetGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlListPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList =
      _CFFileSecurityCopyAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlListPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList =
      _CFFileSecuritySetAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t> owner,
  ) {
    return _CFFileSecurityGetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner = _CFFileSecurityGetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t>)>();

  int CFFileSecuritySetOwner(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwnerPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner = _CFFileSecuritySetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroupPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup = _CFFileSecurityGetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroupPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup = _CFFileSecuritySetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t> mode,
  ) {
    return _CFFileSecurityGetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetModePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode = _CFFileSecurityGetModePtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t>)>();

  int CFFileSecuritySetMode(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetModePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode = _CFFileSecuritySetModePtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  DartBoolean CFFileSecurityClearProperties(
    CFFileSecurityRef fileSec,
    CFFileSecurityClearOptions clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties(
      fileSec,
      clearPropertyMask.value,
    );
  }

  late final _CFFileSecurityClearPropertiesPtr = _lookup<
          ffi
          .NativeFunction<Boolean Function(CFFileSecurityRef, CFOptionFlags)>>(
      'CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties = _CFFileSecurityClearPropertiesPtr
      .asFunction<int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(
          CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    DartCFIndex index,
  ) {
    return CFStringTokenizerTokenType.fromValue(
        _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    ));
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          CFOptionFlags Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return CFStringTokenizerTokenType.fromValue(
        _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    ));
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID() {
    return _CFFileDescriptorGetTypeID();
  }

  late final _CFFileDescriptorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID =
      _CFFileDescriptorGetTypeIDPtr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate = _CFFileDescriptorCreatePtr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptorPtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor =
      _CFFileDescriptorGetNativeDescriptorPtr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext =
      _CFFileDescriptorGetContextPtr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks =
      _CFFileDescriptorEnableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks =
      _CFFileDescriptorDisableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate(
      f,
    );
  }

  late final _CFFileDescriptorInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate = _CFFileDescriptorInvalidatePtr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid(
      f,
    );
  }

  late final _CFFileDescriptorIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid = _CFFileDescriptorIsValidPtr.asFunction<
      int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource =
      _CFFileDescriptorCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID() {
    return _CFUserNotificationGetTypeID();
  }

  late final _CFUserNotificationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID =
      _CFUserNotificationGetTypeIDPtr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreatePtr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate =
      _CFUserNotificationCreatePtr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponsePtr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse =
      _CFUserNotificationReceiveResponsePtr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue =
      _CFUserNotificationGetResponseValuePtr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionaryPtr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary =
      _CFUserNotificationGetResponseDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdatePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate =
      _CFUserNotificationUpdatePtr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel(
      userNotification,
    );
  }

  late final _CFUserNotificationCancelPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel = _CFUserNotificationCancelPtr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource =
      _CFUserNotificationCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNoticePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice =
      _CFUserNotificationDisplayNoticePtr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlertPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert =
      _CFUserNotificationDisplayAlertPtr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationIconURLKey =
      _lookup<CFStringRef>('kCFUserNotificationIconURLKey');

  CFStringRef get kCFUserNotificationIconURLKey =>
      _kCFUserNotificationIconURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationSoundURLKey =
      _lookup<CFStringRef>('kCFUserNotificationSoundURLKey');

  CFStringRef get kCFUserNotificationSoundURLKey =>
      _kCFUserNotificationSoundURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationLocalizationURLKey =
      _lookup<CFStringRef>('kCFUserNotificationLocalizationURLKey');

  CFStringRef get kCFUserNotificationLocalizationURLKey =>
      _kCFUserNotificationLocalizationURLKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertHeaderKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertHeaderKey');

  CFStringRef get kCFUserNotificationAlertHeaderKey =>
      _kCFUserNotificationAlertHeaderKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertMessageKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertMessageKey');

  CFStringRef get kCFUserNotificationAlertMessageKey =>
      _kCFUserNotificationAlertMessageKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationDefaultButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationDefaultButtonTitleKey');

  CFStringRef get kCFUserNotificationDefaultButtonTitleKey =>
      _kCFUserNotificationDefaultButtonTitleKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationAlternateButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationAlternateButtonTitleKey');

  CFStringRef get kCFUserNotificationAlternateButtonTitleKey =>
      _kCFUserNotificationAlternateButtonTitleKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationOtherButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationOtherButtonTitleKey');

  CFStringRef get kCFUserNotificationOtherButtonTitleKey =>
      _kCFUserNotificationOtherButtonTitleKey.value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationProgressIndicatorValueKey =
      _lookup<CFStringRef>('kCFUserNotificationProgressIndicatorValueKey');

  CFStringRef get kCFUserNotificationProgressIndicatorValueKey =>
      _kCFUserNotificationProgressIndicatorValueKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpTitlesKey');

  CFStringRef get kCFUserNotificationPopUpTitlesKey =>
      _kCFUserNotificationPopUpTitlesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldTitlesKey');

  CFStringRef get kCFUserNotificationTextFieldTitlesKey =>
      _kCFUserNotificationTextFieldTitlesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationCheckBoxTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationCheckBoxTitlesKey');

  CFStringRef get kCFUserNotificationCheckBoxTitlesKey =>
      _kCFUserNotificationCheckBoxTitlesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldValuesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldValuesKey');

  CFStringRef get kCFUserNotificationTextFieldValuesKey =>
      _kCFUserNotificationTextFieldValuesKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpSelectionKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpSelectionKey');

  CFStringRef get kCFUserNotificationPopUpSelectionKey =>
      _kCFUserNotificationPopUpSelectionKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertTopMostKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertTopMostKey');

  CFStringRef get kCFUserNotificationAlertTopMostKey =>
      _kCFUserNotificationAlertTopMostKey.value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationKeyboardTypesKey =
      _lookup<CFStringRef>('kCFUserNotificationKeyboardTypesKey');

  CFStringRef get kCFUserNotificationKeyboardTypesKey =>
      _kCFUserNotificationKeyboardTypesKey.value;

  int CFXMLNodeGetTypeID() {
    return _CFXMLNodeGetTypeID();
  }

  late final _CFXMLNodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID =
      _CFXMLNodeGetTypeIDPtr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate(
    CFAllocatorRef alloc,
    CFXMLNodeTypeCode xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    DartCFIndex version,
  ) {
    return _CFXMLNodeCreate(
      alloc,
      xmlType.value,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, CFIndex, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate = _CFXMLNodeCreatePtr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopyPtr = _lookup<
          ffi
          .NativeFunction<CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>>(
      'CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy = _CFXMLNodeCreateCopyPtr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeTypeCode CFXMLNodeGetTypeCode(
    CFXMLNodeRef node,
  ) {
    return CFXMLNodeTypeCode.fromValue(_CFXMLNodeGetTypeCode(
      node,
    ));
  }

  late final _CFXMLNodeGetTypeCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode =
      _CFXMLNodeGetTypeCodePtr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString(
      node,
    );
  }

  late final _CFXMLNodeGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString =
      _CFXMLNodeGetStringPtr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr = _CFXMLNodeGetInfoPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion(
      node,
    );
  }

  late final _CFXMLNodeGetVersionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion =
      _CFXMLNodeGetVersionPtr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNodePtr = _lookup<
          ffi
          .NativeFunction<CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>>(
      'CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode = _CFXMLTreeCreateWithNodePtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode =
      _CFXMLTreeGetNodePtr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID() {
    return _CFXMLParserGetTypeID();
  }

  late final _CFXMLParserGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID =
      _CFXMLParserGetTypeIDPtr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate = _CFXMLParserCreatePtr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURLPtr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL =
      _CFXMLParserCreateWithDataFromURLPtr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext = _CFXMLParserGetContextPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks = _CFXMLParserGetCallBacksPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL = _CFXMLParserGetSourceURLPtr.asFunction<
      CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation(
      parser,
    );
  }

  late final _CFXMLParserGetLocationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation =
      _CFXMLParserGetLocationPtr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumberPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber =
      _CFXMLParserGetLineNumberPtr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument(
      parser,
    );
  }

  late final _CFXMLParserGetDocumentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument = _CFXMLParserGetDocumentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  CFXMLParserStatusCode CFXMLParserGetStatusCode(
    CFXMLParserRef parser,
  ) {
    return CFXMLParserStatusCode.fromValue(_CFXMLParserGetStatusCode(
      parser,
    ));
  }

  late final _CFXMLParserGetStatusCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode =
      _CFXMLParserGetStatusCodePtr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription =
      _CFXMLParserCopyErrorDescriptionPtr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort(
    CFXMLParserRef parser,
    CFXMLParserStatusCode errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort(
      parser,
      errorCode.value,
      errorDescription,
    );
  }

  late final _CFXMLParserAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFXMLParserRef, CFIndex, CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort = _CFXMLParserAbortPtr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse(
      parser,
    );
  }

  late final _CFXMLParserParsePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse =
      _CFXMLParserParsePtr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData = _CFXMLTreeCreateFromDataPtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithErrorPtr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError =
      _CFXMLTreeCreateFromDataWithErrorPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURLPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL =
      _CFXMLTreeCreateWithDataFromURLPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLDataPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData = _CFXMLTreeCreateXMLDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities =
      _CFXMLCreateStringByEscapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities =
      _CFXMLCreateStringByUnescapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorDescription =
      _lookup<CFStringRef>('kCFXMLTreeErrorDescription');

  CFStringRef get kCFXMLTreeErrorDescription =>
      _kCFXMLTreeErrorDescription.value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLineNumber =
      _lookup<CFStringRef>('kCFXMLTreeErrorLineNumber');

  CFStringRef get kCFXMLTreeErrorLineNumber => _kCFXMLTreeErrorLineNumber.value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLocation =
      _lookup<CFStringRef>('kCFXMLTreeErrorLocation');

  CFStringRef get kCFXMLTreeErrorLocation => _kCFXMLTreeErrorLocation.value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorStatusCode =
      _lookup<CFStringRef>('kCFXMLTreeErrorStatusCode');

  CFStringRef get kCFXMLTreeErrorStatusCode => _kCFXMLTreeErrorStatusCode.value;

  bool CGConvertColorDataWithFormat(
    int width,
    int height,
    ffi.Pointer<ffi.Void> dst_data,
    CGColorDataFormat dst_format,
    ffi.Pointer<ffi.Void> src_data,
    CGColorDataFormat src_format,
    CFDictionaryRef options,
  ) {
    return _CGConvertColorDataWithFormat(
      width,
      height,
      dst_data,
      dst_format,
      src_data,
      src_format,
      options,
    );
  }

  late final _CGConvertColorDataWithFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              CGColorDataFormat,
              ffi.Pointer<ffi.Void>,
              CGColorDataFormat,
              CFDictionaryRef)>>('CGConvertColorDataWithFormat');
  late final _CGConvertColorDataWithFormat =
      _CGConvertColorDataWithFormatPtr.asFunction<
          bool Function(int, int, ffi.Pointer<ffi.Void>, CGColorDataFormat,
              ffi.Pointer<ffi.Void>, CGColorDataFormat, CFDictionaryRef)>();

  int CGDataConsumerGetTypeID() {
    return _CGDataConsumerGetTypeID();
  }

  late final _CGDataConsumerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CGDataConsumerGetTypeID');
  late final _CGDataConsumerGetTypeID =
      _CGDataConsumerGetTypeIDPtr.asFunction<int Function()>();

  CGDataConsumerRef CGDataConsumerCreate(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<CGDataConsumerCallbacks> cbks,
  ) {
    return _CGDataConsumerCreate(
      info,
      cbks,
    );
  }

  late final _CGDataConsumerCreatePtr = _lookup<
      ffi.NativeFunction<
          CGDataConsumerRef Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<CGDataConsumerCallbacks>)>>('CGDataConsumerCreate');
  late final _CGDataConsumerCreate = _CGDataConsumerCreatePtr.asFunction<
      CGDataConsumerRef Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<CGDataConsumerCallbacks>)>();

  CGDataConsumerRef CGDataConsumerCreateWithURL(
    CFURLRef url,
  ) {
    return _CGDataConsumerCreateWithURL(
      url,
    );
  }

  late final _CGDataConsumerCreateWithURLPtr =
      _lookup<ffi.NativeFunction<CGDataConsumerRef Function(CFURLRef)>>(
          'CGDataConsumerCreateWithURL');
  late final _CGDataConsumerCreateWithURL = _CGDataConsumerCreateWithURLPtr
      .asFunction<CGDataConsumerRef Function(CFURLRef)>();

  CGDataConsumerRef CGDataConsumerCreateWithCFData(
    CFMutableDataRef data,
  ) {
    return _CGDataConsumerCreateWithCFData(
      data,
    );
  }

  late final _CGDataConsumerCreateWithCFDataPtr =
      _lookup<ffi.NativeFunction<CGDataConsumerRef Function(CFMutableDataRef)>>(
          'CGDataConsumerCreateWithCFData');
  late final _CGDataConsumerCreateWithCFData =
      _CGDataConsumerCreateWithCFDataPtr.asFunction<
          CGDataConsumerRef Function(CFMutableDataRef)>();

  CGDataConsumerRef CGDataConsumerRetain(
    CGDataConsumerRef consumer,
  ) {
    return _CGDataConsumerRetain(
      consumer,
    );
  }

  late final _CGDataConsumerRetainPtr = _lookup<
          ffi.NativeFunction<CGDataConsumerRef Function(CGDataConsumerRef)>>(
      'CGDataConsumerRetain');
  late final _CGDataConsumerRetain = _CGDataConsumerRetainPtr.asFunction<
      CGDataConsumerRef Function(CGDataConsumerRef)>();

  void CGDataConsumerRelease(
    CGDataConsumerRef consumer,
  ) {
    return _CGDataConsumerRelease(
      consumer,
    );
  }

  late final _CGDataConsumerReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGDataConsumerRef)>>(
          'CGDataConsumerRelease');
  late final _CGDataConsumerRelease =
      _CGDataConsumerReleasePtr.asFunction<void Function(CGDataConsumerRef)>();

  void CGErrorSetCallback(
    CGErrorCallback callback,
  ) {
    return _CGErrorSetCallback(
      callback,
    );
  }

  late final _CGErrorSetCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGErrorCallback)>>(
          'CGErrorSetCallback');
  late final _CGErrorSetCallback =
      _CGErrorSetCallbackPtr.asFunction<void Function(CGErrorCallback)>();

  CGLayerRef CGLayerCreateWithContext(
    CGContextRef context,
    CGSize size,
    CFDictionaryRef auxiliaryInfo,
  ) {
    return _CGLayerCreateWithContext(
      context,
      size,
      auxiliaryInfo,
    );
  }

  late final _CGLayerCreateWithContextPtr = _lookup<
      ffi.NativeFunction<
          CGLayerRef Function(CGContextRef, CGSize,
              CFDictionaryRef)>>('CGLayerCreateWithContext');
  late final _CGLayerCreateWithContext = _CGLayerCreateWithContextPtr
      .asFunction<CGLayerRef Function(CGContextRef, CGSize, CFDictionaryRef)>();

  CGLayerRef CGLayerRetain(
    CGLayerRef layer,
  ) {
    return _CGLayerRetain(
      layer,
    );
  }

  late final _CGLayerRetainPtr =
      _lookup<ffi.NativeFunction<CGLayerRef Function(CGLayerRef)>>(
          'CGLayerRetain');
  late final _CGLayerRetain =
      _CGLayerRetainPtr.asFunction<CGLayerRef Function(CGLayerRef)>();

  void CGLayerRelease(
    CGLayerRef layer,
  ) {
    return _CGLayerRelease(
      layer,
    );
  }

  late final _CGLayerReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGLayerRef)>>(
          'CGLayerRelease');
  late final _CGLayerRelease =
      _CGLayerReleasePtr.asFunction<void Function(CGLayerRef)>();

  CGSize CGLayerGetSize(
    CGLayerRef layer,
  ) {
    return _CGLayerGetSize(
      layer,
    );
  }

  late final _CGLayerGetSizePtr =
      _lookup<ffi.NativeFunction<CGSize Function(CGLayerRef)>>(
          'CGLayerGetSize');
  late final _CGLayerGetSize =
      _CGLayerGetSizePtr.asFunction<CGSize Function(CGLayerRef)>();

  CGContextRef CGLayerGetContext(
    CGLayerRef layer,
  ) {
    return _CGLayerGetContext(
      layer,
    );
  }

  late final _CGLayerGetContextPtr =
      _lookup<ffi.NativeFunction<CGContextRef Function(CGLayerRef)>>(
          'CGLayerGetContext');
  late final _CGLayerGetContext =
      _CGLayerGetContextPtr.asFunction<CGContextRef Function(CGLayerRef)>();

  void CGContextDrawLayerInRect(
    CGContextRef context,
    CGRect rect,
    CGLayerRef layer,
  ) {
    return _CGContextDrawLayerInRect(
      context,
      rect,
      layer,
    );
  }

  late final _CGContextDrawLayerInRectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGRect, CGLayerRef)>>(
      'CGContextDrawLayerInRect');
  late final _CGContextDrawLayerInRect = _CGContextDrawLayerInRectPtr
      .asFunction<void Function(CGContextRef, CGRect, CGLayerRef)>();

  void CGContextDrawLayerAtPoint(
    CGContextRef context,
    CGPoint point,
    CGLayerRef layer,
  ) {
    return _CGContextDrawLayerAtPoint(
      context,
      point,
      layer,
    );
  }

  late final _CGContextDrawLayerAtPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CGContextRef, CGPoint, CGLayerRef)>>('CGContextDrawLayerAtPoint');
  late final _CGContextDrawLayerAtPoint = _CGContextDrawLayerAtPointPtr
      .asFunction<void Function(CGContextRef, CGPoint, CGLayerRef)>();

  int CGLayerGetTypeID() {
    return _CGLayerGetTypeID();
  }

  late final _CGLayerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CGLayerGetTypeID');
  late final _CGLayerGetTypeID =
      _CGLayerGetTypeIDPtr.asFunction<int Function()>();

  CGPDFContentStreamRef CGPDFContentStreamCreateWithPage(
    CGPDFPageRef page,
  ) {
    return _CGPDFContentStreamCreateWithPage(
      page,
    );
  }

  late final _CGPDFContentStreamCreateWithPagePtr =
      _lookup<ffi.NativeFunction<CGPDFContentStreamRef Function(CGPDFPageRef)>>(
          'CGPDFContentStreamCreateWithPage');
  late final _CGPDFContentStreamCreateWithPage =
      _CGPDFContentStreamCreateWithPagePtr.asFunction<
          CGPDFContentStreamRef Function(CGPDFPageRef)>();

  CGPDFContentStreamRef CGPDFContentStreamCreateWithStream(
    CGPDFStreamRef stream,
    CGPDFDictionaryRef streamResources,
    CGPDFContentStreamRef parent,
  ) {
    return _CGPDFContentStreamCreateWithStream(
      stream,
      streamResources,
      parent,
    );
  }

  late final _CGPDFContentStreamCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CGPDFContentStreamRef Function(CGPDFStreamRef, CGPDFDictionaryRef,
              CGPDFContentStreamRef)>>('CGPDFContentStreamCreateWithStream');
  late final _CGPDFContentStreamCreateWithStream =
      _CGPDFContentStreamCreateWithStreamPtr.asFunction<
          CGPDFContentStreamRef Function(
              CGPDFStreamRef, CGPDFDictionaryRef, CGPDFContentStreamRef)>();

  CGPDFContentStreamRef CGPDFContentStreamRetain(
    CGPDFContentStreamRef cs,
  ) {
    return _CGPDFContentStreamRetain(
      cs,
    );
  }

  late final _CGPDFContentStreamRetainPtr = _lookup<
      ffi.NativeFunction<
          CGPDFContentStreamRef Function(
              CGPDFContentStreamRef)>>('CGPDFContentStreamRetain');
  late final _CGPDFContentStreamRetain = _CGPDFContentStreamRetainPtr
      .asFunction<CGPDFContentStreamRef Function(CGPDFContentStreamRef)>();

  void CGPDFContentStreamRelease(
    CGPDFContentStreamRef cs,
  ) {
    return _CGPDFContentStreamRelease(
      cs,
    );
  }

  late final _CGPDFContentStreamReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPDFContentStreamRef)>>(
          'CGPDFContentStreamRelease');
  late final _CGPDFContentStreamRelease = _CGPDFContentStreamReleasePtr
      .asFunction<void Function(CGPDFContentStreamRef)>();

  CFArrayRef CGPDFContentStreamGetStreams(
    CGPDFContentStreamRef cs,
  ) {
    return _CGPDFContentStreamGetStreams(
      cs,
    );
  }

  late final _CGPDFContentStreamGetStreamsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CGPDFContentStreamRef)>>(
          'CGPDFContentStreamGetStreams');
  late final _CGPDFContentStreamGetStreams = _CGPDFContentStreamGetStreamsPtr
      .asFunction<CFArrayRef Function(CGPDFContentStreamRef)>();

  CGPDFObjectRef CGPDFContentStreamGetResource(
    CGPDFContentStreamRef cs,
    ffi.Pointer<ffi.Char> category,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _CGPDFContentStreamGetResource(
      cs,
      category,
      name,
    );
  }

  late final _CGPDFContentStreamGetResourcePtr = _lookup<
      ffi.NativeFunction<
          CGPDFObjectRef Function(CGPDFContentStreamRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('CGPDFContentStreamGetResource');
  late final _CGPDFContentStreamGetResource =
      _CGPDFContentStreamGetResourcePtr.asFunction<
          CGPDFObjectRef Function(CGPDFContentStreamRef, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  CGContextRef CGPDFContextCreate(
    CGDataConsumerRef consumer,
    ffi.Pointer<CGRect> mediaBox,
    CFDictionaryRef auxiliaryInfo,
  ) {
    return _CGPDFContextCreate(
      consumer,
      mediaBox,
      auxiliaryInfo,
    );
  }

  late final _CGPDFContextCreatePtr = _lookup<
      ffi.NativeFunction<
          CGContextRef Function(CGDataConsumerRef, ffi.Pointer<CGRect>,
              CFDictionaryRef)>>('CGPDFContextCreate');
  late final _CGPDFContextCreate = _CGPDFContextCreatePtr.asFunction<
      CGContextRef Function(
          CGDataConsumerRef, ffi.Pointer<CGRect>, CFDictionaryRef)>();

  CGContextRef CGPDFContextCreateWithURL(
    CFURLRef url,
    ffi.Pointer<CGRect> mediaBox,
    CFDictionaryRef auxiliaryInfo,
  ) {
    return _CGPDFContextCreateWithURL(
      url,
      mediaBox,
      auxiliaryInfo,
    );
  }

  late final _CGPDFContextCreateWithURLPtr = _lookup<
      ffi.NativeFunction<
          CGContextRef Function(CFURLRef, ffi.Pointer<CGRect>,
              CFDictionaryRef)>>('CGPDFContextCreateWithURL');
  late final _CGPDFContextCreateWithURL =
      _CGPDFContextCreateWithURLPtr.asFunction<
          CGContextRef Function(
              CFURLRef, ffi.Pointer<CGRect>, CFDictionaryRef)>();

  void CGPDFContextClose(
    CGContextRef context,
  ) {
    return _CGPDFContextClose(
      context,
    );
  }

  late final _CGPDFContextClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGPDFContextClose');
  late final _CGPDFContextClose =
      _CGPDFContextClosePtr.asFunction<void Function(CGContextRef)>();

  void CGPDFContextBeginPage(
    CGContextRef context,
    CFDictionaryRef pageInfo,
  ) {
    return _CGPDFContextBeginPage(
      context,
      pageInfo,
    );
  }

  late final _CGPDFContextBeginPagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CFDictionaryRef)>>(
      'CGPDFContextBeginPage');
  late final _CGPDFContextBeginPage = _CGPDFContextBeginPagePtr.asFunction<
      void Function(CGContextRef, CFDictionaryRef)>();

  void CGPDFContextEndPage(
    CGContextRef context,
  ) {
    return _CGPDFContextEndPage(
      context,
    );
  }

  late final _CGPDFContextEndPagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGPDFContextEndPage');
  late final _CGPDFContextEndPage =
      _CGPDFContextEndPagePtr.asFunction<void Function(CGContextRef)>();

  void CGPDFContextAddDocumentMetadata(
    CGContextRef context,
    CFDataRef metadata,
  ) {
    return _CGPDFContextAddDocumentMetadata(
      context,
      metadata,
    );
  }

  late final _CGPDFContextAddDocumentMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef, CFDataRef)>>(
          'CGPDFContextAddDocumentMetadata');
  late final _CGPDFContextAddDocumentMetadata =
      _CGPDFContextAddDocumentMetadataPtr.asFunction<
          void Function(CGContextRef, CFDataRef)>();

  void CGPDFContextSetParentTree(
    CGContextRef context,
    CGPDFDictionaryRef parentTreeDictionary,
  ) {
    return _CGPDFContextSetParentTree(
      context,
      parentTreeDictionary,
    );
  }

  late final _CGPDFContextSetParentTreePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGPDFDictionaryRef)>>(
      'CGPDFContextSetParentTree');
  late final _CGPDFContextSetParentTree = _CGPDFContextSetParentTreePtr
      .asFunction<void Function(CGContextRef, CGPDFDictionaryRef)>();

  void CGPDFContextSetIDTree(
    CGContextRef context,
    CGPDFDictionaryRef IDTreeDictionary,
  ) {
    return _CGPDFContextSetIDTree(
      context,
      IDTreeDictionary,
    );
  }

  late final _CGPDFContextSetIDTreePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CGPDFDictionaryRef)>>(
      'CGPDFContextSetIDTree');
  late final _CGPDFContextSetIDTree = _CGPDFContextSetIDTreePtr.asFunction<
      void Function(CGContextRef, CGPDFDictionaryRef)>();

  void CGPDFContextSetPageTagStructureTree(
    CGContextRef context,
    CFDictionaryRef pageTagStructureTreeDictionary,
  ) {
    return _CGPDFContextSetPageTagStructureTree(
      context,
      pageTagStructureTreeDictionary,
    );
  }

  late final _CGPDFContextSetPageTagStructureTreePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CFDictionaryRef)>>(
      'CGPDFContextSetPageTagStructureTree');
  late final _CGPDFContextSetPageTagStructureTree =
      _CGPDFContextSetPageTagStructureTreePtr.asFunction<
          void Function(CGContextRef, CFDictionaryRef)>();

  void CGPDFContextSetURLForRect(
    CGContextRef context,
    CFURLRef url,
    CGRect rect,
  ) {
    return _CGPDFContextSetURLForRect(
      context,
      url,
      rect,
    );
  }

  late final _CGPDFContextSetURLForRectPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CGContextRef, CFURLRef, CGRect)>>(
      'CGPDFContextSetURLForRect');
  late final _CGPDFContextSetURLForRect = _CGPDFContextSetURLForRectPtr
      .asFunction<void Function(CGContextRef, CFURLRef, CGRect)>();

  void CGPDFContextAddDestinationAtPoint(
    CGContextRef context,
    CFStringRef name,
    CGPoint point,
  ) {
    return _CGPDFContextAddDestinationAtPoint(
      context,
      name,
      point,
    );
  }

  late final _CGPDFContextAddDestinationAtPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CFStringRef,
              CGPoint)>>('CGPDFContextAddDestinationAtPoint');
  late final _CGPDFContextAddDestinationAtPoint =
      _CGPDFContextAddDestinationAtPointPtr.asFunction<
          void Function(CGContextRef, CFStringRef, CGPoint)>();

  void CGPDFContextSetDestinationForRect(
    CGContextRef context,
    CFStringRef name,
    CGRect rect,
  ) {
    return _CGPDFContextSetDestinationForRect(
      context,
      name,
      rect,
    );
  }

  late final _CGPDFContextSetDestinationForRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, CFStringRef,
              CGRect)>>('CGPDFContextSetDestinationForRect');
  late final _CGPDFContextSetDestinationForRect =
      _CGPDFContextSetDestinationForRectPtr.asFunction<
          void Function(CGContextRef, CFStringRef, CGRect)>();

  late final ffi.Pointer<CFStringRef> _kCGPDFContextMediaBox =
      _lookup<CFStringRef>('kCGPDFContextMediaBox');

  CFStringRef get kCGPDFContextMediaBox => _kCGPDFContextMediaBox.value;

  set kCGPDFContextMediaBox(CFStringRef value) =>
      _kCGPDFContextMediaBox.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextCropBox =
      _lookup<CFStringRef>('kCGPDFContextCropBox');

  CFStringRef get kCGPDFContextCropBox => _kCGPDFContextCropBox.value;

  set kCGPDFContextCropBox(CFStringRef value) =>
      _kCGPDFContextCropBox.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextBleedBox =
      _lookup<CFStringRef>('kCGPDFContextBleedBox');

  CFStringRef get kCGPDFContextBleedBox => _kCGPDFContextBleedBox.value;

  set kCGPDFContextBleedBox(CFStringRef value) =>
      _kCGPDFContextBleedBox.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextTrimBox =
      _lookup<CFStringRef>('kCGPDFContextTrimBox');

  CFStringRef get kCGPDFContextTrimBox => _kCGPDFContextTrimBox.value;

  set kCGPDFContextTrimBox(CFStringRef value) =>
      _kCGPDFContextTrimBox.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextArtBox =
      _lookup<CFStringRef>('kCGPDFContextArtBox');

  CFStringRef get kCGPDFContextArtBox => _kCGPDFContextArtBox.value;

  set kCGPDFContextArtBox(CFStringRef value) =>
      _kCGPDFContextArtBox.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextTitle =
      _lookup<CFStringRef>('kCGPDFContextTitle');

  CFStringRef get kCGPDFContextTitle => _kCGPDFContextTitle.value;

  set kCGPDFContextTitle(CFStringRef value) =>
      _kCGPDFContextTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextAuthor =
      _lookup<CFStringRef>('kCGPDFContextAuthor');

  CFStringRef get kCGPDFContextAuthor => _kCGPDFContextAuthor.value;

  set kCGPDFContextAuthor(CFStringRef value) =>
      _kCGPDFContextAuthor.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextSubject =
      _lookup<CFStringRef>('kCGPDFContextSubject');

  CFStringRef get kCGPDFContextSubject => _kCGPDFContextSubject.value;

  set kCGPDFContextSubject(CFStringRef value) =>
      _kCGPDFContextSubject.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextKeywords =
      _lookup<CFStringRef>('kCGPDFContextKeywords');

  CFStringRef get kCGPDFContextKeywords => _kCGPDFContextKeywords.value;

  set kCGPDFContextKeywords(CFStringRef value) =>
      _kCGPDFContextKeywords.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextCreator =
      _lookup<CFStringRef>('kCGPDFContextCreator');

  CFStringRef get kCGPDFContextCreator => _kCGPDFContextCreator.value;

  set kCGPDFContextCreator(CFStringRef value) =>
      _kCGPDFContextCreator.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextOwnerPassword =
      _lookup<CFStringRef>('kCGPDFContextOwnerPassword');

  CFStringRef get kCGPDFContextOwnerPassword =>
      _kCGPDFContextOwnerPassword.value;

  set kCGPDFContextOwnerPassword(CFStringRef value) =>
      _kCGPDFContextOwnerPassword.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextUserPassword =
      _lookup<CFStringRef>('kCGPDFContextUserPassword');

  CFStringRef get kCGPDFContextUserPassword => _kCGPDFContextUserPassword.value;

  set kCGPDFContextUserPassword(CFStringRef value) =>
      _kCGPDFContextUserPassword.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextEncryptionKeyLength =
      _lookup<CFStringRef>('kCGPDFContextEncryptionKeyLength');

  CFStringRef get kCGPDFContextEncryptionKeyLength =>
      _kCGPDFContextEncryptionKeyLength.value;

  set kCGPDFContextEncryptionKeyLength(CFStringRef value) =>
      _kCGPDFContextEncryptionKeyLength.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextAllowsPrinting =
      _lookup<CFStringRef>('kCGPDFContextAllowsPrinting');

  CFStringRef get kCGPDFContextAllowsPrinting =>
      _kCGPDFContextAllowsPrinting.value;

  set kCGPDFContextAllowsPrinting(CFStringRef value) =>
      _kCGPDFContextAllowsPrinting.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextAllowsCopying =
      _lookup<CFStringRef>('kCGPDFContextAllowsCopying');

  CFStringRef get kCGPDFContextAllowsCopying =>
      _kCGPDFContextAllowsCopying.value;

  set kCGPDFContextAllowsCopying(CFStringRef value) =>
      _kCGPDFContextAllowsCopying.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextOutputIntent =
      _lookup<CFStringRef>('kCGPDFContextOutputIntent');

  CFStringRef get kCGPDFContextOutputIntent => _kCGPDFContextOutputIntent.value;

  set kCGPDFContextOutputIntent(CFStringRef value) =>
      _kCGPDFContextOutputIntent.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFXOutputIntentSubtype =
      _lookup<CFStringRef>('kCGPDFXOutputIntentSubtype');

  CFStringRef get kCGPDFXOutputIntentSubtype =>
      _kCGPDFXOutputIntentSubtype.value;

  set kCGPDFXOutputIntentSubtype(CFStringRef value) =>
      _kCGPDFXOutputIntentSubtype.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFXOutputConditionIdentifier =
      _lookup<CFStringRef>('kCGPDFXOutputConditionIdentifier');

  CFStringRef get kCGPDFXOutputConditionIdentifier =>
      _kCGPDFXOutputConditionIdentifier.value;

  set kCGPDFXOutputConditionIdentifier(CFStringRef value) =>
      _kCGPDFXOutputConditionIdentifier.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFXOutputCondition =
      _lookup<CFStringRef>('kCGPDFXOutputCondition');

  CFStringRef get kCGPDFXOutputCondition => _kCGPDFXOutputCondition.value;

  set kCGPDFXOutputCondition(CFStringRef value) =>
      _kCGPDFXOutputCondition.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFXRegistryName =
      _lookup<CFStringRef>('kCGPDFXRegistryName');

  CFStringRef get kCGPDFXRegistryName => _kCGPDFXRegistryName.value;

  set kCGPDFXRegistryName(CFStringRef value) =>
      _kCGPDFXRegistryName.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFXInfo =
      _lookup<CFStringRef>('kCGPDFXInfo');

  CFStringRef get kCGPDFXInfo => _kCGPDFXInfo.value;

  set kCGPDFXInfo(CFStringRef value) => _kCGPDFXInfo.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFXDestinationOutputProfile =
      _lookup<CFStringRef>('kCGPDFXDestinationOutputProfile');

  CFStringRef get kCGPDFXDestinationOutputProfile =>
      _kCGPDFXDestinationOutputProfile.value;

  set kCGPDFXDestinationOutputProfile(CFStringRef value) =>
      _kCGPDFXDestinationOutputProfile.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextOutputIntents =
      _lookup<CFStringRef>('kCGPDFContextOutputIntents');

  CFStringRef get kCGPDFContextOutputIntents =>
      _kCGPDFContextOutputIntents.value;

  set kCGPDFContextOutputIntents(CFStringRef value) =>
      _kCGPDFContextOutputIntents.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextAccessPermissions =
      _lookup<CFStringRef>('kCGPDFContextAccessPermissions');

  CFStringRef get kCGPDFContextAccessPermissions =>
      _kCGPDFContextAccessPermissions.value;

  set kCGPDFContextAccessPermissions(CFStringRef value) =>
      _kCGPDFContextAccessPermissions.value = value;

  void CGPDFContextSetOutline(
    CGContextRef context,
    CFDictionaryRef outline,
  ) {
    return _CGPDFContextSetOutline(
      context,
      outline,
    );
  }

  late final _CGPDFContextSetOutlinePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CGContextRef, CFDictionaryRef)>>(
      'CGPDFContextSetOutline');
  late final _CGPDFContextSetOutline = _CGPDFContextSetOutlinePtr.asFunction<
      void Function(CGContextRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCGPDFContextCreateLinearizedPDF =
      _lookup<CFStringRef>('kCGPDFContextCreateLinearizedPDF');

  CFStringRef get kCGPDFContextCreateLinearizedPDF =>
      _kCGPDFContextCreateLinearizedPDF.value;

  set kCGPDFContextCreateLinearizedPDF(CFStringRef value) =>
      _kCGPDFContextCreateLinearizedPDF.value = value;

  late final ffi.Pointer<CFStringRef> _kCGPDFContextCreatePDFA =
      _lookup<CFStringRef>('kCGPDFContextCreatePDFA');

  CFStringRef get kCGPDFContextCreatePDFA => _kCGPDFContextCreatePDFA.value;

  set kCGPDFContextCreatePDFA(CFStringRef value) =>
      _kCGPDFContextCreatePDFA.value = value;

  ffi.Pointer<ffi.Char> CGPDFTagTypeGetName(
    CGPDFTagType tagType,
  ) {
    return _CGPDFTagTypeGetName(
      tagType.value,
    );
  }

  late final _CGPDFTagTypeGetNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'CGPDFTagTypeGetName');
  late final _CGPDFTagTypeGetName =
      _CGPDFTagTypeGetNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  late final ffi.Pointer<CGPDFTagProperty> _kCGPDFTagPropertyActualText =
      _lookup<CGPDFTagProperty>('kCGPDFTagPropertyActualText');

  CGPDFTagProperty get kCGPDFTagPropertyActualText =>
      _kCGPDFTagPropertyActualText.value;

  late final ffi.Pointer<CGPDFTagProperty> _kCGPDFTagPropertyAlternativeText =
      _lookup<CGPDFTagProperty>('kCGPDFTagPropertyAlternativeText');

  CGPDFTagProperty get kCGPDFTagPropertyAlternativeText =>
      _kCGPDFTagPropertyAlternativeText.value;

  late final ffi.Pointer<CGPDFTagProperty> _kCGPDFTagPropertyTitleText =
      _lookup<CGPDFTagProperty>('kCGPDFTagPropertyTitleText');

  CGPDFTagProperty get kCGPDFTagPropertyTitleText =>
      _kCGPDFTagPropertyTitleText.value;

  late final ffi.Pointer<CGPDFTagProperty> _kCGPDFTagPropertyLanguageText =
      _lookup<CGPDFTagProperty>('kCGPDFTagPropertyLanguageText');

  CGPDFTagProperty get kCGPDFTagPropertyLanguageText =>
      _kCGPDFTagPropertyLanguageText.value;

  void CGPDFContextBeginTag(
    CGContextRef context,
    CGPDFTagType tagType,
    CFDictionaryRef tagProperties,
  ) {
    return _CGPDFContextBeginTag(
      context,
      tagType.value,
      tagProperties,
    );
  }

  late final _CGPDFContextBeginTagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGContextRef, ffi.Int32,
              CFDictionaryRef)>>('CGPDFContextBeginTag');
  late final _CGPDFContextBeginTag = _CGPDFContextBeginTagPtr.asFunction<
      void Function(CGContextRef, int, CFDictionaryRef)>();

  void CGPDFContextEndTag(
    CGContextRef context,
  ) {
    return _CGPDFContextEndTag(
      context,
    );
  }

  late final _CGPDFContextEndTagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGContextRef)>>(
          'CGPDFContextEndTag');
  late final _CGPDFContextEndTag =
      _CGPDFContextEndTagPtr.asFunction<void Function(CGContextRef)>();

  CGPDFScannerRef CGPDFScannerCreate(
    CGPDFContentStreamRef cs,
    CGPDFOperatorTableRef table,
    ffi.Pointer<ffi.Void> info,
  ) {
    return _CGPDFScannerCreate(
      cs,
      table,
      info,
    );
  }

  late final _CGPDFScannerCreatePtr = _lookup<
      ffi.NativeFunction<
          CGPDFScannerRef Function(CGPDFContentStreamRef, CGPDFOperatorTableRef,
              ffi.Pointer<ffi.Void>)>>('CGPDFScannerCreate');
  late final _CGPDFScannerCreate = _CGPDFScannerCreatePtr.asFunction<
      CGPDFScannerRef Function(CGPDFContentStreamRef, CGPDFOperatorTableRef,
          ffi.Pointer<ffi.Void>)>();

  CGPDFScannerRef CGPDFScannerRetain(
    CGPDFScannerRef scanner,
  ) {
    return _CGPDFScannerRetain(
      scanner,
    );
  }

  late final _CGPDFScannerRetainPtr =
      _lookup<ffi.NativeFunction<CGPDFScannerRef Function(CGPDFScannerRef)>>(
          'CGPDFScannerRetain');
  late final _CGPDFScannerRetain = _CGPDFScannerRetainPtr.asFunction<
      CGPDFScannerRef Function(CGPDFScannerRef)>();

  void CGPDFScannerRelease(
    CGPDFScannerRef scanner,
  ) {
    return _CGPDFScannerRelease(
      scanner,
    );
  }

  late final _CGPDFScannerReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPDFScannerRef)>>(
          'CGPDFScannerRelease');
  late final _CGPDFScannerRelease =
      _CGPDFScannerReleasePtr.asFunction<void Function(CGPDFScannerRef)>();

  bool CGPDFScannerScan(
    CGPDFScannerRef scanner,
  ) {
    return _CGPDFScannerScan(
      scanner,
    );
  }

  late final _CGPDFScannerScanPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(CGPDFScannerRef)>>(
          'CGPDFScannerScan');
  late final _CGPDFScannerScan =
      _CGPDFScannerScanPtr.asFunction<bool Function(CGPDFScannerRef)>();

  CGPDFContentStreamRef CGPDFScannerGetContentStream(
    CGPDFScannerRef scanner,
  ) {
    return _CGPDFScannerGetContentStream(
      scanner,
    );
  }

  late final _CGPDFScannerGetContentStreamPtr = _lookup<
          ffi.NativeFunction<CGPDFContentStreamRef Function(CGPDFScannerRef)>>(
      'CGPDFScannerGetContentStream');
  late final _CGPDFScannerGetContentStream = _CGPDFScannerGetContentStreamPtr
      .asFunction<CGPDFContentStreamRef Function(CGPDFScannerRef)>();

  bool CGPDFScannerPopObject(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFObjectRef> value,
  ) {
    return _CGPDFScannerPopObject(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFObjectRef>)>>('CGPDFScannerPopObject');
  late final _CGPDFScannerPopObject = _CGPDFScannerPopObjectPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFObjectRef>)>();

  bool CGPDFScannerPopBoolean(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFBoolean> value,
  ) {
    return _CGPDFScannerPopBoolean(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopBooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFBoolean>)>>('CGPDFScannerPopBoolean');
  late final _CGPDFScannerPopBoolean = _CGPDFScannerPopBooleanPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFBoolean>)>();

  bool CGPDFScannerPopInteger(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFInteger> value,
  ) {
    return _CGPDFScannerPopInteger(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopIntegerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFInteger>)>>('CGPDFScannerPopInteger');
  late final _CGPDFScannerPopInteger = _CGPDFScannerPopIntegerPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFInteger>)>();

  bool CGPDFScannerPopNumber(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFReal> value,
  ) {
    return _CGPDFScannerPopNumber(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFReal>)>>('CGPDFScannerPopNumber');
  late final _CGPDFScannerPopNumber = _CGPDFScannerPopNumberPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFReal>)>();

  bool CGPDFScannerPopName(
    CGPDFScannerRef scanner,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _CGPDFScannerPopName(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('CGPDFScannerPopName');
  late final _CGPDFScannerPopName = _CGPDFScannerPopNamePtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  bool CGPDFScannerPopString(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFStringRef> value,
  ) {
    return _CGPDFScannerPopString(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFStringRef>)>>('CGPDFScannerPopString');
  late final _CGPDFScannerPopString = _CGPDFScannerPopStringPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFStringRef>)>();

  bool CGPDFScannerPopArray(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFArrayRef> value,
  ) {
    return _CGPDFScannerPopArray(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFArrayRef>)>>('CGPDFScannerPopArray');
  late final _CGPDFScannerPopArray = _CGPDFScannerPopArrayPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFArrayRef>)>();

  bool CGPDFScannerPopDictionary(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFDictionaryRef> value,
  ) {
    return _CGPDFScannerPopDictionary(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopDictionaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFDictionaryRef>)>>('CGPDFScannerPopDictionary');
  late final _CGPDFScannerPopDictionary =
      _CGPDFScannerPopDictionaryPtr.asFunction<
          bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFDictionaryRef>)>();

  bool CGPDFScannerPopStream(
    CGPDFScannerRef scanner,
    ffi.Pointer<CGPDFStreamRef> value,
  ) {
    return _CGPDFScannerPopStream(
      scanner,
      value,
    );
  }

  late final _CGPDFScannerPopStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(CGPDFScannerRef,
              ffi.Pointer<CGPDFStreamRef>)>>('CGPDFScannerPopStream');
  late final _CGPDFScannerPopStream = _CGPDFScannerPopStreamPtr.asFunction<
      bool Function(CGPDFScannerRef, ffi.Pointer<CGPDFStreamRef>)>();

  void CGPDFScannerStop(
    CGPDFScannerRef s,
  ) {
    return _CGPDFScannerStop(
      s,
    );
  }

  late final _CGPDFScannerStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPDFScannerRef)>>(
          'CGPDFScannerStop');
  late final _CGPDFScannerStop =
      _CGPDFScannerStopPtr.asFunction<void Function(CGPDFScannerRef)>();

  CGPDFOperatorTableRef CGPDFOperatorTableCreate() {
    return _CGPDFOperatorTableCreate();
  }

  late final _CGPDFOperatorTableCreatePtr =
      _lookup<ffi.NativeFunction<CGPDFOperatorTableRef Function()>>(
          'CGPDFOperatorTableCreate');
  late final _CGPDFOperatorTableCreate = _CGPDFOperatorTableCreatePtr
      .asFunction<CGPDFOperatorTableRef Function()>();

  CGPDFOperatorTableRef CGPDFOperatorTableRetain(
    CGPDFOperatorTableRef table,
  ) {
    return _CGPDFOperatorTableRetain(
      table,
    );
  }

  late final _CGPDFOperatorTableRetainPtr = _lookup<
      ffi.NativeFunction<
          CGPDFOperatorTableRef Function(
              CGPDFOperatorTableRef)>>('CGPDFOperatorTableRetain');
  late final _CGPDFOperatorTableRetain = _CGPDFOperatorTableRetainPtr
      .asFunction<CGPDFOperatorTableRef Function(CGPDFOperatorTableRef)>();

  void CGPDFOperatorTableRelease(
    CGPDFOperatorTableRef table,
  ) {
    return _CGPDFOperatorTableRelease(
      table,
    );
  }

  late final _CGPDFOperatorTableReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CGPDFOperatorTableRef)>>(
          'CGPDFOperatorTableRelease');
  late final _CGPDFOperatorTableRelease = _CGPDFOperatorTableReleasePtr
      .asFunction<void Function(CGPDFOperatorTableRef)>();

  void CGPDFOperatorTableSetCallback(
    CGPDFOperatorTableRef table,
    ffi.Pointer<ffi.Char> name,
    CGPDFOperatorCallback callback,
  ) {
    return _CGPDFOperatorTableSetCallback(
      table,
      name,
      callback,
    );
  }

  late final _CGPDFOperatorTableSetCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CGPDFOperatorTableRef, ffi.Pointer<ffi.Char>,
              CGPDFOperatorCallback)>>('CGPDFOperatorTableSetCallback');
  late final _CGPDFOperatorTableSetCallback =
      _CGPDFOperatorTableSetCallbackPtr.asFunction<
          void Function(CGPDFOperatorTableRef, ffi.Pointer<ffi.Char>,
              CGPDFOperatorCallback)>();

  late final ffi.Pointer<ffi.Uint32> _kCGBitmapByteOrder16Host$1 =
      _lookup<ffi.Uint32>('kCGBitmapByteOrder16Host');

  CGBitmapInfo get kCGBitmapByteOrder16Host$1 =>
      CGBitmapInfo.fromValue(_kCGBitmapByteOrder16Host$1.value);

  late final ffi.Pointer<ffi.Uint32> _kCGBitmapByteOrder32Host$1 =
      _lookup<ffi.Uint32>('kCGBitmapByteOrder32Host');

  CGBitmapInfo get kCGBitmapByteOrder32Host$1 =>
      CGBitmapInfo.fromValue(_kCGBitmapByteOrder32Host$1.value);
}

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_1ctgxtl(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_1ctgxtl(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_1pl9qdv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_1pl9qdv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_tg5tbv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_tg5tbv(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_1dqvvol(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_1dqvvol(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<objc.ObjCObject>
    _CoreGraphicsBindings_protocolTrampoline_1mbt9g9(
  ffi.Pointer<objc.ObjCObject> target,
  ffi.Pointer<ffi.Void> arg0,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_6enxqz(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_6enxqz(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_18kzm6a(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_18kzm6a(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_9o8504(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_9o8504(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapListenerBlock_og5b6y(
  ffi.Pointer<objc.ObjCBlockImpl> block,
);

@ffi.Native<
    ffi.Pointer<objc.ObjCBlockImpl> Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<objc.DOBJC_Context>)>(isLeaf: true)
external ffi.Pointer<objc.ObjCBlockImpl>
    _CoreGraphicsBindings_wrapBlockingBlock_og5b6y(
  ffi.Pointer<objc.ObjCBlockImpl> block,
  ffi.Pointer<objc.ObjCBlockImpl> listnerBlock,
  ffi.Pointer<objc.DOBJC_Context> context,
);

typedef ptrdiff_t = ffi.Long;
typedef Dartptrdiff_t = int;
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef u_char = ffi.UnsignedChar;
typedef Dartu_char = int;
typedef u_short = ffi.UnsignedShort;
typedef Dartu_short = int;
typedef u_int = ffi.UnsignedInt;
typedef Dartu_int = int;
typedef u_long = ffi.UnsignedLong;
typedef Dartu_long = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
typedef uint = ffi.UnsignedInt;
typedef Dartuint = int;
typedef u_quad_t = u_int64_t;
typedef quad_t = ffi.Int64;
typedef Dartquad_t = int;
typedef qaddr_t = ffi.Pointer<quad_t>;
typedef caddr_t = ffi.Pointer<ffi.Char>;
typedef daddr_t = ffi.Int32;
typedef Dartdaddr_t = int;
typedef dev_t = __darwin_dev_t;
typedef fixpt_t = u_int32_t;
typedef blkcnt_t = __darwin_blkcnt_t;
typedef blksize_t = __darwin_blksize_t;
typedef gid_t = __darwin_gid_t;
typedef in_addr_t = __uint32_t;
typedef in_port_t = __uint16_t;
typedef ino_t = __darwin_ino_t;
typedef ino64_t = __darwin_ino64_t;
typedef key_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef nlink_t = __uint16_t;
typedef id_t = __darwin_id_t;
typedef pid_t = __darwin_pid_t;
typedef off_t = __darwin_off_t;
typedef segsz_t = ffi.Int32;
typedef Dartsegsz_t = int;
typedef swblk_t = ffi.Int32;
typedef Dartswblk_t = int;
typedef uid_t = __darwin_uid_t;
typedef clock_t = __darwin_clock_t;
typedef ssize_t = __darwin_ssize_t;
typedef time_t = __darwin_time_t;
typedef useconds_t = __darwin_useconds_t;
typedef suseconds_t = __darwin_suseconds_t;
typedef rsize_t = __darwin_size_t;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef fd_mask = __int32_t;
typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef pthread_cond_t = __darwin_pthread_cond_t;
typedef pthread_condattr_t = __darwin_pthread_condattr_t;
typedef pthread_mutex_t = __darwin_pthread_mutex_t;
typedef pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
typedef pthread_once_t = __darwin_pthread_once_t;
typedef pthread_rwlock_t = __darwin_pthread_rwlock_t;
typedef pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
typedef pthread_t = __darwin_pthread_t;
typedef pthread_key_t = __darwin_pthread_key_t;
typedef fsblkcnt_t = __darwin_fsblkcnt_t;
typedef fsfilcnt_t = __darwin_fsfilcnt_t;
typedef UInt8 = ffi.UnsignedChar;
typedef DartUInt8 = int;
typedef SInt8 = ffi.SignedChar;
typedef DartSInt8 = int;
typedef UInt16 = ffi.UnsignedShort;
typedef DartUInt16 = int;
typedef SInt16 = ffi.Short;
typedef DartSInt16 = int;
typedef UInt32 = ffi.UnsignedInt;
typedef DartUInt32 = int;
typedef SInt32 = ffi.Int;
typedef DartSInt32 = int;

@ffi.Packed(2)
final class wide extends ffi.Struct {
  @UInt32()
  external int lo;

  @SInt32()
  external int hi;
}

@ffi.Packed(2)
final class UnsignedWide extends ffi.Struct {
  @UInt32()
  external int lo;

  @UInt32()
  external int hi;
}

typedef SInt64 = ffi.LongLong;
typedef DartSInt64 = int;
typedef UInt64 = ffi.UnsignedLongLong;
typedef DartUInt64 = int;
typedef Fixed = SInt32;
typedef FixedPtr = ffi.Pointer<Fixed>;
typedef Fract = SInt32;
typedef FractPtr = ffi.Pointer<Fract>;
typedef UnsignedFixed = UInt32;
typedef UnsignedFixedPtr = ffi.Pointer<UnsignedFixed>;
typedef ShortFixed = ffi.Short;
typedef DartShortFixed = int;
typedef ShortFixedPtr = ffi.Pointer<ShortFixed>;
typedef Float32 = ffi.Float;
typedef DartFloat32 = double;
typedef Float64 = ffi.Double;
typedef DartFloat64 = double;

final class Float80 extends ffi.Struct {
  @SInt16()
  external int exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

final class Float96 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<SInt16> exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

@ffi.Packed(2)
final class Float32Point extends ffi.Struct {
  @Float32()
  external double x;

  @Float32()
  external double y;
}

typedef Ptr = ffi.Pointer<ffi.Char>;
typedef Handle = ffi.Pointer<Ptr>;
typedef Size = ffi.Long;
typedef DartSize = int;
typedef OSErr = SInt16;
typedef OSStatus = SInt32;
typedef LogicalAddress = ffi.Pointer<ffi.Void>;
typedef ConstLogicalAddress = ffi.Pointer<ffi.Void>;
typedef PhysicalAddress = ffi.Pointer<ffi.Void>;
typedef BytePtr = ffi.Pointer<UInt8>;
typedef ByteCount = ffi.UnsignedLong;
typedef DartByteCount = int;
typedef ByteOffset = ffi.UnsignedLong;
typedef DartByteOffset = int;
typedef Duration = SInt32;
typedef AbsoluteTime = UnsignedWide;
typedef OptionBits = UInt32;
typedef ItemCount = ffi.UnsignedLong;
typedef DartItemCount = int;
typedef PBVersion = UInt32;
typedef ScriptCode = SInt16;
typedef LangCode = SInt16;
typedef RegionCode = SInt16;
typedef FourCharCode = UInt32;
typedef OSType = FourCharCode;
typedef ResType = FourCharCode;
typedef OSTypePtr = ffi.Pointer<OSType>;
typedef ResTypePtr = ffi.Pointer<ResType>;
typedef Boolean = ffi.UnsignedChar;
typedef DartBoolean = int;
typedef ProcPtrFunction = ffi.Long Function();
typedef DartProcPtrFunction = int Function();
typedef ProcPtr = ffi.Pointer<ffi.NativeFunction<ProcPtrFunction>>;
typedef Register68kProcPtrFunction = ffi.Void Function();
typedef DartRegister68kProcPtrFunction = void Function();
typedef Register68kProcPtr
    = ffi.Pointer<ffi.NativeFunction<Register68kProcPtrFunction>>;
typedef UniversalProcPtr = ProcPtr;
typedef ProcHandle = ffi.Pointer<ProcPtr>;
typedef UniversalProcHandle = ffi.Pointer<UniversalProcPtr>;
typedef PRefCon = ffi.Pointer<ffi.Void>;
typedef URefCon = ffi.Pointer<ffi.Void>;
typedef SRefCon = ffi.Pointer<ffi.Void>;
typedef UnicodeScalarValue = UInt32;
typedef UTF32Char = UInt32;
typedef UniChar = UInt16;
typedef UTF16Char = UInt16;
typedef UTF8Char = UInt8;
typedef UniCharPtr = ffi.Pointer<UniChar>;
typedef UniCharCount = ffi.UnsignedLong;
typedef DartUniCharCount = int;
typedef UniCharCountPtr = ffi.Pointer<UniCharCount>;
typedef StringPtr = ffi.Pointer<ffi.UnsignedChar>;
typedef StringHandle = ffi.Pointer<StringPtr>;
typedef ConstStringPtr = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStr255Param = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStr63Param = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStr32Param = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStr31Param = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStr27Param = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStr15Param = ffi.Pointer<ffi.UnsignedChar>;
typedef ConstStrFileNameParam = ConstStr63Param;

@ffi.Packed(2)
final class ProcessSerialNumber extends ffi.Struct {
  @UInt32()
  external int highLongOfPSN;

  @UInt32()
  external int lowLongOfPSN;
}

typedef ProcessSerialNumberPtr = ffi.Pointer<ProcessSerialNumber>;

final class Point extends ffi.Struct {
  @ffi.Short()
  external int v;

  @ffi.Short()
  external int h;
}

typedef PointPtr = ffi.Pointer<Point>;

final class Rect extends ffi.Struct {
  @ffi.Short()
  external int top;

  @ffi.Short()
  external int left;

  @ffi.Short()
  external int bottom;

  @ffi.Short()
  external int right;
}

typedef RectPtr = ffi.Pointer<Rect>;

@ffi.Packed(2)
final class FixedPoint extends ffi.Struct {
  @Fixed()
  external int x;

  @Fixed()
  external int y;
}

@ffi.Packed(2)
final class FixedRect extends ffi.Struct {
  @Fixed()
  external int left;

  @Fixed()
  external int top;

  @Fixed()
  external int right;

  @Fixed()
  external int bottom;
}

typedef CharParameter = ffi.Short;
typedef DartCharParameter = int;
typedef Style = ffi.UnsignedChar;
typedef DartStyle = int;
typedef StyleParameter = ffi.Short;
typedef DartStyleParameter = int;
typedef StyleField = Style;
typedef TimeValue = SInt32;
typedef TimeScale = SInt32;
typedef CompTimeValue = wide;
typedef TimeValue64 = SInt64;

final class TimeBaseRecord extends ffi.Opaque {}

typedef TimeBase = ffi.Pointer<TimeBaseRecord>;

@ffi.Packed(2)
final class TimeRecord extends ffi.Struct {
  external CompTimeValue value;

  @TimeScale()
  external int scale;

  external TimeBase base;
}

final class NumVersion extends ffi.Struct {
  @UInt8()
  external int nonRelRev;

  @UInt8()
  external int stage;

  @UInt8()
  external int minorAndBugRev;

  @UInt8()
  external int majorRev;
}

final class NumVersionVariant extends ffi.Union {
  external NumVersion parts;

  @UInt32()
  external int whole;
}

typedef NumVersionVariantPtr = ffi.Pointer<NumVersionVariant>;
typedef NumVersionVariantHandle = ffi.Pointer<NumVersionVariantPtr>;

final class VersRec extends ffi.Struct {
  external NumVersion numericVersion;

  @ffi.Short()
  external int countryCode;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> shortVersion;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.UnsignedChar> reserved;
}

typedef VersRecPtr = ffi.Pointer<VersRec>;
typedef VersRecHndl = ffi.Pointer<VersRecPtr>;
typedef Byte = UInt8;
typedef SignedByte = SInt8;
typedef WidePtr = ffi.Pointer<wide>;
typedef UnsignedWidePtr = ffi.Pointer<UnsignedWide>;
typedef extended80 = Float80;
typedef extended96 = Float96;
typedef VHSelect = SInt8;
typedef CFAllocatorTypeID = ffi.UnsignedLongLong;
typedef DartCFAllocatorTypeID = int;
typedef CFTypeID = ffi.UnsignedLong;
typedef DartCFTypeID = int;
typedef CFOptionFlags = ffi.UnsignedLong;
typedef DartCFOptionFlags = int;
typedef CFHashCode = ffi.UnsignedLong;
typedef DartCFHashCode = int;
typedef CFIndex = ffi.Long;
typedef DartCFIndex = int;
typedef CFTypeRef = ffi.Pointer<ffi.Void>;

final class __CFString extends ffi.Opaque {}

typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFMutableStringRef = ffi.Pointer<__CFString>;
typedef CFPropertyListRef = CFTypeRef;

enum CFComparisonResult {
  kCFCompareLessThan(-1),
  kCFCompareEqualTo(0),
  kCFCompareGreaterThan(1);

  final int value;
  const CFComparisonResult(this.value);

  static CFComparisonResult fromValue(int value) => switch (value) {
        -1 => kCFCompareLessThan,
        0 => kCFCompareEqualTo,
        1 => kCFCompareGreaterThan,
        _ =>
          throw ArgumentError('Unknown value for CFComparisonResult: $value'),
      };
}

typedef CFComparatorFunctionFunction = CFIndex Function(
    ffi.Pointer<ffi.Void> val1,
    ffi.Pointer<ffi.Void> val2,
    ffi.Pointer<ffi.Void> context);
typedef DartCFComparatorFunctionFunction = CFComparisonResult Function(
    ffi.Pointer<ffi.Void> val1,
    ffi.Pointer<ffi.Void> val2,
    ffi.Pointer<ffi.Void> context);
typedef CFComparatorFunction
    = ffi.Pointer<ffi.NativeFunction<CFComparatorFunctionFunction>>;

final class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

final class __CFNull extends ffi.Opaque {}

typedef CFNullRef = ffi.Pointer<__CFNull>;

final class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;
typedef CFAllocatorRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorRetainCallBackFunction>>;
typedef CFAllocatorReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorReleaseCallBackFunction>>;
typedef CFAllocatorCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFAllocatorCopyDescriptionCallBackFunction>>;
typedef CFAllocatorAllocateCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFIndex allocSize, CFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorAllocateCallBackFunction
    = ffi.Pointer<ffi.Void> Function(DartCFIndex allocSize,
        DartCFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef CFAllocatorAllocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorAllocateCallBackFunction>>;
typedef CFAllocatorReallocateCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr,
    CFIndex newsize,
    CFOptionFlags hint,
    ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorReallocateCallBackFunction
    = ffi.Pointer<ffi.Void> Function(
        ffi.Pointer<ffi.Void> ptr,
        DartCFIndex newsize,
        DartCFOptionFlags hint,
        ffi.Pointer<ffi.Void> info);
typedef CFAllocatorReallocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorReallocateCallBackFunction>>;
typedef CFAllocatorDeallocateCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorDeallocateCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> info);
typedef CFAllocatorDeallocateCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorDeallocateCallBackFunction>>;
typedef CFAllocatorPreferredSizeCallBackFunction = CFIndex Function(
    CFIndex size, CFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef DartCFAllocatorPreferredSizeCallBackFunction = DartCFIndex Function(
    DartCFIndex size, DartCFOptionFlags hint, ffi.Pointer<ffi.Void> info);
typedef CFAllocatorPreferredSizeCallBack
    = ffi.Pointer<ffi.NativeFunction<CFAllocatorPreferredSizeCallBackFunction>>;

final class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

enum ptrauth_key {
  ptrauth_key_none(-1),
  ptrauth_key_asia(0),
  ptrauth_key_asib(1),
  ptrauth_key_asda(2),
  ptrauth_key_asdb(3);

  static const ptrauth_key_process_independent_code = ptrauth_key_asia;
  static const ptrauth_key_process_dependent_code = ptrauth_key_asib;
  static const ptrauth_key_process_independent_data = ptrauth_key_asda;
  static const ptrauth_key_process_dependent_data = ptrauth_key_asdb;
  static const ptrauth_key_function_pointer = ptrauth_key_asia;
  static const ptrauth_key_return_address = ptrauth_key_asib;
  static const ptrauth_key_frame_pointer = ptrauth_key_asdb;
  static const ptrauth_key_block_function = ptrauth_key_asia;
  static const ptrauth_key_cxx_vtable_pointer = ptrauth_key_asda;
  static const ptrauth_key_method_list_pointer = ptrauth_key_asda;
  static const ptrauth_key_objc_isa_pointer = ptrauth_key_asda;
  static const ptrauth_key_objc_super_pointer = ptrauth_key_asda;
  static const ptrauth_key_block_descriptor_pointer = ptrauth_key_asda;
  static const ptrauth_key_objc_sel_pointer = ptrauth_key_asdb;
  static const ptrauth_key_objc_class_ro_pointer = ptrauth_key_asda;

  final int value;
  const ptrauth_key(this.value);

  static ptrauth_key fromValue(int value) => switch (value) {
        -1 => ptrauth_key_none,
        0 => ptrauth_key_asia,
        1 => ptrauth_key_asib,
        2 => ptrauth_key_asda,
        3 => ptrauth_key_asdb,
        _ => throw ArgumentError('Unknown value for ptrauth_key: $value'),
      };

  @override
  String toString() {
    if (this == ptrauth_key_asia)
      return "ptrauth_key.ptrauth_key_asia, ptrauth_key.ptrauth_key_process_independent_code, ptrauth_key.ptrauth_key_function_pointer, ptrauth_key.ptrauth_key_block_function";
    if (this == ptrauth_key_asib)
      return "ptrauth_key.ptrauth_key_asib, ptrauth_key.ptrauth_key_process_dependent_code, ptrauth_key.ptrauth_key_return_address";
    if (this == ptrauth_key_asda)
      return "ptrauth_key.ptrauth_key_asda, ptrauth_key.ptrauth_key_process_independent_data, ptrauth_key.ptrauth_key_cxx_vtable_pointer, ptrauth_key.ptrauth_key_method_list_pointer, ptrauth_key.ptrauth_key_objc_isa_pointer, ptrauth_key.ptrauth_key_objc_super_pointer, ptrauth_key.ptrauth_key_block_descriptor_pointer, ptrauth_key.ptrauth_key_objc_class_ro_pointer";
    if (this == ptrauth_key_asdb)
      return "ptrauth_key.ptrauth_key_asdb, ptrauth_key.ptrauth_key_process_dependent_data, ptrauth_key.ptrauth_key_frame_pointer, ptrauth_key.ptrauth_key_objc_sel_pointer";
    return super.toString();
  }
}

typedef ptrauth_extra_data_t = ffi.UnsignedLong;
typedef Dartptrauth_extra_data_t = int;
typedef ptrauth_generic_signature_t = ffi.UnsignedLong;
typedef Dartptrauth_generic_signature_t = int;
typedef CGFloat = ffi.Double;
typedef DartCGFloat = double;

final class CGPoint extends ffi.Struct {
  @CGFloat()
  external double x;

  @CGFloat()
  external double y;
}

final class CGSize extends ffi.Struct {
  @CGFloat()
  external double width;

  @CGFloat()
  external double height;
}

final class CGVector extends ffi.Struct {
  @CGFloat()
  external double dx;

  @CGFloat()
  external double dy;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

enum CGRectEdge {
  CGRectMinXEdge(0),
  CGRectMinYEdge(1),
  CGRectMaxXEdge(2),
  CGRectMaxYEdge(3);

  final int value;
  const CGRectEdge(this.value);

  static CGRectEdge fromValue(int value) => switch (value) {
        0 => CGRectMinXEdge,
        1 => CGRectMinYEdge,
        2 => CGRectMaxXEdge,
        3 => CGRectMaxYEdge,
        _ => throw ArgumentError('Unknown value for CGRectEdge: $value'),
      };
}

final class CGAffineTransform extends ffi.Struct {
  @CGFloat()
  external double a;

  @CGFloat()
  external double b;

  @CGFloat()
  external double c;

  @CGFloat()
  external double d;

  @CGFloat()
  external double tx;

  @CGFloat()
  external double ty;
}

final class CGAffineTransformComponents extends ffi.Struct {
  external CGSize scale;

  @CGFloat()
  external double horizontalShear;

  @CGFloat()
  external double rotation;

  external CGVector translation;
}

final class __IOSurface extends ffi.Opaque {}

typedef IOSurfaceRef = ffi.Pointer<__IOSurface>;
typedef CFDictionaryRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFDictionaryRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryRetainCallBackFunction>>;
typedef CFDictionaryReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFDictionaryReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFDictionaryReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryReleaseCallBackFunction>>;
typedef CFDictionaryCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFDictionaryCopyDescriptionCallBackFunction>>;
typedef CFDictionaryEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFDictionaryEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFDictionaryEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryEqualCallBackFunction>>;
typedef CFDictionaryHashCallBackFunction = CFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFDictionaryHashCallBackFunction = DartCFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef CFDictionaryHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryHashCallBackFunction>>;

final class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

final class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

typedef CFDictionaryApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> context);
typedef DartCFDictionaryApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Void> context);
typedef CFDictionaryApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFDictionaryApplierFunctionFunction>>;

final class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFMutableDictionaryRef = ffi.Pointer<__CFDictionary>;

final class CGContext extends ffi.Opaque {}

typedef CGContextRef = ffi.Pointer<CGContext>;

final class CGColor extends ffi.Opaque {}

typedef CGColorRef = ffi.Pointer<CGColor>;

final class CGColorSpace extends ffi.Opaque {}

typedef CGColorSpaceRef = ffi.Pointer<CGColorSpace>;

final class CGDataProvider extends ffi.Opaque {}

typedef CGDataProviderRef = ffi.Pointer<CGDataProvider>;

final class __CFData extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;
typedef CFMutableDataRef = ffi.Pointer<__CFData>;

enum CFDataSearchFlags {
  kCFDataSearchBackwards(1),
  kCFDataSearchAnchored(2);

  final int value;
  const CFDataSearchFlags(this.value);

  static CFDataSearchFlags fromValue(int value) => switch (value) {
        1 => kCFDataSearchBackwards,
        2 => kCFDataSearchAnchored,
        _ => throw ArgumentError('Unknown value for CFDataSearchFlags: $value'),
      };
}

typedef CFErrorDomain = CFStringRef;

final class __CFError extends ffi.Opaque {}

typedef CFErrorRef = ffi.Pointer<__CFError>;
typedef CFArrayRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFArrayRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayRetainCallBackFunction>>;
typedef CFArrayReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFArrayReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFArrayReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayReleaseCallBackFunction>>;
typedef CFArrayCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFArrayCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayCopyDescriptionCallBackFunction>>;
typedef CFArrayEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFArrayEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFArrayEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFArrayEqualCallBackFunction>>;

final class CFArrayCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFArrayRetainCallBack retain;

  external CFArrayReleaseCallBack release;

  external CFArrayCopyDescriptionCallBack copyDescription;

  external CFArrayEqualCallBack equal;
}

typedef CFArrayApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFArrayApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef CFArrayApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFArrayApplierFunctionFunction>>;

final class __CFArray extends ffi.Opaque {}

typedef CFArrayRef = ffi.Pointer<__CFArray>;
typedef CFMutableArrayRef = ffi.Pointer<__CFArray>;

final class __CFCharacterSet extends ffi.Opaque {}

typedef CFCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef CFMutableCharacterSetRef = ffi.Pointer<__CFCharacterSet>;

enum CFCharacterSetPredefinedSet {
  kCFCharacterSetControl(1),
  kCFCharacterSetWhitespace(2),
  kCFCharacterSetWhitespaceAndNewline(3),
  kCFCharacterSetDecimalDigit(4),
  kCFCharacterSetLetter(5),
  kCFCharacterSetLowercaseLetter(6),
  kCFCharacterSetUppercaseLetter(7),
  kCFCharacterSetNonBase(8),
  kCFCharacterSetDecomposable(9),
  kCFCharacterSetAlphaNumeric(10),
  kCFCharacterSetPunctuation(11),
  kCFCharacterSetCapitalizedLetter(13),
  kCFCharacterSetSymbol(14),
  kCFCharacterSetNewline(15),
  kCFCharacterSetIllegal(12);

  final int value;
  const CFCharacterSetPredefinedSet(this.value);

  static CFCharacterSetPredefinedSet fromValue(int value) => switch (value) {
        1 => kCFCharacterSetControl,
        2 => kCFCharacterSetWhitespace,
        3 => kCFCharacterSetWhitespaceAndNewline,
        4 => kCFCharacterSetDecimalDigit,
        5 => kCFCharacterSetLetter,
        6 => kCFCharacterSetLowercaseLetter,
        7 => kCFCharacterSetUppercaseLetter,
        8 => kCFCharacterSetNonBase,
        9 => kCFCharacterSetDecomposable,
        10 => kCFCharacterSetAlphaNumeric,
        11 => kCFCharacterSetPunctuation,
        13 => kCFCharacterSetCapitalizedLetter,
        14 => kCFCharacterSetSymbol,
        15 => kCFCharacterSetNewline,
        12 => kCFCharacterSetIllegal,
        _ => throw ArgumentError(
            'Unknown value for CFCharacterSetPredefinedSet: $value'),
      };
}

typedef CFNotificationName = CFStringRef;

final class __CFNotificationCenter extends ffi.Opaque {}

typedef CFNotificationCenterRef = ffi.Pointer<__CFNotificationCenter>;
typedef CFNotificationCallbackFunction = ffi.Void Function(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo);
typedef DartCFNotificationCallbackFunction = void Function(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo);
typedef CFNotificationCallback
    = ffi.Pointer<ffi.NativeFunction<CFNotificationCallbackFunction>>;

enum CFNotificationSuspensionBehavior {
  CFNotificationSuspensionBehaviorDrop(1),
  CFNotificationSuspensionBehaviorCoalesce(2),
  CFNotificationSuspensionBehaviorHold(3),
  CFNotificationSuspensionBehaviorDeliverImmediately(4);

  final int value;
  const CFNotificationSuspensionBehavior(this.value);

  static CFNotificationSuspensionBehavior fromValue(int value) =>
      switch (value) {
        1 => CFNotificationSuspensionBehaviorDrop,
        2 => CFNotificationSuspensionBehaviorCoalesce,
        3 => CFNotificationSuspensionBehaviorHold,
        4 => CFNotificationSuspensionBehaviorDeliverImmediately,
        _ => throw ArgumentError(
            'Unknown value for CFNotificationSuspensionBehavior: $value'),
      };
}

typedef CFLocaleIdentifier = CFStringRef;
typedef CFLocaleKey = CFStringRef;

final class __CFLocale extends ffi.Opaque {}

typedef CFLocaleRef = ffi.Pointer<__CFLocale>;

enum CFLocaleLanguageDirection {
  kCFLocaleLanguageDirectionUnknown(0),
  kCFLocaleLanguageDirectionLeftToRight(1),
  kCFLocaleLanguageDirectionRightToLeft(2),
  kCFLocaleLanguageDirectionTopToBottom(3),
  kCFLocaleLanguageDirectionBottomToTop(4);

  final int value;
  const CFLocaleLanguageDirection(this.value);

  static CFLocaleLanguageDirection fromValue(int value) => switch (value) {
        0 => kCFLocaleLanguageDirectionUnknown,
        1 => kCFLocaleLanguageDirectionLeftToRight,
        2 => kCFLocaleLanguageDirectionRightToLeft,
        3 => kCFLocaleLanguageDirectionTopToBottom,
        4 => kCFLocaleLanguageDirectionBottomToTop,
        _ => throw ArgumentError(
            'Unknown value for CFLocaleLanguageDirection: $value'),
      };
}

typedef CFCalendarIdentifier = CFStringRef;
typedef __gnuc_va_list = __builtin_va_list;
typedef va_list = __builtin_va_list;
typedef CFStringEncoding = UInt32;

enum CFStringBuiltInEncodings {
  kCFStringEncodingMacRoman(0),
  kCFStringEncodingWindowsLatin1(1280),
  kCFStringEncodingISOLatin1(513),
  kCFStringEncodingNextStepLatin(2817),
  kCFStringEncodingASCII(1536),
  kCFStringEncodingUnicode(256),
  kCFStringEncodingUTF8(134217984),
  kCFStringEncodingNonLossyASCII(3071),
  kCFStringEncodingUTF16BE(268435712),
  kCFStringEncodingUTF16LE(335544576),
  kCFStringEncodingUTF32(201326848),
  kCFStringEncodingUTF32BE(402653440),
  kCFStringEncodingUTF32LE(469762304);

  static const kCFStringEncodingUTF16 = kCFStringEncodingUnicode;

  final int value;
  const CFStringBuiltInEncodings(this.value);

  static CFStringBuiltInEncodings fromValue(int value) => switch (value) {
        0 => kCFStringEncodingMacRoman,
        1280 => kCFStringEncodingWindowsLatin1,
        513 => kCFStringEncodingISOLatin1,
        2817 => kCFStringEncodingNextStepLatin,
        1536 => kCFStringEncodingASCII,
        256 => kCFStringEncodingUnicode,
        134217984 => kCFStringEncodingUTF8,
        3071 => kCFStringEncodingNonLossyASCII,
        268435712 => kCFStringEncodingUTF16BE,
        335544576 => kCFStringEncodingUTF16LE,
        201326848 => kCFStringEncodingUTF32,
        402653440 => kCFStringEncodingUTF32BE,
        469762304 => kCFStringEncodingUTF32LE,
        _ => throw ArgumentError(
            'Unknown value for CFStringBuiltInEncodings: $value'),
      };

  @override
  String toString() {
    if (this == kCFStringEncodingUnicode)
      return "CFStringBuiltInEncodings.kCFStringEncodingUnicode, CFStringBuiltInEncodings.kCFStringEncodingUTF16";
    return super.toString();
  }
}

enum CFStringCompareFlags {
  kCFCompareCaseInsensitive(1),
  kCFCompareBackwards(4),
  kCFCompareAnchored(8),
  kCFCompareNonliteral(16),
  kCFCompareLocalized(32),
  kCFCompareNumerically(64),
  kCFCompareDiacriticInsensitive(128),
  kCFCompareWidthInsensitive(256),
  kCFCompareForcedOrdering(512);

  final int value;
  const CFStringCompareFlags(this.value);

  static CFStringCompareFlags fromValue(int value) => switch (value) {
        1 => kCFCompareCaseInsensitive,
        4 => kCFCompareBackwards,
        8 => kCFCompareAnchored,
        16 => kCFCompareNonliteral,
        32 => kCFCompareLocalized,
        64 => kCFCompareNumerically,
        128 => kCFCompareDiacriticInsensitive,
        256 => kCFCompareWidthInsensitive,
        512 => kCFCompareForcedOrdering,
        _ =>
          throw ArgumentError('Unknown value for CFStringCompareFlags: $value'),
      };
}

enum CFStringNormalizationForm {
  kCFStringNormalizationFormD(0),
  kCFStringNormalizationFormKD(1),
  kCFStringNormalizationFormC(2),
  kCFStringNormalizationFormKC(3);

  final int value;
  const CFStringNormalizationForm(this.value);

  static CFStringNormalizationForm fromValue(int value) => switch (value) {
        0 => kCFStringNormalizationFormD,
        1 => kCFStringNormalizationFormKD,
        2 => kCFStringNormalizationFormC,
        3 => kCFStringNormalizationFormKC,
        _ => throw ArgumentError(
            'Unknown value for CFStringNormalizationForm: $value'),
      };
}

final class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UniChar> buffer;

  external CFStringRef theString;

  external ffi.Pointer<UniChar> directUniCharBuffer;

  external ffi.Pointer<ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @CFIndex()
  external int bufferedRangeStart;

  @CFIndex()
  external int bufferedRangeEnd;
}

enum CFURLPathStyle {
  kCFURLPOSIXPathStyle(0),
  kCFURLHFSPathStyle(1),
  kCFURLWindowsPathStyle(2);

  final int value;
  const CFURLPathStyle(this.value);

  static CFURLPathStyle fromValue(int value) => switch (value) {
        0 => kCFURLPOSIXPathStyle,
        1 => kCFURLHFSPathStyle,
        2 => kCFURLWindowsPathStyle,
        _ => throw ArgumentError('Unknown value for CFURLPathStyle: $value'),
      };
}

final class __CFURL extends ffi.Opaque {}

typedef CFURLRef = ffi.Pointer<__CFURL>;

enum CFURLComponentType {
  kCFURLComponentScheme(1),
  kCFURLComponentNetLocation(2),
  kCFURLComponentPath(3),
  kCFURLComponentResourceSpecifier(4),
  kCFURLComponentUser(5),
  kCFURLComponentPassword(6),
  kCFURLComponentUserInfo(7),
  kCFURLComponentHost(8),
  kCFURLComponentPort(9),
  kCFURLComponentParameterString(10),
  kCFURLComponentQuery(11),
  kCFURLComponentFragment(12);

  final int value;
  const CFURLComponentType(this.value);

  static CFURLComponentType fromValue(int value) => switch (value) {
        1 => kCFURLComponentScheme,
        2 => kCFURLComponentNetLocation,
        3 => kCFURLComponentPath,
        4 => kCFURLComponentResourceSpecifier,
        5 => kCFURLComponentUser,
        6 => kCFURLComponentPassword,
        7 => kCFURLComponentUserInfo,
        8 => kCFURLComponentHost,
        9 => kCFURLComponentPort,
        10 => kCFURLComponentParameterString,
        11 => kCFURLComponentQuery,
        12 => kCFURLComponentFragment,
        _ =>
          throw ArgumentError('Unknown value for CFURLComponentType: $value'),
      };
}

final class FSRef extends ffi.Opaque {}

enum CFURLBookmarkCreationOptions {
  kCFURLBookmarkCreationMinimalBookmarkMask(512),
  kCFURLBookmarkCreationSuitableForBookmarkFile(1024),
  kCFURLBookmarkCreationWithSecurityScope(2048),
  kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess(4096),
  kCFURLBookmarkCreationWithoutImplicitSecurityScope(536870912),
  kCFURLBookmarkCreationPreferFileIDResolutionMask(256);

  final int value;
  const CFURLBookmarkCreationOptions(this.value);

  static CFURLBookmarkCreationOptions fromValue(int value) => switch (value) {
        512 => kCFURLBookmarkCreationMinimalBookmarkMask,
        1024 => kCFURLBookmarkCreationSuitableForBookmarkFile,
        2048 => kCFURLBookmarkCreationWithSecurityScope,
        4096 => kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess,
        536870912 => kCFURLBookmarkCreationWithoutImplicitSecurityScope,
        256 => kCFURLBookmarkCreationPreferFileIDResolutionMask,
        _ => throw ArgumentError(
            'Unknown value for CFURLBookmarkCreationOptions: $value'),
      };
}

enum CFURLBookmarkResolutionOptions {
  kCFURLBookmarkResolutionWithoutUIMask(256),
  kCFURLBookmarkResolutionWithoutMountingMask(512),
  kCFURLBookmarkResolutionWithSecurityScope(1024),
  kCFURLBookmarkResolutionWithoutImplicitStartAccessing(32768);

  static const kCFBookmarkResolutionWithoutUIMask =
      kCFURLBookmarkResolutionWithoutUIMask;
  static const kCFBookmarkResolutionWithoutMountingMask =
      kCFURLBookmarkResolutionWithoutMountingMask;

  final int value;
  const CFURLBookmarkResolutionOptions(this.value);

  static CFURLBookmarkResolutionOptions fromValue(int value) => switch (value) {
        256 => kCFURLBookmarkResolutionWithoutUIMask,
        512 => kCFURLBookmarkResolutionWithoutMountingMask,
        1024 => kCFURLBookmarkResolutionWithSecurityScope,
        32768 => kCFURLBookmarkResolutionWithoutImplicitStartAccessing,
        _ => throw ArgumentError(
            'Unknown value for CFURLBookmarkResolutionOptions: $value'),
      };

  @override
  String toString() {
    if (this == kCFURLBookmarkResolutionWithoutUIMask)
      return "CFURLBookmarkResolutionOptions.kCFURLBookmarkResolutionWithoutUIMask, CFURLBookmarkResolutionOptions.kCFBookmarkResolutionWithoutUIMask";
    if (this == kCFURLBookmarkResolutionWithoutMountingMask)
      return "CFURLBookmarkResolutionOptions.kCFURLBookmarkResolutionWithoutMountingMask, CFURLBookmarkResolutionOptions.kCFBookmarkResolutionWithoutMountingMask";
    return super.toString();
  }
}

typedef CFURLBookmarkFileCreationOptions = CFOptionFlags;
typedef CGDataProviderGetBytesCallbackFunction = ffi.Size Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> buffer, ffi.Size count);
typedef DartCGDataProviderGetBytesCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> buffer, int count);
typedef CGDataProviderGetBytesCallback
    = ffi.Pointer<ffi.NativeFunction<CGDataProviderGetBytesCallbackFunction>>;
typedef CGDataProviderSkipForwardCallbackFunction = off_t Function(
    ffi.Pointer<ffi.Void> info, off_t count);
typedef DartCGDataProviderSkipForwardCallbackFunction = Dart__int64_t Function(
    ffi.Pointer<ffi.Void> info, Dart__int64_t count);
typedef CGDataProviderSkipForwardCallback = ffi
    .Pointer<ffi.NativeFunction<CGDataProviderSkipForwardCallbackFunction>>;
typedef CGDataProviderRewindCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCGDataProviderRewindCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CGDataProviderRewindCallback
    = ffi.Pointer<ffi.NativeFunction<CGDataProviderRewindCallbackFunction>>;
typedef CGDataProviderReleaseInfoCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCGDataProviderReleaseInfoCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CGDataProviderReleaseInfoCallback = ffi
    .Pointer<ffi.NativeFunction<CGDataProviderReleaseInfoCallbackFunction>>;

final class CGDataProviderSequentialCallbacks extends ffi.Struct {
  @ffi.UnsignedInt()
  external int version;

  external CGDataProviderGetBytesCallback getBytes;

  external CGDataProviderSkipForwardCallback skipForward;

  external CGDataProviderRewindCallback rewind;

  external CGDataProviderReleaseInfoCallback releaseInfo;
}

typedef CGDataProviderGetBytePointerCallbackFunction = ffi.Pointer<ffi.Void>
    Function(ffi.Pointer<ffi.Void> info);
typedef CGDataProviderGetBytePointerCallback = ffi
    .Pointer<ffi.NativeFunction<CGDataProviderGetBytePointerCallbackFunction>>;
typedef CGDataProviderReleaseBytePointerCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> pointer);
typedef DartCGDataProviderReleaseBytePointerCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> pointer);
typedef CGDataProviderReleaseBytePointerCallback = ffi.Pointer<
    ffi.NativeFunction<CGDataProviderReleaseBytePointerCallbackFunction>>;
typedef CGDataProviderGetBytesAtPositionCallbackFunction = ffi.Size Function(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<ffi.Void> buffer,
    off_t pos,
    ffi.Size cnt);
typedef DartCGDataProviderGetBytesAtPositionCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<ffi.Void> buffer,
    Dart__int64_t pos,
    int cnt);
typedef CGDataProviderGetBytesAtPositionCallback = ffi.Pointer<
    ffi.NativeFunction<CGDataProviderGetBytesAtPositionCallbackFunction>>;

final class CGDataProviderDirectCallbacks extends ffi.Struct {
  @ffi.UnsignedInt()
  external int version;

  external CGDataProviderGetBytePointerCallback getBytePointer;

  external CGDataProviderReleaseBytePointerCallback releaseBytePointer;

  external CGDataProviderGetBytesAtPositionCallback getBytesAtPosition;

  external CGDataProviderReleaseInfoCallback releaseInfo;
}

typedef CGDataProviderReleaseDataCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> data, ffi.Size size);
typedef DartCGDataProviderReleaseDataCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> data, int size);
typedef CGDataProviderReleaseDataCallback = ffi
    .Pointer<ffi.NativeFunction<CGDataProviderReleaseDataCallbackFunction>>;

enum CGColorRenderingIntent {
  kCGRenderingIntentDefault(0),
  kCGRenderingIntentAbsoluteColorimetric(1),
  kCGRenderingIntentRelativeColorimetric(2),
  kCGRenderingIntentPerceptual(3),
  kCGRenderingIntentSaturation(4);

  final int value;
  const CGColorRenderingIntent(this.value);

  static CGColorRenderingIntent fromValue(int value) => switch (value) {
        0 => kCGRenderingIntentDefault,
        1 => kCGRenderingIntentAbsoluteColorimetric,
        2 => kCGRenderingIntentRelativeColorimetric,
        3 => kCGRenderingIntentPerceptual,
        4 => kCGRenderingIntentSaturation,
        _ => throw ArgumentError(
            'Unknown value for CGColorRenderingIntent: $value'),
      };
}

enum CGColorSpaceModel {
  kCGColorSpaceModelUnknown(-1),
  kCGColorSpaceModelMonochrome(0),
  kCGColorSpaceModelRGB(1),
  kCGColorSpaceModelCMYK(2),
  kCGColorSpaceModelLab(3),
  kCGColorSpaceModelDeviceN(4),
  kCGColorSpaceModelIndexed(5),
  kCGColorSpaceModelPattern(6),
  kCGColorSpaceModelXYZ(7);

  final int value;
  const CGColorSpaceModel(this.value);

  static CGColorSpaceModel fromValue(int value) => switch (value) {
        -1 => kCGColorSpaceModelUnknown,
        0 => kCGColorSpaceModelMonochrome,
        1 => kCGColorSpaceModelRGB,
        2 => kCGColorSpaceModelCMYK,
        3 => kCGColorSpaceModelLab,
        4 => kCGColorSpaceModelDeviceN,
        5 => kCGColorSpaceModelIndexed,
        6 => kCGColorSpaceModelPattern,
        7 => kCGColorSpaceModelXYZ,
        _ => throw ArgumentError('Unknown value for CGColorSpaceModel: $value'),
      };
}

final class ColorSyncProfile extends ffi.Opaque {}

typedef ColorSyncProfileRef = ffi.Pointer<ColorSyncProfile>;

final class CGPattern extends ffi.Opaque {}

typedef CGPatternRef = ffi.Pointer<CGPattern>;

enum CGPatternTiling {
  kCGPatternTilingNoDistortion(0),
  kCGPatternTilingConstantSpacingMinimalDistortion(1),
  kCGPatternTilingConstantSpacing(2);

  final int value;
  const CGPatternTiling(this.value);

  static CGPatternTiling fromValue(int value) => switch (value) {
        0 => kCGPatternTilingNoDistortion,
        1 => kCGPatternTilingConstantSpacingMinimalDistortion,
        2 => kCGPatternTilingConstantSpacing,
        _ => throw ArgumentError('Unknown value for CGPatternTiling: $value'),
      };
}

typedef CGPatternDrawPatternCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info, CGContextRef context);
typedef DartCGPatternDrawPatternCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info, CGContextRef context);
typedef CGPatternDrawPatternCallback
    = ffi.Pointer<ffi.NativeFunction<CGPatternDrawPatternCallbackFunction>>;
typedef CGPatternReleaseInfoCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCGPatternReleaseInfoCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CGPatternReleaseInfoCallback
    = ffi.Pointer<ffi.NativeFunction<CGPatternReleaseInfoCallbackFunction>>;

final class CGPatternCallbacks extends ffi.Struct {
  @ffi.UnsignedInt()
  external int version;

  external CGPatternDrawPatternCallback drawPattern;

  external CGPatternReleaseInfoCallback releaseInfo;
}

final class CGFont extends ffi.Opaque {}

typedef CGFontRef = ffi.Pointer<CGFont>;
typedef CGFontIndex = ffi.UnsignedShort;
typedef DartCGFontIndex = int;
typedef CGGlyph = CGFontIndex;

enum CGFontPostScriptFormat {
  kCGFontPostScriptFormatType1(1),
  kCGFontPostScriptFormatType3(3),
  kCGFontPostScriptFormatType42(42);

  final int value;
  const CGFontPostScriptFormat(this.value);

  static CGFontPostScriptFormat fromValue(int value) => switch (value) {
        1 => kCGFontPostScriptFormatType1,
        3 => kCGFontPostScriptFormatType3,
        42 => kCGFontPostScriptFormatType42,
        _ => throw ArgumentError(
            'Unknown value for CGFontPostScriptFormat: $value'),
      };
}

enum CGGlyphDeprecatedEnum {
  CGGlyphMin(0),
  CGGlyphMax(1);

  final int value;
  const CGGlyphDeprecatedEnum(this.value);

  static CGGlyphDeprecatedEnum fromValue(int value) => switch (value) {
        0 => CGGlyphMin,
        1 => CGGlyphMax,
        _ => throw ArgumentError(
            'Unknown value for CGGlyphDeprecatedEnum: $value'),
      };
}

final class CGGradient extends ffi.Opaque {}

typedef CGGradientRef = ffi.Pointer<CGGradient>;

enum CGGradientDrawingOptions {
  kCGGradientDrawsBeforeStartLocation(1),
  kCGGradientDrawsAfterEndLocation(2);

  final int value;
  const CGGradientDrawingOptions(this.value);

  static CGGradientDrawingOptions fromValue(int value) => switch (value) {
        1 => kCGGradientDrawsBeforeStartLocation,
        2 => kCGGradientDrawsAfterEndLocation,
        _ => throw ArgumentError(
            'Unknown value for CGGradientDrawingOptions: $value'),
      };
}

final class CGImage extends ffi.Opaque {}

typedef CGImageRef = ffi.Pointer<CGImage>;

enum CGImageAlphaInfo {
  kCGImageAlphaNone(0),
  kCGImageAlphaPremultipliedLast(1),
  kCGImageAlphaPremultipliedFirst(2),
  kCGImageAlphaLast(3),
  kCGImageAlphaFirst(4),
  kCGImageAlphaNoneSkipLast(5),
  kCGImageAlphaNoneSkipFirst(6),
  kCGImageAlphaOnly(7);

  final int value;
  const CGImageAlphaInfo(this.value);

  static CGImageAlphaInfo fromValue(int value) => switch (value) {
        0 => kCGImageAlphaNone,
        1 => kCGImageAlphaPremultipliedLast,
        2 => kCGImageAlphaPremultipliedFirst,
        3 => kCGImageAlphaLast,
        4 => kCGImageAlphaFirst,
        5 => kCGImageAlphaNoneSkipLast,
        6 => kCGImageAlphaNoneSkipFirst,
        7 => kCGImageAlphaOnly,
        _ => throw ArgumentError('Unknown value for CGImageAlphaInfo: $value'),
      };
}

enum CGImageByteOrderInfo {
  kCGImageByteOrderMask(28672),
  kCGImageByteOrderDefault(0),
  kCGImageByteOrder16Little(4096),
  kCGImageByteOrder32Little(8192),
  kCGImageByteOrder16Big(12288),
  kCGImageByteOrder32Big(16384);

  final int value;
  const CGImageByteOrderInfo(this.value);

  static CGImageByteOrderInfo fromValue(int value) => switch (value) {
        28672 => kCGImageByteOrderMask,
        0 => kCGImageByteOrderDefault,
        4096 => kCGImageByteOrder16Little,
        8192 => kCGImageByteOrder32Little,
        12288 => kCGImageByteOrder16Big,
        16384 => kCGImageByteOrder32Big,
        _ =>
          throw ArgumentError('Unknown value for CGImageByteOrderInfo: $value'),
      };
}

enum CGImagePixelFormatInfo {
  kCGImagePixelFormatMask(983040),
  kCGImagePixelFormatPacked(0),
  kCGImagePixelFormatRGB555(65536),
  kCGImagePixelFormatRGB565(131072),
  kCGImagePixelFormatRGB101010(196608),
  kCGImagePixelFormatRGBCIF10(262144);

  final int value;
  const CGImagePixelFormatInfo(this.value);

  static CGImagePixelFormatInfo fromValue(int value) => switch (value) {
        983040 => kCGImagePixelFormatMask,
        0 => kCGImagePixelFormatPacked,
        65536 => kCGImagePixelFormatRGB555,
        131072 => kCGImagePixelFormatRGB565,
        196608 => kCGImagePixelFormatRGB101010,
        262144 => kCGImagePixelFormatRGBCIF10,
        _ => throw ArgumentError(
            'Unknown value for CGImagePixelFormatInfo: $value'),
      };
}

enum CGBitmapInfo {
  kCGBitmapAlphaInfoMask(31),
  kCGBitmapFloatInfoMask(3840),
  kCGBitmapFloatComponents(256),
  kCGBitmapByteOrderMask(28672),
  kCGBitmapByteOrderDefault(0),
  kCGBitmapByteOrder16Little(4096),
  kCGBitmapByteOrder32Little(8192),
  kCGBitmapByteOrder16Big(12288),
  kCGBitmapByteOrder32Big(16384);

  final int value;
  const CGBitmapInfo(this.value);

  static CGBitmapInfo fromValue(int value) => switch (value) {
        31 => kCGBitmapAlphaInfoMask,
        3840 => kCGBitmapFloatInfoMask,
        256 => kCGBitmapFloatComponents,
        28672 => kCGBitmapByteOrderMask,
        0 => kCGBitmapByteOrderDefault,
        4096 => kCGBitmapByteOrder16Little,
        8192 => kCGBitmapByteOrder32Little,
        12288 => kCGBitmapByteOrder16Big,
        16384 => kCGBitmapByteOrder32Big,
        _ => throw ArgumentError('Unknown value for CGBitmapInfo: $value'),
      };
}

final class CGPath extends ffi.Opaque {}

typedef CGMutablePathRef = ffi.Pointer<CGPath>;
typedef CGPathRef = ffi.Pointer<CGPath>;

enum CGLineJoin {
  kCGLineJoinMiter(0),
  kCGLineJoinRound(1),
  kCGLineJoinBevel(2);

  final int value;
  const CGLineJoin(this.value);

  static CGLineJoin fromValue(int value) => switch (value) {
        0 => kCGLineJoinMiter,
        1 => kCGLineJoinRound,
        2 => kCGLineJoinBevel,
        _ => throw ArgumentError('Unknown value for CGLineJoin: $value'),
      };
}

enum CGLineCap {
  kCGLineCapButt(0),
  kCGLineCapRound(1),
  kCGLineCapSquare(2);

  final int value;
  const CGLineCap(this.value);

  static CGLineCap fromValue(int value) => switch (value) {
        0 => kCGLineCapButt,
        1 => kCGLineCapRound,
        2 => kCGLineCapSquare,
        _ => throw ArgumentError('Unknown value for CGLineCap: $value'),
      };
}

enum CGPathElementType {
  kCGPathElementMoveToPoint(0),
  kCGPathElementAddLineToPoint(1),
  kCGPathElementAddQuadCurveToPoint(2),
  kCGPathElementAddCurveToPoint(3),
  kCGPathElementCloseSubpath(4);

  final int value;
  const CGPathElementType(this.value);

  static CGPathElementType fromValue(int value) => switch (value) {
        0 => kCGPathElementMoveToPoint,
        1 => kCGPathElementAddLineToPoint,
        2 => kCGPathElementAddQuadCurveToPoint,
        3 => kCGPathElementAddCurveToPoint,
        4 => kCGPathElementCloseSubpath,
        _ => throw ArgumentError('Unknown value for CGPathElementType: $value'),
      };
}

final class CGPathElement extends ffi.Struct {
  @ffi.Int32()
  external int typeAsInt;

  CGPathElementType get type => CGPathElementType.fromValue(typeAsInt);

  external ffi.Pointer<CGPoint> points;
}

typedef CGPathApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<CGPathElement> element);
typedef DartCGPathApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<CGPathElement> element);
typedef CGPathApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CGPathApplierFunctionFunction>>;
void _ObjCBlock_ffiVoid_CGPathElement_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<CGPathElement> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<CGPathElement> arg0)>>()
        .asFunction<void Function(ffi.Pointer<CGPathElement>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_CGPathElement_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<CGPathElement>)>(
            _ObjCBlock_ffiVoid_CGPathElement_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_CGPathElement_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<CGPathElement> arg0) =>
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<CGPathElement>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_CGPathElement_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<CGPathElement>)>(
            _ObjCBlock_ffiVoid_CGPathElement_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_CGPathElement_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<CGPathElement> arg0) {
  (objc.getBlockClosure(block) as void Function(
      ffi.Pointer<CGPathElement>))(arg0);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<CGPathElement>)>
    _ObjCBlock_ffiVoid_CGPathElement_listenerCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<CGPathElement>)>.listener(
        _ObjCBlock_ffiVoid_CGPathElement_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_CGPathElement_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    ffi.Pointer<CGPathElement> arg0) {
  try {
    (objc.getBlockClosure(block) as void Function(
        ffi.Pointer<CGPathElement>))(arg0);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CGPathElement>)>
    _ObjCBlock_ffiVoid_CGPathElement_blockingCallable = ffi.NativeCallable<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>,
                ffi.Pointer<CGPathElement>)>.isolateLocal(
        _ObjCBlock_ffiVoid_CGPathElement_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CGPathElement>)>
    _ObjCBlock_ffiVoid_CGPathElement_blockingListenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, ffi.Pointer<CGPathElement>)>.listener(
        _ObjCBlock_ffiVoid_CGPathElement_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>`.
abstract final class ObjCBlock_ffiVoid_CGPathElement {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)> fromFunctionPointer(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<CGPathElement> arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_CGPathElement_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>
      fromFunction(void Function(ffi.Pointer<CGPathElement>) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>(
              objc.newClosureBlock(
                  _ObjCBlock_ffiVoid_CGPathElement_closureCallable,
                  (ffi.Pointer<CGPathElement> arg0) => fn(arg0),
                  keepIsolateAlive),
              retain: false,
              release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)> listener(
      void Function(ffi.Pointer<CGPathElement>) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CGPathElement_listenerCallable.nativeFunction.cast(),
        (ffi.Pointer<CGPathElement> arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_1ctgxtl(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>(
        wrapper,
        retain: false,
        release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)> blocking(
      void Function(ffi.Pointer<CGPathElement>) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CGPathElement_blockingCallable.nativeFunction.cast(),
        (ffi.Pointer<CGPathElement> arg0) => fn(arg0),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CGPathElement_blockingListenerCallable.nativeFunction
            .cast(),
        (ffi.Pointer<CGPathElement> arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_1ctgxtl(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>(
        wrapper,
        retain: false,
        release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>`.
extension ObjCBlock_ffiVoid_CGPathElement_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)> {
  void call(ffi.Pointer<CGPathElement> arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  ffi.Pointer<CGPathElement> arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              ffi.Pointer<CGPathElement>)>()(ref.pointer, arg0);
}

typedef CGPathApplyBlock = ffi.Pointer<objc.ObjCBlockImpl>;
typedef DartCGPathApplyBlock
    = objc.ObjCBlock<ffi.Void Function(ffi.Pointer<CGPathElement>)>;

final class CGPDFDocument extends ffi.Opaque {}

typedef CGPDFDocumentRef = ffi.Pointer<CGPDFDocument>;

final class CGPDFPage extends ffi.Opaque {}

typedef CGPDFPageRef = ffi.Pointer<CGPDFPage>;

final class CGPDFDictionary extends ffi.Opaque {}

typedef CGPDFDictionaryRef = ffi.Pointer<CGPDFDictionary>;

final class CGPDFArray extends ffi.Opaque {}

typedef CGPDFArrayRef = ffi.Pointer<CGPDFArray>;
typedef CGPDFBoolean = ffi.UnsignedChar;
typedef DartCGPDFBoolean = int;
typedef CGPDFInteger = ffi.Long;
typedef DartCGPDFInteger = int;
typedef CGPDFReal = CGFloat;

final class CGPDFObject extends ffi.Opaque {}

typedef CGPDFObjectRef = ffi.Pointer<CGPDFObject>;

enum CGPDFObjectType {
  kCGPDFObjectTypeNull(1),
  kCGPDFObjectTypeBoolean(2),
  kCGPDFObjectTypeInteger(3),
  kCGPDFObjectTypeReal(4),
  kCGPDFObjectTypeName(5),
  kCGPDFObjectTypeString(6),
  kCGPDFObjectTypeArray(7),
  kCGPDFObjectTypeDictionary(8),
  kCGPDFObjectTypeStream(9);

  final int value;
  const CGPDFObjectType(this.value);

  static CGPDFObjectType fromValue(int value) => switch (value) {
        1 => kCGPDFObjectTypeNull,
        2 => kCGPDFObjectTypeBoolean,
        3 => kCGPDFObjectTypeInteger,
        4 => kCGPDFObjectTypeReal,
        5 => kCGPDFObjectTypeName,
        6 => kCGPDFObjectTypeString,
        7 => kCGPDFObjectTypeArray,
        8 => kCGPDFObjectTypeDictionary,
        9 => kCGPDFObjectTypeStream,
        _ => throw ArgumentError('Unknown value for CGPDFObjectType: $value'),
      };
}

final class CGPDFStream extends ffi.Opaque {}

typedef CGPDFStreamRef = ffi.Pointer<CGPDFStream>;

enum CGPDFDataFormat {
  CGPDFDataFormatRaw(0),
  CGPDFDataFormatJPEGEncoded(1),
  CGPDFDataFormatJPEG2000(2);

  final int value;
  const CGPDFDataFormat(this.value);

  static CGPDFDataFormat fromValue(int value) => switch (value) {
        0 => CGPDFDataFormatRaw,
        1 => CGPDFDataFormatJPEGEncoded,
        2 => CGPDFDataFormatJPEG2000,
        _ => throw ArgumentError('Unknown value for CGPDFDataFormat: $value'),
      };
}

final class CGPDFString extends ffi.Opaque {}

typedef CGPDFStringRef = ffi.Pointer<CGPDFString>;
typedef CFTimeInterval = ffi.Double;
typedef DartCFTimeInterval = double;
typedef CFAbsoluteTime = CFTimeInterval;

final class __CFDate extends ffi.Opaque {}

typedef CFDateRef = ffi.Pointer<__CFDate>;

final class __CFTimeZone extends ffi.Opaque {}

typedef CFTimeZoneRef = ffi.Pointer<__CFTimeZone>;

final class CFGregorianDate extends ffi.Struct {
  @SInt32()
  external int year;

  @SInt8()
  external int month;

  @SInt8()
  external int day;

  @SInt8()
  external int hour;

  @SInt8()
  external int minute;

  @ffi.Double()
  external double second;
}

final class CFGregorianUnits extends ffi.Struct {
  @SInt32()
  external int years;

  @SInt32()
  external int months;

  @SInt32()
  external int days;

  @SInt32()
  external int hours;

  @SInt32()
  external int minutes;

  @ffi.Double()
  external double seconds;
}

enum CFGregorianUnitFlags {
  kCFGregorianUnitsYears(1),
  kCFGregorianUnitsMonths(2),
  kCFGregorianUnitsDays(4),
  kCFGregorianUnitsHours(8),
  kCFGregorianUnitsMinutes(16),
  kCFGregorianUnitsSeconds(32),
  kCFGregorianAllUnits(16777215);

  final int value;
  const CFGregorianUnitFlags(this.value);

  static CFGregorianUnitFlags fromValue(int value) => switch (value) {
        1 => kCFGregorianUnitsYears,
        2 => kCFGregorianUnitsMonths,
        4 => kCFGregorianUnitsDays,
        8 => kCFGregorianUnitsHours,
        16 => kCFGregorianUnitsMinutes,
        32 => kCFGregorianUnitsSeconds,
        16777215 => kCFGregorianAllUnits,
        _ =>
          throw ArgumentError('Unknown value for CFGregorianUnitFlags: $value'),
      };
}

bool _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        CGPDFObjectRef arg1,
        ffi.Pointer<ffi.Void> arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Bool Function(ffi.Size arg0, CGPDFObjectRef arg1,
                        ffi.Pointer<ffi.Void> arg2)>>()
            .asFunction<
                bool Function(int, CGPDFObjectRef, ffi.Pointer<ffi.Void>)>()(
        arg0, arg1, arg2);
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Size,
                    CGPDFObjectRef, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_fnPtrTrampoline,
            false)
        .cast();
bool _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        int arg0,
        CGPDFObjectRef arg1,
        ffi.Pointer<ffi.Void> arg2) =>
    (objc.getBlockClosure(block) as bool Function(
        int, CGPDFObjectRef, ffi.Pointer<ffi.Void>))(arg0, arg1, arg2);
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Size,
                    CGPDFObjectRef, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_closureTrampoline,
            false)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Bool Function(ffi.Size, ffi.Pointer<CGPDFObject>,
                      ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Bool Function(ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Size arg0, CGPDFObjectRef arg1, ffi.Pointer<ffi.Void> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Bool Function(ffi.Size, ffi.Pointer<CGPDFObject>,
                      ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_fnPtrCallable,
                  ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Bool Function(ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)> fromFunction(
          bool Function(int, CGPDFObjectRef, ffi.Pointer<ffi.Void>) fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<
              ffi.Bool Function(
                  ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_closureCallable,
              (int arg0, CGPDFObjectRef arg1, ffi.Pointer<ffi.Void> arg2) =>
                  fn(arg0, arg1, arg2),
              keepIsolateAlive),
          retain: false,
          release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_bool_ffiSize_CGPDFObjectRef_ffiVoid_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)> {
  bool call(int arg0, CGPDFObjectRef arg1, ffi.Pointer<ffi.Void> arg2) =>
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Size arg0,
                      CGPDFObjectRef arg1,
                      ffi.Pointer<ffi.Void> arg2)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  int,
                  CGPDFObjectRef,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0, arg1, arg2);
}

typedef CGPDFArrayApplierBlock = ffi.Pointer<objc.ObjCBlockImpl>;
typedef DartCGPDFArrayApplierBlock = objc.ObjCBlock<
    ffi.Bool Function(
        ffi.Size, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>;
typedef CGPDFDictionaryApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Char> key,
    CGPDFObjectRef value,
    ffi.Pointer<ffi.Void> info);
typedef DartCGPDFDictionaryApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Char> key,
    CGPDFObjectRef value,
    ffi.Pointer<ffi.Void> info);
typedef CGPDFDictionaryApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CGPDFDictionaryApplierFunctionFunction>>;
bool _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Char> arg0,
        CGPDFObjectRef arg1,
        ffi.Pointer<ffi.Void> arg2) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<ffi.Char> arg0,
                    CGPDFObjectRef arg1, ffi.Pointer<ffi.Void> arg2)>>()
        .asFunction<
            bool Function(ffi.Pointer<ffi.Char>, CGPDFObjectRef,
                ffi.Pointer<ffi.Void>)>()(arg0, arg1, arg2);
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Char>,
                    CGPDFObjectRef,
                    ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_fnPtrTrampoline,
            false)
        .cast();
bool _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Char> arg0,
        CGPDFObjectRef arg1,
        ffi.Pointer<ffi.Void> arg2) =>
    (objc.getBlockClosure(block) as bool Function(ffi.Pointer<ffi.Char>,
        CGPDFObjectRef, ffi.Pointer<ffi.Void>))(arg0, arg1, arg2);
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Char>,
                    CGPDFObjectRef,
                    ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_closureTrampoline,
            false)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>,
              ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Bool Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char> arg0, CGPDFObjectRef arg1, ffi.Pointer<ffi.Void> arg2)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Bool Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(
                  _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_fnPtrCallable,
                  ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc
      .ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>
      fromFunction(bool Function(ffi.Pointer<ffi.Char>, CGPDFObjectRef, ffi.Pointer<ffi.Void>) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>(
              objc.newClosureBlock(
                  _ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_closureCallable,
                  (ffi.Pointer<ffi.Char> arg0, CGPDFObjectRef arg1,
                          ffi.Pointer<ffi.Void> arg2) =>
                      fn(arg0, arg1, arg2),
                  keepIsolateAlive),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>, ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_bool_ffiChar_CGPDFObjectRef_ffiVoid_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>,
            ffi.Pointer<ffi.Void>)> {
  bool call(ffi.Pointer<ffi.Char> arg0, CGPDFObjectRef arg1,
          ffi.Pointer<ffi.Void> arg2) =>
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Char> arg0,
                      CGPDFObjectRef arg1,
                      ffi.Pointer<ffi.Void> arg2)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Char>,
                  CGPDFObjectRef,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0, arg1, arg2);
}

typedef CGPDFDictionaryApplierBlock = ffi.Pointer<objc.ObjCBlockImpl>;
typedef DartCGPDFDictionaryApplierBlock = objc.ObjCBlock<
    ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CGPDFObject>,
        ffi.Pointer<ffi.Void>)>;

enum CGPDFBox {
  kCGPDFMediaBox(0),
  kCGPDFCropBox(1),
  kCGPDFBleedBox(2),
  kCGPDFTrimBox(3),
  kCGPDFArtBox(4);

  final int value;
  const CGPDFBox(this.value);

  static CGPDFBox fromValue(int value) => switch (value) {
        0 => kCGPDFMediaBox,
        1 => kCGPDFCropBox,
        2 => kCGPDFBleedBox,
        3 => kCGPDFTrimBox,
        4 => kCGPDFArtBox,
        _ => throw ArgumentError('Unknown value for CGPDFBox: $value'),
      };
}

enum CGPDFAccessPermissions {
  kCGPDFAllowsLowQualityPrinting(1),
  kCGPDFAllowsHighQualityPrinting(2),
  kCGPDFAllowsDocumentChanges(4),
  kCGPDFAllowsDocumentAssembly(8),
  kCGPDFAllowsContentCopying(16),
  kCGPDFAllowsContentAccessibility(32),
  kCGPDFAllowsCommenting(64),
  kCGPDFAllowsFormFieldEntry(128);

  final int value;
  const CGPDFAccessPermissions(this.value);

  static CGPDFAccessPermissions fromValue(int value) => switch (value) {
        1 => kCGPDFAllowsLowQualityPrinting,
        2 => kCGPDFAllowsHighQualityPrinting,
        4 => kCGPDFAllowsDocumentChanges,
        8 => kCGPDFAllowsDocumentAssembly,
        16 => kCGPDFAllowsContentCopying,
        32 => kCGPDFAllowsContentAccessibility,
        64 => kCGPDFAllowsCommenting,
        128 => kCGPDFAllowsFormFieldEntry,
        _ => throw ArgumentError(
            'Unknown value for CGPDFAccessPermissions: $value'),
      };
}

final class CGShading extends ffi.Opaque {}

typedef CGShadingRef = ffi.Pointer<CGShading>;

final class CGFunction extends ffi.Opaque {}

typedef CGFunctionRef = ffi.Pointer<CGFunction>;
typedef CGFunctionEvaluateCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<CGFloat> in$,
    ffi.Pointer<CGFloat> out);
typedef DartCGFunctionEvaluateCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info,
    ffi.Pointer<CGFloat> in$,
    ffi.Pointer<CGFloat> out);
typedef CGFunctionEvaluateCallback
    = ffi.Pointer<ffi.NativeFunction<CGFunctionEvaluateCallbackFunction>>;
typedef CGFunctionReleaseInfoCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCGFunctionReleaseInfoCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CGFunctionReleaseInfoCallback
    = ffi.Pointer<ffi.NativeFunction<CGFunctionReleaseInfoCallbackFunction>>;

final class CGFunctionCallbacks extends ffi.Struct {
  @ffi.UnsignedInt()
  external int version;

  external CGFunctionEvaluateCallback evaluate;

  external CGFunctionReleaseInfoCallback releaseInfo;
}

enum CGToneMapping {
  kCGToneMappingDefault(0),
  kCGToneMappingImageSpecificLumaScaling(1),
  kCGToneMappingReferenceWhiteBased(2),
  kCGToneMappingITURecommended(3),
  kCGToneMappingEXRGamma(4),
  kCGToneMappingNone(5);

  final int value;
  const CGToneMapping(this.value);

  static CGToneMapping fromValue(int value) => switch (value) {
        0 => kCGToneMappingDefault,
        1 => kCGToneMappingImageSpecificLumaScaling,
        2 => kCGToneMappingReferenceWhiteBased,
        3 => kCGToneMappingITURecommended,
        4 => kCGToneMappingEXRGamma,
        5 => kCGToneMappingNone,
        _ => throw ArgumentError('Unknown value for CGToneMapping: $value'),
      };
}

enum CGPathDrawingMode {
  kCGPathFill(0),
  kCGPathEOFill(1),
  kCGPathStroke(2),
  kCGPathFillStroke(3),
  kCGPathEOFillStroke(4);

  final int value;
  const CGPathDrawingMode(this.value);

  static CGPathDrawingMode fromValue(int value) => switch (value) {
        0 => kCGPathFill,
        1 => kCGPathEOFill,
        2 => kCGPathStroke,
        3 => kCGPathFillStroke,
        4 => kCGPathEOFillStroke,
        _ => throw ArgumentError('Unknown value for CGPathDrawingMode: $value'),
      };
}

enum CGTextDrawingMode {
  kCGTextFill(0),
  kCGTextStroke(1),
  kCGTextFillStroke(2),
  kCGTextInvisible(3),
  kCGTextFillClip(4),
  kCGTextStrokeClip(5),
  kCGTextFillStrokeClip(6),
  kCGTextClip(7);

  final int value;
  const CGTextDrawingMode(this.value);

  static CGTextDrawingMode fromValue(int value) => switch (value) {
        0 => kCGTextFill,
        1 => kCGTextStroke,
        2 => kCGTextFillStroke,
        3 => kCGTextInvisible,
        4 => kCGTextFillClip,
        5 => kCGTextStrokeClip,
        6 => kCGTextFillStrokeClip,
        7 => kCGTextClip,
        _ => throw ArgumentError('Unknown value for CGTextDrawingMode: $value'),
      };
}

enum CGTextEncoding {
  kCGEncodingFontSpecific(0),
  kCGEncodingMacRoman(1);

  final int value;
  const CGTextEncoding(this.value);

  static CGTextEncoding fromValue(int value) => switch (value) {
        0 => kCGEncodingFontSpecific,
        1 => kCGEncodingMacRoman,
        _ => throw ArgumentError('Unknown value for CGTextEncoding: $value'),
      };
}

enum CGInterpolationQuality {
  kCGInterpolationDefault(0),
  kCGInterpolationNone(1),
  kCGInterpolationLow(2),
  kCGInterpolationMedium(4),
  kCGInterpolationHigh(3);

  final int value;
  const CGInterpolationQuality(this.value);

  static CGInterpolationQuality fromValue(int value) => switch (value) {
        0 => kCGInterpolationDefault,
        1 => kCGInterpolationNone,
        2 => kCGInterpolationLow,
        4 => kCGInterpolationMedium,
        3 => kCGInterpolationHigh,
        _ => throw ArgumentError(
            'Unknown value for CGInterpolationQuality: $value'),
      };
}

enum CGBlendMode {
  kCGBlendModeNormal(0),
  kCGBlendModeMultiply(1),
  kCGBlendModeScreen(2),
  kCGBlendModeOverlay(3),
  kCGBlendModeDarken(4),
  kCGBlendModeLighten(5),
  kCGBlendModeColorDodge(6),
  kCGBlendModeColorBurn(7),
  kCGBlendModeSoftLight(8),
  kCGBlendModeHardLight(9),
  kCGBlendModeDifference(10),
  kCGBlendModeExclusion(11),
  kCGBlendModeHue(12),
  kCGBlendModeSaturation(13),
  kCGBlendModeColor(14),
  kCGBlendModeLuminosity(15),
  kCGBlendModeClear(16),
  kCGBlendModeCopy(17),
  kCGBlendModeSourceIn(18),
  kCGBlendModeSourceOut(19),
  kCGBlendModeSourceAtop(20),
  kCGBlendModeDestinationOver(21),
  kCGBlendModeDestinationIn(22),
  kCGBlendModeDestinationOut(23),
  kCGBlendModeDestinationAtop(24),
  kCGBlendModeXOR(25),
  kCGBlendModePlusDarker(26),
  kCGBlendModePlusLighter(27);

  final int value;
  const CGBlendMode(this.value);

  static CGBlendMode fromValue(int value) => switch (value) {
        0 => kCGBlendModeNormal,
        1 => kCGBlendModeMultiply,
        2 => kCGBlendModeScreen,
        3 => kCGBlendModeOverlay,
        4 => kCGBlendModeDarken,
        5 => kCGBlendModeLighten,
        6 => kCGBlendModeColorDodge,
        7 => kCGBlendModeColorBurn,
        8 => kCGBlendModeSoftLight,
        9 => kCGBlendModeHardLight,
        10 => kCGBlendModeDifference,
        11 => kCGBlendModeExclusion,
        12 => kCGBlendModeHue,
        13 => kCGBlendModeSaturation,
        14 => kCGBlendModeColor,
        15 => kCGBlendModeLuminosity,
        16 => kCGBlendModeClear,
        17 => kCGBlendModeCopy,
        18 => kCGBlendModeSourceIn,
        19 => kCGBlendModeSourceOut,
        20 => kCGBlendModeSourceAtop,
        21 => kCGBlendModeDestinationOver,
        22 => kCGBlendModeDestinationIn,
        23 => kCGBlendModeDestinationOut,
        24 => kCGBlendModeDestinationAtop,
        25 => kCGBlendModeXOR,
        26 => kCGBlendModePlusDarker,
        27 => kCGBlendModePlusLighter,
        _ => throw ArgumentError('Unknown value for CGBlendMode: $value'),
      };
}

typedef CGBitmapContextReleaseDataCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> releaseInfo, ffi.Pointer<ffi.Void> data);
typedef DartCGBitmapContextReleaseDataCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> releaseInfo, ffi.Pointer<ffi.Void> data);
typedef CGBitmapContextReleaseDataCallback = ffi
    .Pointer<ffi.NativeFunction<CGBitmapContextReleaseDataCallbackFunction>>;

final class CGColorConversionInfo extends ffi.Opaque {}

typedef CGColorConversionInfoRef = ffi.Pointer<CGColorConversionInfo>;

enum CGColorConversionInfoTransformType {
  kCGColorConversionTransformFromSpace(0),
  kCGColorConversionTransformToSpace(1),
  kCGColorConversionTransformApplySpace(2);

  final int value;
  const CGColorConversionInfoTransformType(this.value);

  static CGColorConversionInfoTransformType fromValue(int value) =>
      switch (value) {
        0 => kCGColorConversionTransformFromSpace,
        1 => kCGColorConversionTransformToSpace,
        2 => kCGColorConversionTransformApplySpace,
        _ => throw ArgumentError(
            'Unknown value for CGColorConversionInfoTransformType: $value'),
      };
}

final class CGColorBufferFormat extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @ffi.Uint32()
  external int bitmapInfoAsInt;

  CGBitmapInfo get bitmapInfo => CGBitmapInfo.fromValue(bitmapInfoAsInt);

  @ffi.Size()
  external int bitsPerComponent;

  @ffi.Size()
  external int bitsPerPixel;

  @ffi.Size()
  external int bytesPerRow;
}

typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef ct_rune_t = __darwin_ct_rune_t;
typedef rune_t = __darwin_rune_t;
typedef wint_t = __darwin_wint_t;

final class _RuneEntry extends ffi.Struct {
  @__darwin_rune_t()
  external int __min;

  @__darwin_rune_t()
  external int __max;

  @__darwin_rune_t()
  external int __map;

  external ffi.Pointer<__uint32_t> __types;
}

final class _RuneRange extends ffi.Struct {
  @ffi.Int()
  external int __nranges;

  external ffi.Pointer<_RuneEntry> __ranges;
}

final class _RuneCharClass extends ffi.Struct {
  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> __name;

  @__uint32_t()
  external int __mask;
}

final class _RuneLocale extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __magic;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __encoding;

  external ffi.Pointer<
      ffi.NativeFunction<
          __darwin_rune_t Function(ffi.Pointer<ffi.Char>, __darwin_size_t,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sgetrune;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(__darwin_rune_t, ffi.Pointer<ffi.Char>,
              __darwin_size_t, ffi.Pointer<ffi.Pointer<ffi.Char>>)>> __sputrune;

  @__darwin_rune_t()
  external int __invalid_rune;

  @ffi.Array.multi([256])
  external ffi.Array<__uint32_t> __runetype;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __maplower;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __mapupper;

  external _RuneRange __runetype_ext;

  external _RuneRange __maplower_ext;

  external _RuneRange __mapupper_ext;

  external ffi.Pointer<ffi.Void> __variable;

  @ffi.Int()
  external int __variable_len;

  @ffi.Int()
  external int __ncharclasses;

  external ffi.Pointer<_RuneCharClass> __charclasses;
}

final class lconv extends ffi.Struct {
  external ffi.Pointer<ffi.Char> decimal_point;

  external ffi.Pointer<ffi.Char> thousands_sep;

  external ffi.Pointer<ffi.Char> grouping;

  external ffi.Pointer<ffi.Char> int_curr_symbol;

  external ffi.Pointer<ffi.Char> currency_symbol;

  external ffi.Pointer<ffi.Char> mon_decimal_point;

  external ffi.Pointer<ffi.Char> mon_thousands_sep;

  external ffi.Pointer<ffi.Char> mon_grouping;

  external ffi.Pointer<ffi.Char> positive_sign;

  external ffi.Pointer<ffi.Char> negative_sign;

  @ffi.Char()
  external int int_frac_digits;

  @ffi.Char()
  external int frac_digits;

  @ffi.Char()
  external int p_cs_precedes;

  @ffi.Char()
  external int p_sep_by_space;

  @ffi.Char()
  external int n_cs_precedes;

  @ffi.Char()
  external int n_sep_by_space;

  @ffi.Char()
  external int p_sign_posn;

  @ffi.Char()
  external int n_sign_posn;

  @ffi.Char()
  external int int_p_cs_precedes;

  @ffi.Char()
  external int int_n_cs_precedes;

  @ffi.Char()
  external int int_p_sep_by_space;

  @ffi.Char()
  external int int_n_sep_by_space;

  @ffi.Char()
  external int int_p_sign_posn;

  @ffi.Char()
  external int int_n_sign_posn;
}

typedef float_t = ffi.Float;
typedef Dartfloat_t = double;
typedef double_t = ffi.Double;
typedef Dartdouble_t = double;

final class __float2 extends ffi.Struct {
  @ffi.Float()
  external double __sinval;

  @ffi.Float()
  external double __cosval;
}

final class __double2 extends ffi.Struct {
  @ffi.Double()
  external double __sinval;

  @ffi.Double()
  external double __cosval;
}

final class exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

typedef sig_atomic_t = ffi.Int;
typedef Dartsig_atomic_t = int;

final class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

final class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

final class __darwin_arm_exception_state64_v2 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint64_t()
  external int __esr;
}

final class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

final class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

final class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

final class __darwin_arm_neon_state64 extends ffi.Opaque {}

final class __darwin_arm_neon_state extends ffi.Opaque {}

final class __arm_pagein_state extends ffi.Struct {
  @ffi.Int()
  external int __pagein_error;
}

final class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

final class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

final class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

final class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

final class __darwin_mcontext64 extends ffi.Opaque {}

typedef mcontext_t = ffi.Pointer<__darwin_mcontext64>;

final class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @ffi.Int()
  external int ss_flags;
}

typedef stack_t = __darwin_sigaltstack;

final class __darwin_ucontext extends ffi.Struct {
  @ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef ucontext_t = __darwin_ucontext;
typedef sigset_t = __darwin_sigset_t;

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class sigevent extends ffi.Struct {
  @ffi.Int()
  external int sigev_notify;

  @ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef siginfo_t = __siginfo;

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u$1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

final class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u$1;

  @sigset_t()
  external int sa_mask;

  @ffi.Int()
  external int sa_flags;
}

typedef sig_tFunction = ffi.Void Function(ffi.Int);
typedef Dartsig_tFunction = void Function(int);
typedef sig_t = ffi.Pointer<ffi.NativeFunction<sig_tFunction>>;

final class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      sv_handler;

  @ffi.Int()
  external int sv_mask;

  @ffi.Int()
  external int sv_flags;
}

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef fpos_t = __darwin_off_t;

final class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _base;

  @ffi.Int()
  external int _size;
}

final class __sFILEX extends ffi.Opaque {}

final class __sFILE extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> _p;

  @ffi.Int()
  external int _r;

  @ffi.Int()
  external int _w;

  @ffi.Short()
  external int _flags;

  @ffi.Short()
  external int _file;

  external __sbuf _bf;

  @ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef FILE = __sFILE;

enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError('Unknown value for idtype_t: $value'),
      };
}

final class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef rlim_t = __uint64_t;

final class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Long()
  external int ru_maxrss;

  @ffi.Long()
  external int ru_ixrss;

  @ffi.Long()
  external int ru_idrss;

  @ffi.Long()
  external int ru_isrss;

  @ffi.Long()
  external int ru_minflt;

  @ffi.Long()
  external int ru_majflt;

  @ffi.Long()
  external int ru_nswap;

  @ffi.Long()
  external int ru_inblock;

  @ffi.Long()
  external int ru_oublock;

  @ffi.Long()
  external int ru_msgsnd;

  @ffi.Long()
  external int ru_msgrcv;

  @ffi.Long()
  external int ru_nsignals;

  @ffi.Long()
  external int ru_nvcsw;

  @ffi.Long()
  external int ru_nivcsw;
}

typedef rusage_info_t = ffi.Pointer<ffi.Void>;

final class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

final class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

final class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

final class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

final class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

final class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

final class rusage_info_v6 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;

  @ffi.Uint64()
  external int ri_user_ptime;

  @ffi.Uint64()
  external int ri_system_ptime;

  @ffi.Uint64()
  external int ri_pinstructions;

  @ffi.Uint64()
  external int ri_pcycles;

  @ffi.Uint64()
  external int ri_energy_nj;

  @ffi.Uint64()
  external int ri_penergy_nj;

  @ffi.Uint64()
  external int ri_secure_time_in_system;

  @ffi.Uint64()
  external int ri_secure_ptime_in_system;

  @ffi.Uint64()
  external int ri_neural_footprint;

  @ffi.Uint64()
  external int ri_lifetime_max_neural_footprint;

  @ffi.Uint64()
  external int ri_interval_max_neural_footprint;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Uint64> ri_reserved;
}

typedef rusage_info_current = rusage_info_v6;

final class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

final class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

final class wait extends ffi.Opaque {}

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef malloc_type_id_t = ffi.UnsignedLongLong;
typedef Dartmalloc_type_id_t = int;

final class _malloc_zone_t extends ffi.Opaque {}

typedef malloc_zone_t = _malloc_zone_t;
void _ObjCBlock_ffiVoid_fnPtrTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function()>>()
        .asFunction<void Function()>()();
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_fnPtrCallable = ffi.Pointer
        .fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
            _ObjCBlock_ffiVoid_fnPtrTrampoline)
    .cast();
void _ObjCBlock_ffiVoid_closureTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) =>
    (objc.getBlockClosure(block) as void Function())();
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_closureCallable = ffi.Pointer
        .fromFunction<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>(
            _ObjCBlock_ffiVoid_closureTrampoline)
    .cast();
void _ObjCBlock_ffiVoid_listenerTrampoline(
  ffi.Pointer<objc.ObjCBlockImpl> block,
) {
  (objc.getBlockClosure(block) as void Function())();
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>
    _ObjCBlock_ffiVoid_listenerCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>)>.listener(
        _ObjCBlock_ffiVoid_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> waiter) {
  try {
    (objc.getBlockClosure(block) as void Function())();
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>
    _ObjCBlock_ffiVoid_blockingCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>)>.isolateLocal(
        _ObjCBlock_ffiVoid_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>
    _ObjCBlock_ffiVoid_blockingListenerCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>)>.listener(
        _ObjCBlock_ffiVoid_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function()>`.
abstract final class ObjCBlock_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function()> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function()>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function()> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newPointerBlock(_ObjCBlock_ffiVoid_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function()> fromFunction(void Function() fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<ffi.Void Function()>(
          objc.newClosureBlock(
              _ObjCBlock_ffiVoid_closureCallable, () => fn(), keepIsolateAlive),
          retain: false,
          release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function()> listener(void Function() fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_listenerCallable.nativeFunction.cast(),
        () => fn(),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_1pl9qdv(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function()>(wrapper,
        retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function()> blocking(void Function() fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_blockingCallable.nativeFunction.cast(),
        () => fn(),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_blockingListenerCallable.nativeFunction.cast(),
        () => fn(),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_1pl9qdv(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function()>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function()>`.
extension ObjCBlock_ffiVoid_CallExtension
    on objc.ObjCBlock<ffi.Void Function()> {
  void call() => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>)>()(
        ref.pointer,
      );
}

int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<ffi.Void> arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Int Function(
                    ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1)>>()
        .asFunction<
            int Function(
                ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>()(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrTrampoline, 0)
        .cast();
int _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> arg0,
        ffi.Pointer<ffi.Void> arg1) =>
    (objc.getBlockClosure(block) as int Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>))(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Int Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureTrampoline, 0)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_ffiInt_ffiVoid_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)> fromFunctionPointer(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void> arg0,
                          ffi.Pointer<ffi.Void> arg1)>>
              ptr) =>
      objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
          objc.newPointerBlock(_ObjCBlock_ffiInt_ffiVoid_ffiVoid_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<
      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)> fromFunction(
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>) fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>(
          objc.newClosureBlock(
              _ObjCBlock_ffiInt_ffiVoid_ffiVoid_closureCallable,
              (ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1) =>
                  fn(arg0, arg1),
              keepIsolateAlive),
          retain: false,
          release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_ffiInt_ffiVoid_ffiVoid_CallExtension on objc
    .ObjCBlock<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)> {
  int call(ffi.Pointer<ffi.Void> arg0, ffi.Pointer<ffi.Void> arg1) =>
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0,
                      ffi.Pointer<ffi.Void> arg1)>>()
          .asFunction<
              int Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0, arg1);
}

final class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

enum clockid_t {
  _CLOCK_REALTIME(0),
  _CLOCK_MONOTONIC(6),
  _CLOCK_MONOTONIC_RAW(4),
  _CLOCK_MONOTONIC_RAW_APPROX(5),
  _CLOCK_UPTIME_RAW(8),
  _CLOCK_UPTIME_RAW_APPROX(9),
  _CLOCK_PROCESS_CPUTIME_ID(12),
  _CLOCK_THREAD_CPUTIME_ID(16);

  final int value;
  const clockid_t(this.value);

  static clockid_t fromValue(int value) => switch (value) {
        0 => _CLOCK_REALTIME,
        6 => _CLOCK_MONOTONIC,
        4 => _CLOCK_MONOTONIC_RAW,
        5 => _CLOCK_MONOTONIC_RAW_APPROX,
        8 => _CLOCK_UPTIME_RAW,
        9 => _CLOCK_UPTIME_RAW_APPROX,
        12 => _CLOCK_PROCESS_CPUTIME_ID,
        16 => _CLOCK_THREAD_CPUTIME_ID,
        _ => throw ArgumentError('Unknown value for clockid_t: $value'),
      };
}

final class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef CFBagRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFBagRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagRetainCallBackFunction>>;
typedef CFBagReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFBagReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFBagReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagReleaseCallBackFunction>>;
typedef CFBagCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFBagCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagCopyDescriptionCallBackFunction>>;
typedef CFBagEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFBagEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFBagEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagEqualCallBackFunction>>;
typedef CFBagHashCallBackFunction = CFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFBagHashCallBackFunction = DartCFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef CFBagHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFBagHashCallBackFunction>>;

final class CFBagCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFBagRetainCallBack retain;

  external CFBagReleaseCallBack release;

  external CFBagCopyDescriptionCallBack copyDescription;

  external CFBagEqualCallBack equal;

  external CFBagHashCallBack hash;
}

typedef CFBagApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFBagApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef CFBagApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFBagApplierFunctionFunction>>;

final class __CFBag extends ffi.Opaque {}

typedef CFBagRef = ffi.Pointer<__CFBag>;
typedef CFMutableBagRef = ffi.Pointer<__CFBag>;

final class CFBinaryHeapCompareContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

final class CFBinaryHeapCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef allocator, ffi.Pointer<ffi.Void> ptr)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef allocator, ffi.Pointer<ffi.Void> ptr)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> ptr)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          CFIndex Function(
              ffi.Pointer<ffi.Void> ptr1,
              ffi.Pointer<ffi.Void> ptr2,
              ffi.Pointer<ffi.Void> context)>> compare;
}

typedef CFBinaryHeapApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> val, ffi.Pointer<ffi.Void> context);
typedef DartCFBinaryHeapApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> val, ffi.Pointer<ffi.Void> context);
typedef CFBinaryHeapApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFBinaryHeapApplierFunctionFunction>>;

final class __CFBinaryHeap extends ffi.Opaque {}

typedef CFBinaryHeapRef = ffi.Pointer<__CFBinaryHeap>;
typedef CFBit = UInt32;

final class __CFBitVector extends ffi.Opaque {}

typedef CFBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFMutableBitVectorRef = ffi.Pointer<__CFBitVector>;

@ffi.Packed(1)
final class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
final class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

enum __CFByteOrder {
  CFByteOrderUnknown(0),
  CFByteOrderLittleEndian(1),
  CFByteOrderBigEndian(2);

  final int value;
  const __CFByteOrder(this.value);

  static __CFByteOrder fromValue(int value) => switch (value) {
        0 => CFByteOrderUnknown,
        1 => CFByteOrderLittleEndian,
        2 => CFByteOrderBigEndian,
        _ => throw ArgumentError('Unknown value for __CFByteOrder: $value'),
      };
}

typedef CFByteOrder = CFIndex;

final class CFSwappedFloat32 extends ffi.Struct {
  @ffi.Uint32()
  external int v;
}

final class CFSwappedFloat64 extends ffi.Struct {
  @ffi.Uint64()
  external int v;
}

enum CFTimeZoneNameStyle {
  kCFTimeZoneNameStyleStandard(0),
  kCFTimeZoneNameStyleShortStandard(1),
  kCFTimeZoneNameStyleDaylightSaving(2),
  kCFTimeZoneNameStyleShortDaylightSaving(3),
  kCFTimeZoneNameStyleGeneric(4),
  kCFTimeZoneNameStyleShortGeneric(5);

  final int value;
  const CFTimeZoneNameStyle(this.value);

  static CFTimeZoneNameStyle fromValue(int value) => switch (value) {
        0 => kCFTimeZoneNameStyleStandard,
        1 => kCFTimeZoneNameStyleShortStandard,
        2 => kCFTimeZoneNameStyleDaylightSaving,
        3 => kCFTimeZoneNameStyleShortDaylightSaving,
        4 => kCFTimeZoneNameStyleGeneric,
        5 => kCFTimeZoneNameStyleShortGeneric,
        _ =>
          throw ArgumentError('Unknown value for CFTimeZoneNameStyle: $value'),
      };
}

final class __CFCalendar extends ffi.Opaque {}

typedef CFCalendarRef = ffi.Pointer<__CFCalendar>;

enum CFCalendarUnit {
  kCFCalendarUnitEra(2),
  kCFCalendarUnitYear(4),
  kCFCalendarUnitMonth(8),
  kCFCalendarUnitDay(16),
  kCFCalendarUnitHour(32),
  kCFCalendarUnitMinute(64),
  kCFCalendarUnitSecond(128),
  kCFCalendarUnitWeek(256),
  kCFCalendarUnitWeekday(512),
  kCFCalendarUnitWeekdayOrdinal(1024),
  kCFCalendarUnitQuarter(2048),
  kCFCalendarUnitWeekOfMonth(4096),
  kCFCalendarUnitWeekOfYear(8192),
  kCFCalendarUnitYearForWeekOfYear(16384),
  kCFCalendarUnitDayOfYear(65536);

  final int value;
  const CFCalendarUnit(this.value);

  static CFCalendarUnit fromValue(int value) => switch (value) {
        2 => kCFCalendarUnitEra,
        4 => kCFCalendarUnitYear,
        8 => kCFCalendarUnitMonth,
        16 => kCFCalendarUnitDay,
        32 => kCFCalendarUnitHour,
        64 => kCFCalendarUnitMinute,
        128 => kCFCalendarUnitSecond,
        256 => kCFCalendarUnitWeek,
        512 => kCFCalendarUnitWeekday,
        1024 => kCFCalendarUnitWeekdayOrdinal,
        2048 => kCFCalendarUnitQuarter,
        4096 => kCFCalendarUnitWeekOfMonth,
        8192 => kCFCalendarUnitWeekOfYear,
        16384 => kCFCalendarUnitYearForWeekOfYear,
        65536 => kCFCalendarUnitDayOfYear,
        _ => throw ArgumentError('Unknown value for CFCalendarUnit: $value'),
      };
}

typedef CFDateFormatterKey = CFStringRef;

final class __CFDateFormatter extends ffi.Opaque {}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;

enum CFDateFormatterStyle {
  kCFDateFormatterNoStyle(0),
  kCFDateFormatterShortStyle(1),
  kCFDateFormatterMediumStyle(2),
  kCFDateFormatterLongStyle(3),
  kCFDateFormatterFullStyle(4);

  final int value;
  const CFDateFormatterStyle(this.value);

  static CFDateFormatterStyle fromValue(int value) => switch (value) {
        0 => kCFDateFormatterNoStyle,
        1 => kCFDateFormatterShortStyle,
        2 => kCFDateFormatterMediumStyle,
        3 => kCFDateFormatterLongStyle,
        4 => kCFDateFormatterFullStyle,
        _ =>
          throw ArgumentError('Unknown value for CFDateFormatterStyle: $value'),
      };
}

enum CFISO8601DateFormatOptions {
  kCFISO8601DateFormatWithYear(1),
  kCFISO8601DateFormatWithMonth(2),
  kCFISO8601DateFormatWithWeekOfYear(4),
  kCFISO8601DateFormatWithDay(16),
  kCFISO8601DateFormatWithTime(32),
  kCFISO8601DateFormatWithTimeZone(64),
  kCFISO8601DateFormatWithSpaceBetweenDateAndTime(128),
  kCFISO8601DateFormatWithDashSeparatorInDate(256),
  kCFISO8601DateFormatWithColonSeparatorInTime(512),
  kCFISO8601DateFormatWithColonSeparatorInTimeZone(1024),
  kCFISO8601DateFormatWithFractionalSeconds(2048),
  kCFISO8601DateFormatWithFullDate(275),
  kCFISO8601DateFormatWithFullTime(1632),
  kCFISO8601DateFormatWithInternetDateTime(1907);

  final int value;
  const CFISO8601DateFormatOptions(this.value);

  static CFISO8601DateFormatOptions fromValue(int value) => switch (value) {
        1 => kCFISO8601DateFormatWithYear,
        2 => kCFISO8601DateFormatWithMonth,
        4 => kCFISO8601DateFormatWithWeekOfYear,
        16 => kCFISO8601DateFormatWithDay,
        32 => kCFISO8601DateFormatWithTime,
        64 => kCFISO8601DateFormatWithTimeZone,
        128 => kCFISO8601DateFormatWithSpaceBetweenDateAndTime,
        256 => kCFISO8601DateFormatWithDashSeparatorInDate,
        512 => kCFISO8601DateFormatWithColonSeparatorInTime,
        1024 => kCFISO8601DateFormatWithColonSeparatorInTimeZone,
        2048 => kCFISO8601DateFormatWithFractionalSeconds,
        275 => kCFISO8601DateFormatWithFullDate,
        1632 => kCFISO8601DateFormatWithFullTime,
        1907 => kCFISO8601DateFormatWithInternetDateTime,
        _ => throw ArgumentError(
            'Unknown value for CFISO8601DateFormatOptions: $value'),
      };
}

final class __CFBoolean extends ffi.Opaque {}

typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

enum CFNumberType {
  kCFNumberSInt8Type(1),
  kCFNumberSInt16Type(2),
  kCFNumberSInt32Type(3),
  kCFNumberSInt64Type(4),
  kCFNumberFloat32Type(5),
  kCFNumberFloat64Type(6),
  kCFNumberCharType(7),
  kCFNumberShortType(8),
  kCFNumberIntType(9),
  kCFNumberLongType(10),
  kCFNumberLongLongType(11),
  kCFNumberFloatType(12),
  kCFNumberDoubleType(13),
  kCFNumberCFIndexType(14),
  kCFNumberNSIntegerType(15),
  kCFNumberCGFloatType(16);

  static const kCFNumberMaxType = kCFNumberCGFloatType;

  final int value;
  const CFNumberType(this.value);

  static CFNumberType fromValue(int value) => switch (value) {
        1 => kCFNumberSInt8Type,
        2 => kCFNumberSInt16Type,
        3 => kCFNumberSInt32Type,
        4 => kCFNumberSInt64Type,
        5 => kCFNumberFloat32Type,
        6 => kCFNumberFloat64Type,
        7 => kCFNumberCharType,
        8 => kCFNumberShortType,
        9 => kCFNumberIntType,
        10 => kCFNumberLongType,
        11 => kCFNumberLongLongType,
        12 => kCFNumberFloatType,
        13 => kCFNumberDoubleType,
        14 => kCFNumberCFIndexType,
        15 => kCFNumberNSIntegerType,
        16 => kCFNumberCGFloatType,
        _ => throw ArgumentError('Unknown value for CFNumberType: $value'),
      };

  @override
  String toString() {
    if (this == kCFNumberCGFloatType)
      return "CFNumberType.kCFNumberCGFloatType, CFNumberType.kCFNumberMaxType";
    return super.toString();
  }
}

final class __CFNumber extends ffi.Opaque {}

typedef CFNumberRef = ffi.Pointer<__CFNumber>;
typedef CFNumberFormatterKey = CFStringRef;

final class __CFNumberFormatter extends ffi.Opaque {}

typedef CFNumberFormatterRef = ffi.Pointer<__CFNumberFormatter>;

enum CFNumberFormatterStyle {
  kCFNumberFormatterNoStyle(0),
  kCFNumberFormatterDecimalStyle(1),
  kCFNumberFormatterCurrencyStyle(2),
  kCFNumberFormatterPercentStyle(3),
  kCFNumberFormatterScientificStyle(4),
  kCFNumberFormatterSpellOutStyle(5),
  kCFNumberFormatterOrdinalStyle(6),
  kCFNumberFormatterCurrencyISOCodeStyle(8),
  kCFNumberFormatterCurrencyPluralStyle(9),
  kCFNumberFormatterCurrencyAccountingStyle(10);

  final int value;
  const CFNumberFormatterStyle(this.value);

  static CFNumberFormatterStyle fromValue(int value) => switch (value) {
        0 => kCFNumberFormatterNoStyle,
        1 => kCFNumberFormatterDecimalStyle,
        2 => kCFNumberFormatterCurrencyStyle,
        3 => kCFNumberFormatterPercentStyle,
        4 => kCFNumberFormatterScientificStyle,
        5 => kCFNumberFormatterSpellOutStyle,
        6 => kCFNumberFormatterOrdinalStyle,
        8 => kCFNumberFormatterCurrencyISOCodeStyle,
        9 => kCFNumberFormatterCurrencyPluralStyle,
        10 => kCFNumberFormatterCurrencyAccountingStyle,
        _ => throw ArgumentError(
            'Unknown value for CFNumberFormatterStyle: $value'),
      };
}

enum CFNumberFormatterOptionFlags {
  kCFNumberFormatterParseIntegersOnly(1);

  final int value;
  const CFNumberFormatterOptionFlags(this.value);

  static CFNumberFormatterOptionFlags fromValue(int value) => switch (value) {
        1 => kCFNumberFormatterParseIntegersOnly,
        _ => throw ArgumentError(
            'Unknown value for CFNumberFormatterOptionFlags: $value'),
      };
}

enum CFNumberFormatterRoundingMode {
  kCFNumberFormatterRoundCeiling(0),
  kCFNumberFormatterRoundFloor(1),
  kCFNumberFormatterRoundDown(2),
  kCFNumberFormatterRoundUp(3),
  kCFNumberFormatterRoundHalfEven(4),
  kCFNumberFormatterRoundHalfDown(5),
  kCFNumberFormatterRoundHalfUp(6);

  final int value;
  const CFNumberFormatterRoundingMode(this.value);

  static CFNumberFormatterRoundingMode fromValue(int value) => switch (value) {
        0 => kCFNumberFormatterRoundCeiling,
        1 => kCFNumberFormatterRoundFloor,
        2 => kCFNumberFormatterRoundDown,
        3 => kCFNumberFormatterRoundUp,
        4 => kCFNumberFormatterRoundHalfEven,
        5 => kCFNumberFormatterRoundHalfDown,
        6 => kCFNumberFormatterRoundHalfUp,
        _ => throw ArgumentError(
            'Unknown value for CFNumberFormatterRoundingMode: $value'),
      };
}

enum CFNumberFormatterPadPosition {
  kCFNumberFormatterPadBeforePrefix(0),
  kCFNumberFormatterPadAfterPrefix(1),
  kCFNumberFormatterPadBeforeSuffix(2),
  kCFNumberFormatterPadAfterSuffix(3);

  final int value;
  const CFNumberFormatterPadPosition(this.value);

  static CFNumberFormatterPadPosition fromValue(int value) => switch (value) {
        0 => kCFNumberFormatterPadBeforePrefix,
        1 => kCFNumberFormatterPadAfterPrefix,
        2 => kCFNumberFormatterPadBeforeSuffix,
        3 => kCFNumberFormatterPadAfterSuffix,
        _ => throw ArgumentError(
            'Unknown value for CFNumberFormatterPadPosition: $value'),
      };
}

typedef boolean_t = ffi.Int;
typedef Dartboolean_t = int;
typedef natural_t = __darwin_natural_t;
typedef integer_t = ffi.Int;
typedef Dartinteger_t = int;
typedef vm_offset_t = ffi.UintPtr;
typedef Dartvm_offset_t = int;
typedef vm_size_t = ffi.UintPtr;
typedef Dartvm_size_t = int;
typedef mach_vm_address_t = ffi.Uint64;
typedef Dartmach_vm_address_t = int;
typedef mach_vm_offset_t = ffi.Uint64;
typedef Dartmach_vm_offset_t = int;
typedef mach_vm_size_t = ffi.Uint64;
typedef Dartmach_vm_size_t = int;
typedef vm_map_offset_t = ffi.Uint64;
typedef Dartvm_map_offset_t = int;
typedef vm_map_address_t = ffi.Uint64;
typedef Dartvm_map_address_t = int;
typedef vm_map_size_t = ffi.Uint64;
typedef Dartvm_map_size_t = int;
typedef vm32_offset_t = ffi.Uint32;
typedef Dartvm32_offset_t = int;
typedef vm32_address_t = ffi.Uint32;
typedef Dartvm32_address_t = int;
typedef vm32_size_t = ffi.Uint32;
typedef Dartvm32_size_t = int;
typedef mach_port_context_t = vm_offset_t;
typedef mach_port_name_t = natural_t;
typedef mach_port_name_array_t = ffi.Pointer<mach_port_name_t>;
typedef mach_port_t = __darwin_mach_port_t;
typedef mach_port_array_t = ffi.Pointer<mach_port_t>;
typedef mach_port_right_t = natural_t;
typedef mach_port_type_t = natural_t;
typedef mach_port_type_array_t = ffi.Pointer<mach_port_type_t>;
typedef mach_port_urefs_t = natural_t;
typedef mach_port_delta_t = integer_t;
typedef mach_port_seqno_t = natural_t;
typedef mach_port_mscount_t = natural_t;
typedef mach_port_msgcount_t = natural_t;
typedef mach_port_rights_t = natural_t;
typedef mach_port_srights_t = ffi.UnsignedInt;
typedef Dartmach_port_srights_t = int;

final class mach_port_status extends ffi.Struct {
  @mach_port_rights_t()
  external int mps_pset;

  @mach_port_seqno_t()
  external int mps_seqno;

  @mach_port_mscount_t()
  external int mps_mscount;

  @mach_port_msgcount_t()
  external int mps_qlimit;

  @mach_port_msgcount_t()
  external int mps_msgcount;

  @mach_port_rights_t()
  external int mps_sorights;

  @boolean_t()
  external int mps_srights;

  @boolean_t()
  external int mps_pdrequest;

  @boolean_t()
  external int mps_nsrequest;

  @natural_t()
  external int mps_flags;
}

typedef mach_port_status_t = mach_port_status;

final class mach_port_limits extends ffi.Struct {
  @mach_port_msgcount_t()
  external int mpl_qlimit;
}

typedef mach_port_limits_t = mach_port_limits;

final class mach_port_info_ext extends ffi.Struct {
  external mach_port_status_t mpie_status;

  @mach_port_msgcount_t()
  external int mpie_boost_cnt;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint32> reserved;
}

typedef mach_port_info_ext_t = mach_port_info_ext;

final class mach_port_guard_info extends ffi.Struct {
  @ffi.Uint64()
  external int mpgi_guard;
}

typedef mach_port_guard_info_t = mach_port_guard_info;
typedef mach_port_info_t = ffi.Pointer<integer_t>;
typedef mach_port_flavor_t = ffi.Int;
typedef Dartmach_port_flavor_t = int;

final class mach_port_qos extends ffi.Opaque {}

typedef mach_port_qos_t = mach_port_qos;

final class mach_service_port_info extends ffi.Struct {
  @ffi.Array.multi([255])
  external ffi.Array<ffi.Char> mspi_string_name;

  @ffi.Uint8()
  external int mspi_domain_type;
}

typedef mach_service_port_info_data_t = mach_service_port_info;
typedef mach_service_port_info_t = ffi.Pointer<mach_service_port_info>;

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint64> reserved;

  @mach_port_name_t()
  external int work_interval_port;

  external mach_service_port_info_t service_port_info;

  @mach_port_name_t()
  external int service_port_name;
}

final class mach_port_options extends ffi.Struct {
  @ffi.Uint32()
  external int flags;

  external mach_port_limits_t mpl;

  external UnnamedUnion1 unnamed;
}

typedef mach_port_options_t = mach_port_options;
typedef mach_port_options_ptr_t = ffi.Pointer<mach_port_options_t>;

enum mach_port_guard_exception_codes {
  kGUARD_EXC_DESTROY(1),
  kGUARD_EXC_MOD_REFS(2),
  kGUARD_EXC_INVALID_OPTIONS(3),
  kGUARD_EXC_SET_CONTEXT(4),
  kGUARD_EXC_THREAD_SET_STATE(5),
  kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE(6),
  kGUARD_EXC_UNGUARDED(8),
  kGUARD_EXC_INCORRECT_GUARD(16),
  kGUARD_EXC_IMMOVABLE(32),
  kGUARD_EXC_STRICT_REPLY(64),
  kGUARD_EXC_MSG_FILTERED(128),
  kGUARD_EXC_INVALID_RIGHT(256),
  kGUARD_EXC_INVALID_NAME(512),
  kGUARD_EXC_INVALID_VALUE(1024),
  kGUARD_EXC_INVALID_ARGUMENT(2048),
  kGUARD_EXC_RIGHT_EXISTS(4096),
  kGUARD_EXC_KERN_NO_SPACE(8192),
  kGUARD_EXC_KERN_FAILURE(16384),
  kGUARD_EXC_KERN_RESOURCE(32768),
  kGUARD_EXC_SEND_INVALID_REPLY(65536),
  kGUARD_EXC_SEND_INVALID_VOUCHER(131072),
  kGUARD_EXC_SEND_INVALID_RIGHT(262144),
  kGUARD_EXC_RCV_INVALID_NAME(524288),
  kGUARD_EXC_RCV_GUARDED_DESC(1048576),
  kGUARD_EXC_MOD_REFS_NON_FATAL(2097152),
  kGUARD_EXC_IMMOVABLE_NON_FATAL(4194304),
  kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS(8388608);

  final int value;
  const mach_port_guard_exception_codes(this.value);

  static mach_port_guard_exception_codes fromValue(int value) =>
      switch (value) {
        1 => kGUARD_EXC_DESTROY,
        2 => kGUARD_EXC_MOD_REFS,
        3 => kGUARD_EXC_INVALID_OPTIONS,
        4 => kGUARD_EXC_SET_CONTEXT,
        5 => kGUARD_EXC_THREAD_SET_STATE,
        6 => kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE,
        8 => kGUARD_EXC_UNGUARDED,
        16 => kGUARD_EXC_INCORRECT_GUARD,
        32 => kGUARD_EXC_IMMOVABLE,
        64 => kGUARD_EXC_STRICT_REPLY,
        128 => kGUARD_EXC_MSG_FILTERED,
        256 => kGUARD_EXC_INVALID_RIGHT,
        512 => kGUARD_EXC_INVALID_NAME,
        1024 => kGUARD_EXC_INVALID_VALUE,
        2048 => kGUARD_EXC_INVALID_ARGUMENT,
        4096 => kGUARD_EXC_RIGHT_EXISTS,
        8192 => kGUARD_EXC_KERN_NO_SPACE,
        16384 => kGUARD_EXC_KERN_FAILURE,
        32768 => kGUARD_EXC_KERN_RESOURCE,
        65536 => kGUARD_EXC_SEND_INVALID_REPLY,
        131072 => kGUARD_EXC_SEND_INVALID_VOUCHER,
        262144 => kGUARD_EXC_SEND_INVALID_RIGHT,
        524288 => kGUARD_EXC_RCV_INVALID_NAME,
        1048576 => kGUARD_EXC_RCV_GUARDED_DESC,
        2097152 => kGUARD_EXC_MOD_REFS_NON_FATAL,
        4194304 => kGUARD_EXC_IMMOVABLE_NON_FATAL,
        8388608 => kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS,
        _ => throw ArgumentError(
            'Unknown value for mach_port_guard_exception_codes: $value'),
      };
}

typedef CFRunLoopMode = CFStringRef;

final class __CFRunLoop extends ffi.Opaque {}

typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;

final class __CFRunLoopSource extends ffi.Opaque {}

typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;

final class __CFRunLoopObserver extends ffi.Opaque {}

typedef CFRunLoopObserverRef = ffi.Pointer<__CFRunLoopObserver>;

final class __CFRunLoopTimer extends ffi.Opaque {}

typedef CFRunLoopTimerRef = ffi.Pointer<__CFRunLoopTimer>;

enum CFRunLoopRunResult {
  kCFRunLoopRunFinished(1),
  kCFRunLoopRunStopped(2),
  kCFRunLoopRunTimedOut(3),
  kCFRunLoopRunHandledSource(4);

  final int value;
  const CFRunLoopRunResult(this.value);

  static CFRunLoopRunResult fromValue(int value) => switch (value) {
        1 => kCFRunLoopRunFinished,
        2 => kCFRunLoopRunStopped,
        3 => kCFRunLoopRunTimedOut,
        4 => kCFRunLoopRunHandledSource,
        _ =>
          throw ArgumentError('Unknown value for CFRunLoopRunResult: $value'),
      };
}

enum CFRunLoopActivity {
  kCFRunLoopEntry(1),
  kCFRunLoopBeforeTimers(2),
  kCFRunLoopBeforeSources(4),
  kCFRunLoopBeforeWaiting(32),
  kCFRunLoopAfterWaiting(64),
  kCFRunLoopExit(128),
  kCFRunLoopAllActivities(268435455);

  final int value;
  const CFRunLoopActivity(this.value);

  static CFRunLoopActivity fromValue(int value) => switch (value) {
        1 => kCFRunLoopEntry,
        2 => kCFRunLoopBeforeTimers,
        4 => kCFRunLoopBeforeSources,
        32 => kCFRunLoopBeforeWaiting,
        64 => kCFRunLoopAfterWaiting,
        128 => kCFRunLoopExit,
        268435455 => kCFRunLoopAllActivities,
        _ => throw ArgumentError('Unknown value for CFRunLoopActivity: $value'),
      };
}

final class CFRunLoopSourceContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          Boolean Function(
              ffi.Pointer<ffi.Void> info1, ffi.Pointer<ffi.Void> info2)>> equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void> info)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> info, CFRunLoopRef rl,
              CFRunLoopMode mode)>> schedule;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> info, CFRunLoopRef rl,
              CFRunLoopMode mode)>> cancel;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      perform;
}

final class CFRunLoopSourceContext1 extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          Boolean Function(
              ffi.Pointer<ffi.Void> info1, ffi.Pointer<ffi.Void> info2)>> equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void> info)>> hash;

  external ffi.Pointer<
          ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void> info)>>
      getPort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void> msg,
              CFIndex size,
              CFAllocatorRef allocator,
              ffi.Pointer<ffi.Void> info)>> perform;
}

final class CFRunLoopObserverContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFRunLoopObserverCallBackFunction = ffi.Void Function(
    CFRunLoopObserverRef observer,
    CFOptionFlags activity,
    ffi.Pointer<ffi.Void> info);
typedef DartCFRunLoopObserverCallBackFunction = void Function(
    CFRunLoopObserverRef observer,
    CFRunLoopActivity activity,
    ffi.Pointer<ffi.Void> info);
typedef CFRunLoopObserverCallBack
    = ffi.Pointer<ffi.NativeFunction<CFRunLoopObserverCallBackFunction>>;
void _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        CFRunLoopObserverRef arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    CFRunLoopObserverRef arg0, CFOptionFlags arg1)>>()
        .asFunction<void Function(CFRunLoopObserverRef, int)>()(arg0, arg1);
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    CFRunLoopObserverRef, CFOptionFlags)>(
            _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_fnPtrTrampoline)
        .cast();
void
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            CFRunLoopObserverRef arg0,
            int arg1) =>
        (objc.getBlockClosure(block) as void Function(
            CFRunLoopObserverRef, int))(arg0, arg1);
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                    CFRunLoopObserverRef, CFOptionFlags)>(
            _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureTrampoline)
        .cast();
void
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_listenerTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        CFRunLoopObserverRef arg0,
        int arg1) {
  (objc.getBlockClosure(block) as void Function(CFRunLoopObserverRef, int))(
      arg0, arg1);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CFRunLoopObserverRef,
            CFOptionFlags)>
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_listenerCallable =
    ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                CFRunLoopObserverRef, CFOptionFlags)>.listener(
        _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_listenerTrampoline)
      ..keepIsolateAlive = false;
void
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        ffi.Pointer<ffi.Void> waiter,
        CFRunLoopObserverRef arg0,
        int arg1) {
  try {
    (objc.getBlockClosure(block) as void Function(CFRunLoopObserverRef, int))(
        arg0, arg1);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, CFRunLoopObserverRef, CFOptionFlags)>
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingCallable =
    ffi.NativeCallable<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>,
                CFRunLoopObserverRef,
                CFOptionFlags)>.isolateLocal(
        _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, CFRunLoopObserverRef, CFOptionFlags)>
    _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingListenerCallable =
    ffi.NativeCallable<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>,
                CFRunLoopObserverRef,
                CFOptionFlags)>.listener(
        _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>`.
abstract final class ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>,
                  CFOptionFlags)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>
      fromFunctionPointer(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef arg0, CFOptionFlags arg1)>>
                  ptr) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>(
              objc.newPointerBlock(
                  _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_fnPtrCallable,
                  ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>
      fromFunction(void Function(CFRunLoopObserverRef, CFRunLoopActivity) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<
                  ffi.Void Function(
                      ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>(
              objc.newClosureBlock(
                  _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_closureCallable,
                  (CFRunLoopObserverRef arg0, int arg1) =>
                      fn(arg0, CFRunLoopActivity.fromValue(arg1)),
                  keepIsolateAlive),
              retain: false,
              release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>
      listener(void Function(CFRunLoopObserverRef, CFRunLoopActivity) fn,
          {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_listenerCallable
            .nativeFunction
            .cast(),
        (CFRunLoopObserverRef arg0, int arg1) =>
            fn(arg0, CFRunLoopActivity.fromValue(arg1)),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_tg5tbv(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>,
            CFOptionFlags)>(wrapper, retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<
          ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>
      blocking(void Function(CFRunLoopObserverRef, CFRunLoopActivity) fn,
          {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingCallable
            .nativeFunction
            .cast(),
        (CFRunLoopObserverRef arg0, int arg1) =>
            fn(arg0, CFRunLoopActivity.fromValue(arg1)),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_blockingListenerCallable
            .nativeFunction
            .cast(),
        (CFRunLoopObserverRef arg0, int arg1) =>
            fn(arg0, CFRunLoopActivity.fromValue(arg1)),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_tg5tbv(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>,
            CFOptionFlags)>(wrapper, retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)>`.
extension ObjCBlock_ffiVoid_CFRunLoopObserverRef_CFRunLoopActivity_CallExtension
    on objc.ObjCBlock<
        ffi.Void Function(ffi.Pointer<__CFRunLoopObserver>, CFOptionFlags)> {
  void call(CFRunLoopObserverRef arg0, CFRunLoopActivity arg1) => ref
      .pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  CFRunLoopObserverRef arg0, CFOptionFlags arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>, CFRunLoopObserverRef,
              int)>()(ref.pointer, arg0, arg1.value);
}

final class CFRunLoopTimerContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFRunLoopTimerCallBackFunction = ffi.Void Function(
    CFRunLoopTimerRef timer, ffi.Pointer<ffi.Void> info);
typedef DartCFRunLoopTimerCallBackFunction = void Function(
    CFRunLoopTimerRef timer, ffi.Pointer<ffi.Void> info);
typedef CFRunLoopTimerCallBack
    = ffi.Pointer<ffi.NativeFunction<CFRunLoopTimerCallBackFunction>>;
void _ObjCBlock_ffiVoid_CFRunLoopTimerRef_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, CFRunLoopTimerRef arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef arg0)>>()
        .asFunction<void Function(CFRunLoopTimerRef)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_CFRunLoopTimerRef_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, CFRunLoopTimerRef)>(
            _ObjCBlock_ffiVoid_CFRunLoopTimerRef_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, CFRunLoopTimerRef arg0) =>
    (objc.getBlockClosure(block) as void Function(CFRunLoopTimerRef))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, CFRunLoopTimerRef)>(
            _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_CFRunLoopTimerRef_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, CFRunLoopTimerRef arg0) {
  (objc.getBlockClosure(block) as void Function(CFRunLoopTimerRef))(arg0);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, CFRunLoopTimerRef)>
    _ObjCBlock_ffiVoid_CFRunLoopTimerRef_listenerCallable = ffi.NativeCallable<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl>, CFRunLoopTimerRef)>.listener(
        _ObjCBlock_ffiVoid_CFRunLoopTimerRef_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    CFRunLoopTimerRef arg0) {
  try {
    (objc.getBlockClosure(block) as void Function(CFRunLoopTimerRef))(arg0);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, CFRunLoopTimerRef)>
    _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, CFRunLoopTimerRef)>.isolateLocal(
        _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, CFRunLoopTimerRef)>
    _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingListenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, CFRunLoopTimerRef)>.listener(
        _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>`.
abstract final class ObjCBlock_ffiVoid_CFRunLoopTimerRef {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_CFRunLoopTimerRef_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>
      fromFunction(void Function(CFRunLoopTimerRef) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>(
              objc.newClosureBlock(
                  _ObjCBlock_ffiVoid_CFRunLoopTimerRef_closureCallable,
                  (CFRunLoopTimerRef arg0) => fn(arg0),
                  keepIsolateAlive),
              retain: false,
              release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>
      listener(void Function(CFRunLoopTimerRef) fn,
          {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CFRunLoopTimerRef_listenerCallable.nativeFunction
            .cast(),
        (CFRunLoopTimerRef arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_1dqvvol(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>(
        wrapper,
        retain: false,
        release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>
      blocking(void Function(CFRunLoopTimerRef) fn,
          {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingCallable.nativeFunction
            .cast(),
        (CFRunLoopTimerRef arg0) => fn(arg0),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_CFRunLoopTimerRef_blockingListenerCallable
            .nativeFunction
            .cast(),
        (CFRunLoopTimerRef arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_1dqvvol(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>(
        wrapper,
        retain: false,
        release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)>`.
extension ObjCBlock_ffiVoid_CFRunLoopTimerRef_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Pointer<__CFRunLoopTimer>)> {
  void call(CFRunLoopTimerRef arg0) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  CFRunLoopTimerRef arg0)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>,
              CFRunLoopTimerRef)>()(ref.pointer, arg0);
}

final class __CFSocket extends ffi.Opaque {}

typedef CFSocketRef = ffi.Pointer<__CFSocket>;

enum CFSocketError {
  kCFSocketSuccess(0),
  kCFSocketError(-1),
  kCFSocketTimeout(-2);

  final int value;
  const CFSocketError(this.value);

  static CFSocketError fromValue(int value) => switch (value) {
        0 => kCFSocketSuccess,
        -1 => kCFSocketError,
        -2 => kCFSocketTimeout,
        _ => throw ArgumentError('Unknown value for CFSocketError: $value'),
      };
}

final class CFSocketSignature extends ffi.Struct {
  @SInt32()
  external int protocolFamily;

  @SInt32()
  external int socketType;

  @SInt32()
  external int protocol;

  external CFDataRef address;
}

enum CFSocketCallBackType {
  kCFSocketNoCallBack(0),
  kCFSocketReadCallBack(1),
  kCFSocketAcceptCallBack(2),
  kCFSocketDataCallBack(3),
  kCFSocketConnectCallBack(4),
  kCFSocketWriteCallBack(8);

  final int value;
  const CFSocketCallBackType(this.value);

  static CFSocketCallBackType fromValue(int value) => switch (value) {
        0 => kCFSocketNoCallBack,
        1 => kCFSocketReadCallBack,
        2 => kCFSocketAcceptCallBack,
        3 => kCFSocketDataCallBack,
        4 => kCFSocketConnectCallBack,
        8 => kCFSocketWriteCallBack,
        _ =>
          throw ArgumentError('Unknown value for CFSocketCallBackType: $value'),
      };
}

typedef CFSocketCallBackFunction = ffi.Void Function(
    CFSocketRef s,
    CFOptionFlags type,
    CFDataRef address,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> info);
typedef DartCFSocketCallBackFunction = void Function(
    CFSocketRef s,
    CFSocketCallBackType type,
    CFDataRef address,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> info);
typedef CFSocketCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSocketCallBackFunction>>;

final class CFSocketContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFSocketNativeHandle = ffi.Int;
typedef DartCFSocketNativeHandle = int;
typedef os_function_tFunction = ffi.Void Function(ffi.Pointer<ffi.Void>);
typedef Dartos_function_tFunction = void Function(ffi.Pointer<ffi.Void>);
typedef os_function_t = ffi.Pointer<ffi.NativeFunction<os_function_tFunction>>;
typedef os_block_t = ffi.Pointer<objc.ObjCBlockImpl>;
typedef Dartos_block_t = objc.ObjCBlock<ffi.Void Function()>;

final class accessx_descriptor extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ad_name_offset;

  @ffi.Int()
  external int ad_flags;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> ad_pad;
}

final class fssearchblock extends ffi.Opaque {}

final class searchstate extends ffi.Opaque {}

final class flock extends ffi.Struct {
  @off_t()
  external int l_start;

  @off_t()
  external int l_len;

  @pid_t()
  external int l_pid;

  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;
}

final class flocktimeout extends ffi.Struct {
  external flock fl;

  external timespec timeout;
}

final class radvisory extends ffi.Struct {
  @off_t()
  external int ra_offset;

  @ffi.Int()
  external int ra_count;
}

final class fsignatures extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  external ffi.Pointer<ffi.Void> fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Size()
  external int fs_fsignatures_size;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> fs_cdhash;

  @ffi.Int()
  external int fs_hash_type;
}

typedef fsignatures_t = fsignatures;

final class fsupplement extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  @off_t()
  external int fs_blob_start;

  @ffi.Size()
  external int fs_blob_size;

  @ffi.Int()
  external int fs_orig_fd;
}

typedef fsupplement_t = fsupplement;

final class fchecklv extends ffi.Struct {
  @off_t()
  external int lv_file_start;

  @ffi.Size()
  external int lv_error_message_size;

  external ffi.Pointer<ffi.Void> lv_error_message;
}

typedef fchecklv_t = fchecklv;

final class fgetsigsinfo extends ffi.Struct {
  @off_t()
  external int fg_file_start;

  @ffi.Int()
  external int fg_info_request;

  @ffi.Int()
  external int fg_sig_is_platform;
}

typedef fgetsigsinfo_t = fgetsigsinfo;

final class fstore extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fst_flags;

  @ffi.Int()
  external int fst_posmode;

  @off_t()
  external int fst_offset;

  @off_t()
  external int fst_length;

  @off_t()
  external int fst_bytesalloc;
}

typedef fstore_t = fstore;

final class fpunchhole extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fp_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fp_offset;

  @off_t()
  external int fp_length;
}

typedef fpunchhole_t = fpunchhole;

final class ftrimactivefile extends ffi.Struct {
  @off_t()
  external int fta_offset;

  @off_t()
  external int fta_length;
}

typedef ftrimactivefile_t = ftrimactivefile;

final class fspecread extends ffi.Struct {
  @ffi.UnsignedInt()
  external int fsr_flags;

  @ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fsr_offset;

  @off_t()
  external int fsr_length;
}

typedef fspecread_t = fspecread;

final class fattributiontag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int ft_flags;

  @ffi.UnsignedLongLong()
  external int ft_hash;

  @ffi.Array.multi([255])
  external ffi.Array<ffi.Char> ft_attribution_name;
}

typedef fattributiontag_t = fattributiontag;

@ffi.Packed(4)
final class log2phys extends ffi.Struct {
  @ffi.UnsignedInt()
  external int l2p_flags;

  @off_t()
  external int l2p_contigbytes;

  @off_t()
  external int l2p_devoffset;
}

final class _filesec extends ffi.Opaque {}

typedef filesec_t = ffi.Pointer<_filesec>;

enum filesec_property_t {
  FILESEC_OWNER(1),
  FILESEC_GROUP(2),
  FILESEC_UUID(3),
  FILESEC_MODE(4),
  FILESEC_ACL(5),
  FILESEC_GRPUUID(6),
  FILESEC_ACL_RAW(100),
  FILESEC_ACL_ALLOCSIZE(101);

  final int value;
  const filesec_property_t(this.value);

  static filesec_property_t fromValue(int value) => switch (value) {
        1 => FILESEC_OWNER,
        2 => FILESEC_GROUP,
        3 => FILESEC_UUID,
        4 => FILESEC_MODE,
        5 => FILESEC_ACL,
        6 => FILESEC_GRPUUID,
        100 => FILESEC_ACL_RAW,
        101 => FILESEC_ACL_ALLOCSIZE,
        _ =>
          throw ArgumentError('Unknown value for filesec_property_t: $value'),
      };
}

final class objc_class extends ffi.Opaque {}

final class objc_object extends ffi.Struct {
  external ffi.Pointer<objc.ObjCObject> isaAsInt;
}

final class objc_selector extends ffi.Opaque {}

typedef IMPFunction = ffi.Void Function();
typedef DartIMPFunction = void Function();
typedef IMP = ffi.Pointer<ffi.NativeFunction<IMPFunction>>;
typedef objc_zone_t = ffi.Pointer<_malloc_zone_t>;
typedef objc_objectptr_t = ffi.Pointer<ffi.Void>;
typedef NSInteger = ffi.Long;
typedef DartNSInteger = int;
typedef NSUInteger = ffi.UnsignedLong;
typedef DartNSUInteger = int;
late final _class_OS_object = objc.getClass("OS_object");
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
final _objc_msgSend_19nvye5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_init = objc.registerName("init");
final _objc_msgSend_151sglz = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_new = objc.registerName("new");
late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_1cwp428 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.NSZone>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_self = objc.registerName("self");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline)
        .cast();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<ffi.Void> arg0)>>
                  ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(_ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable, ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newClosureBlock(
                  _ObjCBlock_objcObjCObject_ffiVoid_closureCallable,
                  (ffi.Pointer<ffi.Void> arg0) =>
                      fn(arg0).ref.retainAndAutorelease(),
                  keepIsolateAlive),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_CallExtension on objc
    .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)> {
  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> arg0) => objc.ObjCObjectBase(
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0),
      retain: true,
      release: true);
}

late final _sel_retain = objc.registerName("retain");
late final _sel_autorelease = objc.registerName("autorelease");

/// OS_object
class OS_object extends objc.NSObject {
  OS_object._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [OS_object] that points to the same underlying object as [other].
  OS_object.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_object] that wraps the given raw object pointer.
  OS_object.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_object].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_OS_object);
  }

  /// init
  OS_object init() {
    objc.checkOsVersionInternal('OS_object.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static OS_object new$() {
    final _ret = _objc_msgSend_151sglz(_class_OS_object, _sel_new);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static OS_object allocWithZone_(ffi.Pointer<objc.NSZone> zone) {
    final _ret =
        _objc_msgSend_1cwp428(_class_OS_object, _sel_allocWithZone_, zone);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static OS_object alloc() {
    final _ret = _objc_msgSend_151sglz(_class_OS_object, _sel_alloc);
    return OS_object.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  OS_object self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return OS_object.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  OS_object retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return OS_object.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  OS_object autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return OS_object.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new instance of OS_object constructed with the default `new` method.
  factory OS_object() => new$();
}

enum os_clockid_t {
  OS_CLOCK_MACH_ABSOLUTE_TIME(32);

  final int value;
  const os_clockid_t(this.value);

  static os_clockid_t fromValue(int value) => switch (value) {
        32 => OS_CLOCK_MACH_ABSOLUTE_TIME,
        _ => throw ArgumentError('Unknown value for os_clockid_t: $value'),
      };
}

final class os_workgroup_attr_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Char> opaque;
}

final class os_workgroup_interval_data_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> opaque;
}

final class os_workgroup_join_token_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([36])
  external ffi.Array<ffi.Char> opaque;
}

late final _class_OS_os_workgroup = objc.getClass("OS_os_workgroup");

/// OS_os_workgroup
class OS_os_workgroup extends OS_object {
  OS_os_workgroup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [OS_os_workgroup] that points to the same underlying object as [other].
  OS_os_workgroup.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_os_workgroup] that wraps the given raw object pointer.
  OS_os_workgroup.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_os_workgroup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_OS_os_workgroup);
  }

  /// init
  OS_os_workgroup init() {
    objc.checkOsVersionInternal('OS_os_workgroup.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static OS_os_workgroup new$() {
    final _ret = _objc_msgSend_151sglz(_class_OS_os_workgroup, _sel_new);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static OS_os_workgroup allocWithZone_(ffi.Pointer<objc.NSZone> zone) {
    final _ret = _objc_msgSend_1cwp428(
        _class_OS_os_workgroup, _sel_allocWithZone_, zone);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static OS_os_workgroup alloc() {
    final _ret = _objc_msgSend_151sglz(_class_OS_os_workgroup, _sel_alloc);
    return OS_os_workgroup.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  OS_os_workgroup self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return OS_os_workgroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  OS_os_workgroup retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return OS_os_workgroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  OS_os_workgroup autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return OS_os_workgroup.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new instance of OS_os_workgroup constructed with the default `new` method.
  factory OS_os_workgroup() => new$();
}

typedef os_workgroup_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartos_workgroup_t = OS_os_workgroup;
typedef os_workgroup_attr_s = os_workgroup_attr_opaque_s;
typedef os_workgroup_attr_t = ffi.Pointer<os_workgroup_attr_opaque_s>;
typedef os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
typedef os_workgroup_join_token_t
    = ffi.Pointer<os_workgroup_join_token_opaque_s>;
typedef os_workgroup_index = ffi.Uint32;
typedef Dartos_workgroup_index = int;
typedef os_workgroup_working_arena_destructor_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void>);
typedef Dartos_workgroup_working_arena_destructor_tFunction = void Function(
    ffi.Pointer<ffi.Void>);
typedef os_workgroup_working_arena_destructor_t = ffi.Pointer<
    ffi.NativeFunction<os_workgroup_working_arena_destructor_tFunction>>;

final class os_workgroup_max_parallel_threads_attr_s extends ffi.Opaque {}

typedef os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
typedef os_workgroup_mpt_attr_t
    = ffi.Pointer<os_workgroup_max_parallel_threads_attr_s>;
late final _protocol_OS_os_workgroup_interval =
    objc.getProtocol("OS_os_workgroup_interval");
late final _sel_conformsToProtocol_ = objc.registerName("conformsToProtocol:");
final _objc_msgSend_e3qsqz = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCProtocol>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCProtocol>)>();

/// OS_os_workgroup_interval
interface class OS_os_workgroup_interval extends objc.ObjCProtocolBase {
  OS_os_workgroup_interval._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_os_workgroup_interval] that points to the same underlying object as [other].
  OS_os_workgroup_interval.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_os_workgroup_interval] that wraps the given raw object pointer.
  OS_os_workgroup_interval.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_os_workgroup_interval].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_os_workgroup_interval);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_os_workgroup_interval.cast());

  /// Builds an object that implements the OS_os_workgroup_interval protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_os_workgroup_interval implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_os_workgroup_interval');

    builder.addProtocol($protocol);
    return OS_os_workgroup_interval.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_os_workgroup_interval protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

late final _class_OS_os_workgroup_interval =
    objc.getClass("OS_os_workgroup_interval");

/// OS_os_workgroup_interval
class OS_os_workgroup_interval$1 extends OS_os_workgroup
    implements OS_os_workgroup_interval {
  OS_os_workgroup_interval$1._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [OS_os_workgroup_interval$1] that points to the same underlying object as [other].
  OS_os_workgroup_interval$1.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_os_workgroup_interval$1] that wraps the given raw object pointer.
  OS_os_workgroup_interval$1.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_os_workgroup_interval$1].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_OS_os_workgroup_interval);
  }

  /// init
  OS_os_workgroup_interval$1 init() {
    objc.checkOsVersionInternal('OS_os_workgroup_interval.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static OS_os_workgroup_interval$1 new$() {
    final _ret =
        _objc_msgSend_151sglz(_class_OS_os_workgroup_interval, _sel_new);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static OS_os_workgroup_interval$1 allocWithZone_(
      ffi.Pointer<objc.NSZone> zone) {
    final _ret = _objc_msgSend_1cwp428(
        _class_OS_os_workgroup_interval, _sel_allocWithZone_, zone);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static OS_os_workgroup_interval$1 alloc() {
    final _ret =
        _objc_msgSend_151sglz(_class_OS_os_workgroup_interval, _sel_alloc);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  OS_os_workgroup_interval$1 self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  OS_os_workgroup_interval$1 retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  OS_os_workgroup_interval$1 autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return OS_os_workgroup_interval$1.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a new instance of OS_os_workgroup_interval$1 constructed with the default `new` method.
  factory OS_os_workgroup_interval$1() => new$();
}

typedef os_workgroup_interval_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartos_workgroup_interval_t = OS_os_workgroup;
typedef os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
typedef os_workgroup_interval_data_t
    = ffi.Pointer<os_workgroup_interval_data_opaque_s>;
late final _protocol_OS_os_workgroup_parallel =
    objc.getProtocol("OS_os_workgroup_parallel");

/// OS_os_workgroup_parallel
interface class OS_os_workgroup_parallel extends objc.ObjCProtocolBase {
  OS_os_workgroup_parallel._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_os_workgroup_parallel] that points to the same underlying object as [other].
  OS_os_workgroup_parallel.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_os_workgroup_parallel] that wraps the given raw object pointer.
  OS_os_workgroup_parallel.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_os_workgroup_parallel].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_os_workgroup_parallel);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_os_workgroup_parallel.cast());

  /// Builds an object that implements the OS_os_workgroup_parallel protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_os_workgroup_parallel implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_os_workgroup_parallel');

    builder.addProtocol($protocol);
    return OS_os_workgroup_parallel.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_os_workgroup_parallel protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

late final _class_OS_os_workgroup_parallel =
    objc.getClass("OS_os_workgroup_parallel");

/// OS_os_workgroup_parallel
class OS_os_workgroup_parallel$1 extends OS_os_workgroup
    implements OS_os_workgroup_parallel {
  OS_os_workgroup_parallel$1._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [OS_os_workgroup_parallel$1] that points to the same underlying object as [other].
  OS_os_workgroup_parallel$1.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_os_workgroup_parallel$1] that wraps the given raw object pointer.
  OS_os_workgroup_parallel$1.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_os_workgroup_parallel$1].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_OS_os_workgroup_parallel);
  }

  /// init
  OS_os_workgroup_parallel$1 init() {
    objc.checkOsVersionInternal('OS_os_workgroup_parallel.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// new
  static OS_os_workgroup_parallel$1 new$() {
    final _ret =
        _objc_msgSend_151sglz(_class_OS_os_workgroup_parallel, _sel_new);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static OS_os_workgroup_parallel$1 allocWithZone_(
      ffi.Pointer<objc.NSZone> zone) {
    final _ret = _objc_msgSend_1cwp428(
        _class_OS_os_workgroup_parallel, _sel_allocWithZone_, zone);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static OS_os_workgroup_parallel$1 alloc() {
    final _ret =
        _objc_msgSend_151sglz(_class_OS_os_workgroup_parallel, _sel_alloc);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  OS_os_workgroup_parallel$1 self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  OS_os_workgroup_parallel$1 retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  OS_os_workgroup_parallel$1 autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return OS_os_workgroup_parallel$1.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a new instance of OS_os_workgroup_parallel$1 constructed with the default `new` method.
  factory OS_os_workgroup_parallel$1() => new$();
}

typedef os_workgroup_parallel_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartos_workgroup_parallel_t = OS_os_workgroup;
typedef dispatch_function_tFunction = ffi.Void Function(ffi.Pointer<ffi.Void>);
typedef Dartdispatch_function_tFunction = void Function(ffi.Pointer<ffi.Void>);
typedef dispatch_function_t
    = ffi.Pointer<ffi.NativeFunction<dispatch_function_tFunction>>;

final class time_value extends ffi.Struct {
  @integer_t()
  external int seconds;

  @integer_t()
  external int microseconds;
}

typedef time_value_t = time_value;
typedef alarm_type_t = ffi.Int;
typedef Dartalarm_type_t = int;
typedef sleep_type_t = ffi.Int;
typedef Dartsleep_type_t = int;
typedef clock_id_t = ffi.Int;
typedef Dartclock_id_t = int;
typedef clock_flavor_t = ffi.Int;
typedef Dartclock_flavor_t = int;
typedef clock_attr_t = ffi.Pointer<ffi.Int>;
typedef clock_res_t = ffi.Int;
typedef Dartclock_res_t = int;

final class mach_timespec extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tv_sec;

  @clock_res_t()
  external int tv_nsec;
}

typedef mach_timespec_t = mach_timespec;
typedef dispatch_time_t = ffi.Uint64;
typedef Dartdispatch_time_t = int;

enum qos_class_t {
  QOS_CLASS_USER_INTERACTIVE(33),
  QOS_CLASS_USER_INITIATED(25),
  QOS_CLASS_DEFAULT(21),
  QOS_CLASS_UTILITY(17),
  QOS_CLASS_BACKGROUND(9),
  QOS_CLASS_UNSPECIFIED(0);

  final int value;
  const qos_class_t(this.value);

  static qos_class_t fromValue(int value) => switch (value) {
        33 => QOS_CLASS_USER_INTERACTIVE,
        25 => QOS_CLASS_USER_INITIATED,
        21 => QOS_CLASS_DEFAULT,
        17 => QOS_CLASS_UTILITY,
        9 => QOS_CLASS_BACKGROUND,
        0 => QOS_CLASS_UNSPECIFIED,
        _ => throw ArgumentError('Unknown value for qos_class_t: $value'),
      };
}

late final _protocol_OS_dispatch_object =
    objc.getProtocol("OS_dispatch_object");

/// OS_dispatch_object
interface class OS_dispatch_object extends objc.ObjCProtocolBase
    implements objc.NSObjectProtocol {
  OS_dispatch_object._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_object] that points to the same underlying object as [other].
  OS_dispatch_object.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_object] that wraps the given raw object pointer.
  OS_dispatch_object.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_object].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_object);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_object.cast());

  /// Builds an object that implements the OS_dispatch_object protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_object implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_object');

    builder.addProtocol($protocol);
    return OS_dispatch_object.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_object protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_object_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_object_t = objc.NSObject;
typedef dispatch_block_t = ffi.Pointer<objc.ObjCBlockImpl>;
typedef Dartdispatch_block_t = objc.ObjCBlock<ffi.Void Function()>;
late final _protocol_OS_dispatch_queue = objc.getProtocol("OS_dispatch_queue");

/// OS_dispatch_queue
interface class OS_dispatch_queue extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_queue._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue] that points to the same underlying object as [other].
  OS_dispatch_queue.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue] that wraps the given raw object pointer.
  OS_dispatch_queue.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(
        obj.ref.pointer, _sel_conformsToProtocol_, _protocol_OS_dispatch_queue);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_queue.cast());

  /// Builds an object that implements the OS_dispatch_queue protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_queue');

    builder.addProtocol($protocol);
    return OS_dispatch_queue.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_t = objc.NSObject;
late final _protocol_OS_dispatch_queue_global =
    objc.getProtocol("OS_dispatch_queue_global");

/// OS_dispatch_queue_global
interface class OS_dispatch_queue_global extends objc.ObjCProtocolBase
    implements OS_dispatch_queue {
  OS_dispatch_queue_global._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue_global] that points to the same underlying object as [other].
  OS_dispatch_queue_global.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue_global] that wraps the given raw object pointer.
  OS_dispatch_queue_global.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue_global].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_queue_global);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_queue_global.cast());

  /// Builds an object that implements the OS_dispatch_queue_global protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue_global implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_queue_global');

    builder.addProtocol($protocol);
    return OS_dispatch_queue_global.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue_global protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_global_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_global_t = objc.NSObject;
late final _protocol_OS_dispatch_queue_serial_executor =
    objc.getProtocol("OS_dispatch_queue_serial_executor");

/// OS_dispatch_queue_serial_executor
interface class OS_dispatch_queue_serial_executor extends objc.ObjCProtocolBase
    implements OS_dispatch_queue {
  OS_dispatch_queue_serial_executor._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue_serial_executor] that points to the same underlying object as [other].
  OS_dispatch_queue_serial_executor.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue_serial_executor] that wraps the given raw object pointer.
  OS_dispatch_queue_serial_executor.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue_serial_executor].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_queue_serial_executor);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol => objc.Protocol.castFromPointer(
      _protocol_OS_dispatch_queue_serial_executor.cast());

  /// Builds an object that implements the OS_dispatch_queue_serial_executor protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue_serial_executor implement(
      {bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(
        debugName: 'OS_dispatch_queue_serial_executor');

    builder.addProtocol($protocol);
    return OS_dispatch_queue_serial_executor.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue_serial_executor protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_serial_executor_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_serial_executor_t = objc.NSObject;
late final _protocol_OS_dispatch_queue_serial =
    objc.getProtocol("OS_dispatch_queue_serial");

/// OS_dispatch_queue_serial
interface class OS_dispatch_queue_serial extends objc.ObjCProtocolBase
    implements OS_dispatch_queue {
  OS_dispatch_queue_serial._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue_serial] that points to the same underlying object as [other].
  OS_dispatch_queue_serial.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue_serial] that wraps the given raw object pointer.
  OS_dispatch_queue_serial.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue_serial].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_queue_serial);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_queue_serial.cast());

  /// Builds an object that implements the OS_dispatch_queue_serial protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue_serial implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_queue_serial');

    builder.addProtocol($protocol);
    return OS_dispatch_queue_serial.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue_serial protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_serial_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_serial_t = objc.NSObject;
late final _protocol_OS_dispatch_queue_main =
    objc.getProtocol("OS_dispatch_queue_main");

/// OS_dispatch_queue_main
interface class OS_dispatch_queue_main extends objc.ObjCProtocolBase
    implements OS_dispatch_queue_serial {
  OS_dispatch_queue_main._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue_main] that points to the same underlying object as [other].
  OS_dispatch_queue_main.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue_main] that wraps the given raw object pointer.
  OS_dispatch_queue_main.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue_main].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_queue_main);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_queue_main.cast());

  /// Builds an object that implements the OS_dispatch_queue_main protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue_main implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_queue_main');

    builder.addProtocol($protocol);
    return OS_dispatch_queue_main.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue_main protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_main_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_main_t = objc.NSObject;
late final _protocol_OS_dispatch_queue_concurrent =
    objc.getProtocol("OS_dispatch_queue_concurrent");

/// OS_dispatch_queue_concurrent
interface class OS_dispatch_queue_concurrent extends objc.ObjCProtocolBase
    implements OS_dispatch_queue {
  OS_dispatch_queue_concurrent._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue_concurrent] that points to the same underlying object as [other].
  OS_dispatch_queue_concurrent.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue_concurrent] that wraps the given raw object pointer.
  OS_dispatch_queue_concurrent.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue_concurrent].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_queue_concurrent);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol => objc.Protocol.castFromPointer(
      _protocol_OS_dispatch_queue_concurrent.cast());

  /// Builds an object that implements the OS_dispatch_queue_concurrent protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue_concurrent implement(
      {bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_queue_concurrent');

    builder.addProtocol($protocol);
    return OS_dispatch_queue_concurrent.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue_concurrent protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_concurrent_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_concurrent_t = objc.NSObject;
void _ObjCBlock_ffiVoid_ffiSize_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Size arg0)>>()
        .asFunction<void Function(int)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiSize_fnPtrCallable =
    ffi.Pointer.fromFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Size)>(_ObjCBlock_ffiVoid_ffiSize_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_ffiSize_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
    (objc.getBlockClosure(block) as void Function(int))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiSize_closureCallable =
    ffi.Pointer.fromFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Size)>(_ObjCBlock_ffiVoid_ffiSize_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_ffiSize_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) {
  (objc.getBlockClosure(block) as void Function(int))(arg0);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Size)>
    _ObjCBlock_ffiVoid_ffiSize_listenerCallable = ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Size)>.listener(_ObjCBlock_ffiVoid_ffiSize_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_ffiSize_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    int arg0) {
  try {
    (objc.getBlockClosure(block) as void Function(int))(arg0);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Size)>
    _ObjCBlock_ffiVoid_ffiSize_blockingCallable = ffi.NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, ffi.Size)>.isolateLocal(
        _ObjCBlock_ffiVoid_ffiSize_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Size)>
    _ObjCBlock_ffiVoid_ffiSize_blockingListenerCallable = ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>,
            ffi.Size)>.listener(_ObjCBlock_ffiVoid_ffiSize_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Size)>`.
abstract final class ObjCBlock_ffiVoid_ffiSize {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Size)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Size)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Size)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Size arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Size)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_ffiSize_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Size)> fromFunction(
          void Function(int) fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Size)>(
          objc.newClosureBlock(_ObjCBlock_ffiVoid_ffiSize_closureCallable,
              (int arg0) => fn(arg0), keepIsolateAlive),
          retain: false,
          release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Size)> listener(
      void Function(int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiSize_listenerCallable.nativeFunction.cast(),
        (int arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_6enxqz(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Size)>(wrapper,
        retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(ffi.Size)> blocking(
      void Function(int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiSize_blockingCallable.nativeFunction.cast(),
        (int arg0) => fn(arg0),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiSize_blockingListenerCallable.nativeFunction
            .cast(),
        (int arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_6enxqz(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Size)>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Size)>`.
extension ObjCBlock_ffiVoid_ffiSize_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Size)> {
  void call(int arg0) => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Size arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>, int)>()(
      ref.pointer, arg0);
}

final class dispatch_queue_s extends ffi.Opaque {}

typedef dispatch_queue_priority_t = ffi.Long;
typedef Dartdispatch_queue_priority_t = int;
late final _protocol_OS_dispatch_queue_attr =
    objc.getProtocol("OS_dispatch_queue_attr");

/// OS_dispatch_queue_attr
interface class OS_dispatch_queue_attr extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_queue_attr._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_queue_attr] that points to the same underlying object as [other].
  OS_dispatch_queue_attr.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_queue_attr] that wraps the given raw object pointer.
  OS_dispatch_queue_attr.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_queue_attr].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_queue_attr);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_queue_attr.cast());

  /// Builds an object that implements the OS_dispatch_queue_attr protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_queue_attr implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_queue_attr');

    builder.addProtocol($protocol);
    return OS_dispatch_queue_attr.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_queue_attr protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_queue_attr_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_queue_attr_t = objc.NSObject;

final class dispatch_queue_attr_s extends ffi.Opaque {}

enum dispatch_autorelease_frequency_t {
  DISPATCH_AUTORELEASE_FREQUENCY_INHERIT(0),
  DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM(1),
  DISPATCH_AUTORELEASE_FREQUENCY_NEVER(2);

  final int value;
  const dispatch_autorelease_frequency_t(this.value);

  static dispatch_autorelease_frequency_t fromValue(int value) =>
      switch (value) {
        0 => DISPATCH_AUTORELEASE_FREQUENCY_INHERIT,
        1 => DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM,
        2 => DISPATCH_AUTORELEASE_FREQUENCY_NEVER,
        _ => throw ArgumentError(
            'Unknown value for dispatch_autorelease_frequency_t: $value'),
      };
}

enum dispatch_block_flags_t {
  DISPATCH_BLOCK_BARRIER(1),
  DISPATCH_BLOCK_DETACHED(2),
  DISPATCH_BLOCK_ASSIGN_CURRENT(4),
  DISPATCH_BLOCK_NO_QOS_CLASS(8),
  DISPATCH_BLOCK_INHERIT_QOS_CLASS(16),
  DISPATCH_BLOCK_ENFORCE_QOS_CLASS(32);

  final int value;
  const dispatch_block_flags_t(this.value);

  static dispatch_block_flags_t fromValue(int value) => switch (value) {
        1 => DISPATCH_BLOCK_BARRIER,
        2 => DISPATCH_BLOCK_DETACHED,
        4 => DISPATCH_BLOCK_ASSIGN_CURRENT,
        8 => DISPATCH_BLOCK_NO_QOS_CLASS,
        16 => DISPATCH_BLOCK_INHERIT_QOS_CLASS,
        32 => DISPATCH_BLOCK_ENFORCE_QOS_CLASS,
        _ => throw ArgumentError(
            'Unknown value for dispatch_block_flags_t: $value'),
      };
}

typedef kern_return_t = ffi.Int;
typedef Dartkern_return_t = int;
typedef mach_msg_timeout_t = natural_t;
typedef mach_msg_bits_t = ffi.UnsignedInt;
typedef Dartmach_msg_bits_t = int;
typedef mach_msg_size_t = natural_t;
typedef mach_msg_id_t = integer_t;
typedef mach_msg_priority_t = ffi.UnsignedInt;
typedef Dartmach_msg_priority_t = int;
typedef mach_msg_type_name_t = ffi.UnsignedInt;
typedef Dartmach_msg_type_name_t = int;
typedef mach_msg_copy_options_t = ffi.UnsignedInt;
typedef Dartmach_msg_copy_options_t = int;
typedef mach_msg_guard_flags_t = ffi.UnsignedInt;
typedef Dartmach_msg_guard_flags_t = int;
typedef mach_msg_descriptor_type_t = ffi.UnsignedInt;
typedef Dartmach_msg_descriptor_type_t = int;

final class mach_msg_type_descriptor_t extends ffi.Opaque {}

final class mach_msg_port_descriptor_t extends ffi.Opaque {}

final class mach_msg_ool_descriptor32_t extends ffi.Opaque {}

final class mach_msg_ool_descriptor64_t extends ffi.Opaque {}

final class mach_msg_ool_descriptor_t extends ffi.Opaque {}

final class mach_msg_ool_ports_descriptor32_t extends ffi.Opaque {}

final class mach_msg_ool_ports_descriptor64_t extends ffi.Opaque {}

final class mach_msg_ool_ports_descriptor_t extends ffi.Opaque {}

final class mach_msg_guarded_port_descriptor32_t extends ffi.Opaque {}

final class mach_msg_guarded_port_descriptor64_t extends ffi.Opaque {}

final class mach_msg_guarded_port_descriptor_t extends ffi.Opaque {}

final class mach_msg_descriptor_t extends ffi.Opaque {}

final class mach_msg_body_t extends ffi.Struct {
  @mach_msg_size_t()
  external int msgh_descriptor_count;
}

final class mach_msg_header_t extends ffi.Struct {
  @mach_msg_bits_t()
  external int msgh_bits;

  @mach_msg_size_t()
  external int msgh_size;

  @mach_port_t()
  external int msgh_remote_port;

  @mach_port_t()
  external int msgh_local_port;

  @mach_port_name_t()
  external int msgh_voucher_port;

  @mach_msg_id_t()
  external int msgh_id;
}

final class mach_msg_base_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_body_t body;
}

typedef mach_msg_trailer_type_t = ffi.UnsignedInt;
typedef Dartmach_msg_trailer_type_t = int;
typedef mach_msg_trailer_size_t = ffi.UnsignedInt;
typedef Dartmach_msg_trailer_size_t = int;
typedef mach_msg_trailer_info_t = ffi.Pointer<ffi.Char>;

final class mach_msg_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;
}

final class mach_msg_seqno_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;
}

final class security_token_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> val;
}

final class mach_msg_security_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;
}

final class audit_token_t extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedInt> val;
}

final class mach_msg_audit_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;
}

@ffi.Packed(4)
final class mach_msg_context_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;
}

final class msg_labels_t extends ffi.Struct {
  @mach_port_name_t()
  external int sender;
}

typedef mach_msg_filter_id = ffi.Int;
typedef Dartmach_msg_filter_id = int;

@ffi.Packed(4)
final class mach_msg_mac_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;

  @mach_msg_filter_id()
  external int msgh_ad;

  external msg_labels_t msgh_labels;
}

typedef mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
typedef mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
typedef mach_msg_options_t = integer_t;

final class mach_msg_empty_send_t extends ffi.Struct {
  external mach_msg_header_t header;
}

final class mach_msg_empty_rcv_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_trailer_t trailer;
}

final class mach_msg_empty_t extends ffi.Union {
  external mach_msg_empty_send_t send;

  external mach_msg_empty_rcv_t rcv;
}

typedef mach_msg_type_size_t = natural_t;
typedef mach_msg_type_number_t = natural_t;
typedef mach_msg_option_t = integer_t;
typedef mach_msg_return_t = kern_return_t;
late final _protocol_OS_dispatch_source =
    objc.getProtocol("OS_dispatch_source");

/// OS_dispatch_source
interface class OS_dispatch_source extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_source._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_source] that points to the same underlying object as [other].
  OS_dispatch_source.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_source] that wraps the given raw object pointer.
  OS_dispatch_source.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_source].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_source);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_source.cast());

  /// Builds an object that implements the OS_dispatch_source protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_source implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_source');

    builder.addProtocol($protocol);
    return OS_dispatch_source.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_source protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_source_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_source_t = objc.NSObject;

final class dispatch_source_type_s extends ffi.Opaque {}

typedef dispatch_source_type_t = ffi.Pointer<dispatch_source_type_s>;
typedef dispatch_source_mach_send_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_source_mach_send_flags_t = int;
typedef dispatch_source_mach_recv_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_source_mach_recv_flags_t = int;
typedef dispatch_source_memorypressure_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_source_memorypressure_flags_t = int;
typedef dispatch_source_proc_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_source_proc_flags_t = int;
typedef dispatch_source_vnode_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_source_vnode_flags_t = int;
typedef dispatch_source_timer_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_source_timer_flags_t = int;
late final _protocol_OS_dispatch_group = objc.getProtocol("OS_dispatch_group");

/// OS_dispatch_group
interface class OS_dispatch_group extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_group._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_group] that points to the same underlying object as [other].
  OS_dispatch_group.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_group] that wraps the given raw object pointer.
  OS_dispatch_group.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_group].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(
        obj.ref.pointer, _sel_conformsToProtocol_, _protocol_OS_dispatch_group);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_group.cast());

  /// Builds an object that implements the OS_dispatch_group protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_group implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_group');

    builder.addProtocol($protocol);
    return OS_dispatch_group.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_group protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_group_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_group_t = objc.NSObject;
late final _protocol_OS_dispatch_semaphore =
    objc.getProtocol("OS_dispatch_semaphore");

/// OS_dispatch_semaphore
interface class OS_dispatch_semaphore extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_semaphore._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_semaphore] that points to the same underlying object as [other].
  OS_dispatch_semaphore.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_semaphore] that wraps the given raw object pointer.
  OS_dispatch_semaphore.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_semaphore].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_semaphore);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_semaphore.cast());

  /// Builds an object that implements the OS_dispatch_semaphore protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_semaphore implement({bool $keepIsolateAlive = true}) {
    final builder =
        objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_semaphore');

    builder.addProtocol($protocol);
    return OS_dispatch_semaphore.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_semaphore protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_semaphore_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_semaphore_t = objc.NSObject;
typedef dispatch_once_t = ffi.IntPtr;
typedef Dartdispatch_once_t = int;
late final _protocol_OS_dispatch_data = objc.getProtocol("OS_dispatch_data");

/// OS_dispatch_data
interface class OS_dispatch_data extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_data._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_data] that points to the same underlying object as [other].
  OS_dispatch_data.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_data] that wraps the given raw object pointer.
  OS_dispatch_data.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_data].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(
        obj.ref.pointer, _sel_conformsToProtocol_, _protocol_OS_dispatch_data);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_data.cast());

  /// Builds an object that implements the OS_dispatch_data protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_data implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_data');

    builder.addProtocol($protocol);
    return OS_dispatch_data.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_data protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_data_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_data_t = objc.NSObject;

final class dispatch_data_s extends ffi.Opaque {}

bool _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        dispatch_data_t arg0,
        int arg1,
        ffi.Pointer<ffi.Void> arg2,
        int arg3) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(dispatch_data_t arg0, ffi.Size arg1,
                    ffi.Pointer<ffi.Void> arg2, ffi.Size arg3)>>()
        .asFunction<
            bool Function(dispatch_data_t, int, ffi.Pointer<ffi.Void>,
                int)>()(arg0, arg1, arg2, arg3);
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCBlockImpl>,
                    dispatch_data_t,
                    ffi.Size,
                    ffi.Pointer<ffi.Void>,
                    ffi.Size)>(
            _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_fnPtrTrampoline,
            false)
        .cast();
bool _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        dispatch_data_t arg0,
        int arg1,
        ffi.Pointer<ffi.Void> arg2,
        int arg3) =>
    (objc.getBlockClosure(block) as bool Function(dispatch_data_t, int,
        ffi.Pointer<ffi.Void>, int))(arg0, arg1, arg2, arg3);
ffi.Pointer<ffi.Void>
    _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Bool Function(
                    ffi.Pointer<objc.ObjCBlockImpl>,
                    dispatch_data_t,
                    ffi.Size,
                    ffi.Pointer<ffi.Void>,
                    ffi.Size)>(
            _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_closureTrampoline,
            false)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Bool Function(objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>`.
abstract final class ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<
          ffi.Bool Function(
              objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
              ffi.Bool Function(objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>,
                  ffi.Size)>(pointer, retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc
      .ObjCBlock<ffi.Bool Function(objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>
      fromFunctionPointer(ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(dispatch_data_t arg0, ffi.Size arg1, ffi.Pointer<ffi.Void> arg2, ffi.Size arg3)>> ptr) =>
          objc.ObjCBlock<
                  ffi.Bool Function(
                      objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>(
              objc.newPointerBlock(
                  _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_fnPtrCallable,
                  ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc
      .ObjCBlock<ffi.Bool Function(objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>
      fromFunction(bool Function(Dartdispatch_data_t, int, ffi.Pointer<ffi.Void>, int) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<ffi.Bool Function(objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>(
              objc.newClosureBlock(
                  _ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_closureCallable,
                  (dispatch_data_t arg0, int arg1, ffi.Pointer<ffi.Void> arg2,
                          int arg3) =>
                      fn(objc.NSObject.castFromPointer(arg0, retain: true, release: true), arg1, arg2, arg3),
                  keepIsolateAlive),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Bool Function(objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>`.
extension ObjCBlock_bool_dispatchdatat_ffiSize_ffiVoid_ffiSize_CallExtension
    on objc.ObjCBlock<
        ffi.Bool Function(
            objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)> {
  bool call(Dartdispatch_data_t arg0, int arg1, ffi.Pointer<ffi.Void> arg2,
          int arg3) =>
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      dispatch_data_t arg0,
                      ffi.Size arg1,
                      ffi.Pointer<ffi.Void> arg2,
                      ffi.Size arg3)>>()
          .asFunction<
              bool Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  dispatch_data_t,
                  int,
                  ffi.Pointer<ffi.Void>,
                  int)>()(ref.pointer, arg0.ref.pointer, arg1, arg2, arg3);
}

typedef dispatch_data_applier_t = ffi.Pointer<objc.ObjCBlockImpl>;
typedef Dartdispatch_data_applier_t = objc.ObjCBlock<
    ffi.Bool Function(
        objc.NSObject, ffi.Size, ffi.Pointer<ffi.Void>, ffi.Size)>;
typedef dispatch_fd_t = ffi.Int;
typedef Dartdispatch_fd_t = int;
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        dispatch_data_t arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(dispatch_data_t arg0, ffi.Int arg1)>>()
        .asFunction<void Function(dispatch_data_t, int)>()(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t, ffi.Int)>(
            _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        dispatch_data_t arg0,
        int arg1) =>
    (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
        arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t, ffi.Int)>(
            _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, dispatch_data_t arg0, int arg1) {
  (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
      arg0, arg1);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_listenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t,
                ffi.Int)>.listener(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    dispatch_data_t arg0,
    int arg1) {
  try {
    (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
        arg0, arg1);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
    ffi.Void Function(
        ffi.Pointer<objc.ObjCBlockImpl>,
        ffi.Pointer<ffi.Void>,
        dispatch_data_t,
        ffi.Int)> _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingCallable = ffi
    .NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>.isolateLocal(
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingTrampoline)
  ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingListenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>.listener(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>`.
abstract final class ObjCBlock_ffiVoid_dispatchdatat_ffiInt {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Void Function(objc.NSObject, ffi.Int)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(dispatch_data_t arg0, ffi.Int arg1)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_fnPtrCallable,
              ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)> fromFunction(
          void Function(Dartdispatch_data_t, int) fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>(
          objc.newClosureBlock(
              _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_closureCallable,
              (dispatch_data_t arg0, int arg1) => fn(
                  objc.NSObject.castFromPointer(arg0, retain: true, release: true),
                  arg1),
              keepIsolateAlive),
          retain: false,
          release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)> listener(
      void Function(Dartdispatch_data_t, int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_listenerCallable.nativeFunction
            .cast(),
        (dispatch_data_t arg0, int arg1) => fn(
            objc.NSObject.castFromPointer(arg0, retain: false, release: true),
            arg1),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_18kzm6a(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>(wrapper,
        retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)> blocking(
      void Function(Dartdispatch_data_t, int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingCallable.nativeFunction
            .cast(),
        (dispatch_data_t arg0, int arg1) => fn(
            objc.NSObject.castFromPointer(arg0, retain: false, release: true),
            arg1),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt_blockingListenerCallable
            .nativeFunction
            .cast(),
        (dispatch_data_t arg0, int arg1) => fn(
            objc.NSObject.castFromPointer(arg0, retain: false, release: true),
            arg1),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_18kzm6a(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)>`.
extension ObjCBlock_ffiVoid_dispatchdatat_ffiInt_CallExtension
    on objc.ObjCBlock<ffi.Void Function(objc.NSObject, ffi.Int)> {
  void call(Dartdispatch_data_t arg0, int arg1) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  dispatch_data_t arg0, ffi.Int arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t,
              int)>()(ref.pointer, arg0.ref.pointer, arg1);
}

void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        dispatch_data_t arg0,
        int arg1) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(dispatch_data_t arg0, ffi.Int arg1)>>()
        .asFunction<void Function(dispatch_data_t, int)>()(arg0, arg1);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t, ffi.Int)>(
            _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        dispatch_data_t arg0,
        int arg1) =>
    (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
        arg0, arg1);
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t, ffi.Int)>(
            _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, dispatch_data_t arg0, int arg1) {
  (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
      arg0, arg1);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_listenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t,
                ffi.Int)>.listener(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    dispatch_data_t arg0,
    int arg1) {
  try {
    (objc.getBlockClosure(block) as void Function(dispatch_data_t, int))(
        arg0, arg1);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>.isolateLocal(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingListenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>, dispatch_data_t, ffi.Int)>.listener(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>`.
abstract final class ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1 {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>(pointer,
              retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Void Function(objc.NSObject?, ffi.Int)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(dispatch_data_t arg0, ffi.Int arg1)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_fnPtrCallable,
              ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)> fromFunction(
          void Function(Dartdispatch_data_t?, int) fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>(
          objc.newClosureBlock(
              _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_closureCallable,
              (dispatch_data_t arg0, int arg1) => fn(
                  arg0.address == 0
                      ? null
                      : objc.NSObject.castFromPointer(arg0, retain: true, release: true),
                  arg1),
              keepIsolateAlive),
          retain: false,
          release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)> listener(
      void Function(Dartdispatch_data_t?, int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_listenerCallable
            .nativeFunction
            .cast(),
        (dispatch_data_t arg0, int arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSObject.castFromPointer(arg0,
                    retain: false, release: true),
            arg1),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_18kzm6a(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>(wrapper,
        retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)> blocking(
      void Function(Dartdispatch_data_t?, int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingCallable
            .nativeFunction
            .cast(),
        (dispatch_data_t arg0, int arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSObject.castFromPointer(arg0,
                    retain: false, release: true),
            arg1),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_blockingListenerCallable
            .nativeFunction
            .cast(),
        (dispatch_data_t arg0, int arg1) => fn(
            arg0.address == 0
                ? null
                : objc.NSObject.castFromPointer(arg0,
                    retain: false, release: true),
            arg1),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_18kzm6a(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)>`.
extension ObjCBlock_ffiVoid_dispatchdatat_ffiInt$1_CallExtension
    on objc.ObjCBlock<ffi.Void Function(objc.NSObject?, ffi.Int)> {
  void call(Dartdispatch_data_t? arg0, int arg1) => ref.pointer.ref.invoke
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                  dispatch_data_t arg0, ffi.Int arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<objc.ObjCBlockImpl>, dispatch_data_t,
              int)>()(ref.pointer, arg0?.ref.pointer ?? ffi.nullptr, arg1);
}

late final _protocol_OS_dispatch_io = objc.getProtocol("OS_dispatch_io");

/// OS_dispatch_io
interface class OS_dispatch_io extends objc.ObjCProtocolBase
    implements OS_dispatch_object {
  OS_dispatch_io._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_io] that points to the same underlying object as [other].
  OS_dispatch_io.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_io] that wraps the given raw object pointer.
  OS_dispatch_io.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_io].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(
        obj.ref.pointer, _sel_conformsToProtocol_, _protocol_OS_dispatch_io);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_io.cast());

  /// Builds an object that implements the OS_dispatch_io protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_io implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_io');

    builder.addProtocol($protocol);
    return OS_dispatch_io.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_io protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_io_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_io_t = objc.NSObject;
typedef dispatch_io_type_t = ffi.UnsignedLong;
typedef Dartdispatch_io_type_t = int;
void _ObjCBlock_ffiVoid_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
    block.ref.target
        .cast<ffi.NativeFunction<ffi.Void Function(ffi.Int arg0)>>()
        .asFunction<void Function(int)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiInt_fnPtrCallable =
    ffi.Pointer.fromFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Int)>(_ObjCBlock_ffiVoid_ffiInt_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) =>
    (objc.getBlockClosure(block) as void Function(int))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_ffiVoid_ffiInt_closureCallable =
    ffi.Pointer.fromFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Int)>(_ObjCBlock_ffiVoid_ffiInt_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_ffiInt_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block, int arg0) {
  (objc.getBlockClosure(block) as void Function(int))(arg0);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Int)>
    _ObjCBlock_ffiVoid_ffiInt_listenerCallable = ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Int)>.listener(_ObjCBlock_ffiVoid_ffiInt_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_ffiInt_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    int arg0) {
  try {
    (objc.getBlockClosure(block) as void Function(int))(arg0);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Int)>
    _ObjCBlock_ffiVoid_ffiInt_blockingCallable = ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>,
            ffi.Int)>.isolateLocal(_ObjCBlock_ffiVoid_ffiInt_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>, ffi.Int)>
    _ObjCBlock_ffiVoid_ffiInt_blockingListenerCallable = ffi.NativeCallable<
        ffi.Void Function(
            ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>,
            ffi.Int)>.listener(_ObjCBlock_ffiVoid_ffiInt_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Int)>`.
abstract final class ObjCBlock_ffiVoid_ffiInt {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int)> castFromPointer(
          ffi.Pointer<objc.ObjCBlockImpl> pointer,
          {bool retain = false,
          bool release = false}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int)>(pointer,
          retain: retain, release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int arg0)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_ffiInt_fnPtrCallable, ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int)> fromFunction(
          void Function(int) fn,
          {bool keepIsolateAlive = true}) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Int)>(
          objc.newClosureBlock(_ObjCBlock_ffiVoid_ffiInt_closureCallable,
              (int arg0) => fn(arg0), keepIsolateAlive),
          retain: false,
          release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int)> listener(
      void Function(int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiInt_listenerCallable.nativeFunction.cast(),
        (int arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_9o8504(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Int)>(wrapper,
        retain: false, release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(ffi.Int)> blocking(
      void Function(int) fn,
      {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiInt_blockingCallable.nativeFunction.cast(),
        (int arg0) => fn(arg0),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_ffiInt_blockingListenerCallable.nativeFunction
            .cast(),
        (int arg0) => fn(arg0),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_9o8504(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Int)>(wrapper,
        retain: false, release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Int)>`.
extension ObjCBlock_ffiVoid_ffiInt_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Int)> {
  void call(int arg0) => ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Int arg0)>>()
          .asFunction<void Function(ffi.Pointer<objc.ObjCBlockImpl>, int)>()(
      ref.pointer, arg0);
}

void _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        bool arg0,
        dispatch_data_t arg1,
        int arg2) =>
    block.ref.target
            .cast<
                ffi.NativeFunction<
                    ffi.Void Function(
                        ffi.Bool arg0, dispatch_data_t arg1, ffi.Int arg2)>>()
            .asFunction<void Function(bool, dispatch_data_t, int)>()(
        arg0, arg1, arg2);
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool,
                    dispatch_data_t, ffi.Int)>(
            _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_fnPtrTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block,
        bool arg0,
        dispatch_data_t arg1,
        int arg2) =>
    (objc.getBlockClosure(block) as void Function(bool, dispatch_data_t, int))(
        arg0, arg1, arg2);
ffi.Pointer<ffi.Void>
    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool,
                    dispatch_data_t, ffi.Int)>(
            _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureTrampoline)
        .cast();
void _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_listenerTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    bool arg0,
    dispatch_data_t arg1,
    int arg2) {
  (objc.getBlockClosure(block) as void Function(bool, dispatch_data_t, int))(
      arg0, arg1, arg2);
  objc.objectRelease(block.cast());
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool,
            dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_listenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>, ffi.Bool,
                dispatch_data_t, ffi.Int)>.listener(
        _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_listenerTrampoline)
      ..keepIsolateAlive = false;
void _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingTrampoline(
    ffi.Pointer<objc.ObjCBlockImpl> block,
    ffi.Pointer<ffi.Void> waiter,
    bool arg0,
    dispatch_data_t arg1,
    int arg2) {
  try {
    (objc.getBlockClosure(block) as void Function(bool, dispatch_data_t, int))(
        arg0, arg1, arg2);
  } catch (e) {
  } finally {
    objc.signalWaiter(waiter);
    objc.objectRelease(block.cast());
  }
}

ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, ffi.Bool, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingCallable = ffi
        .NativeCallable<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>,
                ffi.Bool,
                dispatch_data_t,
                ffi.Int)>.isolateLocal(
        _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingTrampoline)
      ..keepIsolateAlive = false;
ffi.NativeCallable<
        ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl>,
            ffi.Pointer<ffi.Void>, ffi.Bool, dispatch_data_t, ffi.Int)>
    _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingListenerCallable = ffi
        .NativeCallable<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCBlockImpl>,
                ffi.Pointer<ffi.Void>,
                ffi.Bool,
                dispatch_data_t,
                ffi.Int)>.listener(
        _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingTrampoline)
      ..keepIsolateAlive = false;

/// Construction methods for `objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>`.
abstract final class ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt {
  /// Returns a block that wraps the given raw block pointer.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<
      ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)> fromFunctionPointer(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0, dispatch_data_t arg1, ffi.Int arg2)>>
              ptr) =>
      objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>(
          objc.newPointerBlock(
              _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_fnPtrCallable,
              ptr.cast()),
          retain: false,
          release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>
      fromFunction(void Function(bool, Dartdispatch_data_t?, int) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>(
              objc.newClosureBlock(
                  _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_closureCallable,
                  (bool arg0, dispatch_data_t arg1, int arg2) => fn(
                      arg0,
                      arg1.address == 0 ? null : objc.NSObject.castFromPointer(arg1, retain: true, release: true),
                      arg2),
                  keepIsolateAlive),
              retain: false,
              release: true);

  /// Creates a listener block from a Dart function.
  ///
  /// This is based on FFI's NativeCallable.listener, and has the same
  /// capabilities and limitations. This block can be invoked from any thread,
  /// but only supports void functions, and is not run synchronously. See
  /// NativeCallable.listener for more details.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>
      listener(void Function(bool, Dartdispatch_data_t?, int) fn,
          {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_listenerCallable
            .nativeFunction
            .cast(),
        (bool arg0, dispatch_data_t arg1, int arg2) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSObject.castFromPointer(arg1,
                    retain: false, release: true),
            arg2),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapListenerBlock_og5b6y(raw);
    objc.objectRelease(raw.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>(
        wrapper,
        retain: false,
        release: true);
  }

  /// Creates a blocking block from a Dart function.
  ///
  /// This callback can be invoked from any native thread, and will block the
  /// caller until the callback is handled by the Dart isolate that created
  /// the block. Async functions are not supported.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC. If the owner isolate
  /// has shut down, and the block is invoked by native code, it may block
  /// indefinitely, or have other undefined behavior.
  static objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>
      blocking(void Function(bool, Dartdispatch_data_t?, int) fn,
          {bool keepIsolateAlive = true}) {
    final raw = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingCallable
            .nativeFunction
            .cast(),
        (bool arg0, dispatch_data_t arg1, int arg2) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSObject.castFromPointer(arg1,
                    retain: false, release: true),
            arg2),
        keepIsolateAlive);
    final rawListener = objc.newClosureBlock(
        _ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_blockingListenerCallable
            .nativeFunction
            .cast(),
        (bool arg0, dispatch_data_t arg1, int arg2) => fn(
            arg0,
            arg1.address == 0
                ? null
                : objc.NSObject.castFromPointer(arg1,
                    retain: false, release: true),
            arg2),
        keepIsolateAlive);
    final wrapper = _CoreGraphicsBindings_wrapBlockingBlock_og5b6y(
        raw, rawListener, objc.objCContext);
    objc.objectRelease(raw.cast());
    objc.objectRelease(rawListener.cast());
    return objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>(
        wrapper,
        retain: false,
        release: true);
  }
}

/// Call operator for `objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>`.
extension ObjCBlock_ffiVoid_bool_dispatchdatat_ffiInt_CallExtension
    on objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)> {
  void call(bool arg0, Dartdispatch_data_t? arg1, int arg2) =>
      ref.pointer.ref.invoke
              .cast<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<objc.ObjCBlockImpl> block,
                          ffi.Bool arg0, dispatch_data_t arg1, ffi.Int arg2)>>()
              .asFunction<
                  void Function(ffi.Pointer<objc.ObjCBlockImpl>, bool,
                      dispatch_data_t, int)>()(
          ref.pointer, arg0, arg1?.ref.pointer ?? ffi.nullptr, arg2);
}

typedef dispatch_io_handler_t = ffi.Pointer<objc.ObjCBlockImpl>;
typedef Dartdispatch_io_handler_t
    = objc.ObjCBlock<ffi.Void Function(ffi.Bool, objc.NSObject?, ffi.Int)>;
typedef dispatch_io_close_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_io_close_flags_t = int;
typedef dispatch_io_interval_flags_t = ffi.UnsignedLong;
typedef Dartdispatch_io_interval_flags_t = int;
late final _protocol_OS_dispatch_workloop =
    objc.getProtocol("OS_dispatch_workloop");

/// OS_dispatch_workloop
interface class OS_dispatch_workloop extends objc.ObjCProtocolBase
    implements OS_dispatch_queue {
  OS_dispatch_workloop._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super(pointer, retain: retain, release: release);

  /// Constructs a [OS_dispatch_workloop] that points to the same underlying object as [other].
  OS_dispatch_workloop.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [OS_dispatch_workloop] that wraps the given raw object pointer.
  OS_dispatch_workloop.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [OS_dispatch_workloop].
  static bool conformsTo(objc.ObjCObjectBase obj) {
    return _objc_msgSend_e3qsqz(obj.ref.pointer, _sel_conformsToProtocol_,
        _protocol_OS_dispatch_workloop);
  }

  /// Returns the [objc.Protocol] object for this protocol.
  static objc.Protocol get $protocol =>
      objc.Protocol.castFromPointer(_protocol_OS_dispatch_workloop.cast());

  /// Builds an object that implements the OS_dispatch_workloop protocol. To implement
  /// multiple protocols, use [addToBuilder] or [objc.ObjCProtocolBuilder] directly.
  ///
  /// If `$keepIsolateAlive` is true, this protocol will keep this isolate
  /// alive until it is garbage collected by both Dart and ObjC.
  static OS_dispatch_workloop implement({bool $keepIsolateAlive = true}) {
    final builder = objc.ObjCProtocolBuilder(debugName: 'OS_dispatch_workloop');

    builder.addProtocol($protocol);
    return OS_dispatch_workloop.castFrom(
        builder.build(keepIsolateAlive: $keepIsolateAlive));
  }

  /// Adds the implementation of the OS_dispatch_workloop protocol to an existing
  /// [objc.ObjCProtocolBuilder].
  ///
  /// Note: You cannot call this method after you have called `builder.build`.
  static void addToBuilder(objc.ObjCProtocolBuilder builder,
      {bool $keepIsolateAlive = true}) {
    builder.addProtocol($protocol);
  }
}

typedef dispatch_workloop_t = ffi.Pointer<objc.ObjCObject>;
typedef Dartdispatch_workloop_t = objc.NSObject;

final class CFStreamError extends ffi.Struct {
  @CFIndex()
  external int domain;

  @SInt32()
  external int error;
}

typedef CFStreamPropertyKey = CFStringRef;

enum CFStreamStatus {
  kCFStreamStatusNotOpen(0),
  kCFStreamStatusOpening(1),
  kCFStreamStatusOpen(2),
  kCFStreamStatusReading(3),
  kCFStreamStatusWriting(4),
  kCFStreamStatusAtEnd(5),
  kCFStreamStatusClosed(6),
  kCFStreamStatusError(7);

  final int value;
  const CFStreamStatus(this.value);

  static CFStreamStatus fromValue(int value) => switch (value) {
        0 => kCFStreamStatusNotOpen,
        1 => kCFStreamStatusOpening,
        2 => kCFStreamStatusOpen,
        3 => kCFStreamStatusReading,
        4 => kCFStreamStatusWriting,
        5 => kCFStreamStatusAtEnd,
        6 => kCFStreamStatusClosed,
        7 => kCFStreamStatusError,
        _ => throw ArgumentError('Unknown value for CFStreamStatus: $value'),
      };
}

enum CFStreamEventType {
  kCFStreamEventNone(0),
  kCFStreamEventOpenCompleted(1),
  kCFStreamEventHasBytesAvailable(2),
  kCFStreamEventCanAcceptBytes(4),
  kCFStreamEventErrorOccurred(8),
  kCFStreamEventEndEncountered(16);

  final int value;
  const CFStreamEventType(this.value);

  static CFStreamEventType fromValue(int value) => switch (value) {
        0 => kCFStreamEventNone,
        1 => kCFStreamEventOpenCompleted,
        2 => kCFStreamEventHasBytesAvailable,
        4 => kCFStreamEventCanAcceptBytes,
        8 => kCFStreamEventErrorOccurred,
        16 => kCFStreamEventEndEncountered,
        _ => throw ArgumentError('Unknown value for CFStreamEventType: $value'),
      };
}

final class CFStreamClientContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

final class __CFReadStream extends ffi.Opaque {}

typedef CFReadStreamRef = ffi.Pointer<__CFReadStream>;

final class __CFWriteStream extends ffi.Opaque {}

typedef CFWriteStreamRef = ffi.Pointer<__CFWriteStream>;
typedef CFReadStreamClientCallBackFunction = ffi.Void Function(
    CFReadStreamRef stream,
    CFOptionFlags type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef DartCFReadStreamClientCallBackFunction = void Function(
    CFReadStreamRef stream,
    CFStreamEventType type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef CFReadStreamClientCallBack
    = ffi.Pointer<ffi.NativeFunction<CFReadStreamClientCallBackFunction>>;
typedef CFWriteStreamClientCallBackFunction = ffi.Void Function(
    CFWriteStreamRef stream,
    CFOptionFlags type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef DartCFWriteStreamClientCallBackFunction = void Function(
    CFWriteStreamRef stream,
    CFStreamEventType type,
    ffi.Pointer<ffi.Void> clientCallBackInfo);
typedef CFWriteStreamClientCallBack
    = ffi.Pointer<ffi.NativeFunction<CFWriteStreamClientCallBackFunction>>;

enum CFStreamErrorDomain {
  kCFStreamErrorDomainCustom(-1),
  kCFStreamErrorDomainPOSIX(1),
  kCFStreamErrorDomainMacOSStatus(2);

  final int value;
  const CFStreamErrorDomain(this.value);

  static CFStreamErrorDomain fromValue(int value) => switch (value) {
        -1 => kCFStreamErrorDomainCustom,
        1 => kCFStreamErrorDomainPOSIX,
        2 => kCFStreamErrorDomainMacOSStatus,
        _ =>
          throw ArgumentError('Unknown value for CFStreamErrorDomain: $value'),
      };
}

enum CFPropertyListMutabilityOptions {
  kCFPropertyListImmutable(0),
  kCFPropertyListMutableContainers(1),
  kCFPropertyListMutableContainersAndLeaves(2);

  final int value;
  const CFPropertyListMutabilityOptions(this.value);

  static CFPropertyListMutabilityOptions fromValue(int value) =>
      switch (value) {
        0 => kCFPropertyListImmutable,
        1 => kCFPropertyListMutableContainers,
        2 => kCFPropertyListMutableContainersAndLeaves,
        _ => throw ArgumentError(
            'Unknown value for CFPropertyListMutabilityOptions: $value'),
      };
}

enum CFPropertyListFormat {
  kCFPropertyListOpenStepFormat(1),
  kCFPropertyListXMLFormat_v1_0(100),
  kCFPropertyListBinaryFormat_v1_0(200);

  final int value;
  const CFPropertyListFormat(this.value);

  static CFPropertyListFormat fromValue(int value) => switch (value) {
        1 => kCFPropertyListOpenStepFormat,
        100 => kCFPropertyListXMLFormat_v1_0,
        200 => kCFPropertyListBinaryFormat_v1_0,
        _ =>
          throw ArgumentError('Unknown value for CFPropertyListFormat: $value'),
      };
}

typedef CFSetRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFSetRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetRetainCallBackFunction>>;
typedef CFSetReleaseCallBackFunction = ffi.Void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef DartCFSetReleaseCallBackFunction = void Function(
    CFAllocatorRef allocator, ffi.Pointer<ffi.Void> value);
typedef CFSetReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetReleaseCallBackFunction>>;
typedef CFSetCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> value);
typedef CFSetCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetCopyDescriptionCallBackFunction>>;
typedef CFSetEqualCallBackFunction = Boolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef DartCFSetEqualCallBackFunction = DartBoolean Function(
    ffi.Pointer<ffi.Void> value1, ffi.Pointer<ffi.Void> value2);
typedef CFSetEqualCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetEqualCallBackFunction>>;
typedef CFSetHashCallBackFunction = CFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef DartCFSetHashCallBackFunction = DartCFHashCode Function(
    ffi.Pointer<ffi.Void> value);
typedef CFSetHashCallBack
    = ffi.Pointer<ffi.NativeFunction<CFSetHashCallBackFunction>>;

final class CFSetCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFSetRetainCallBack retain;

  external CFSetReleaseCallBack release;

  external CFSetCopyDescriptionCallBack copyDescription;

  external CFSetEqualCallBack equal;

  external CFSetHashCallBack hash;
}

typedef CFSetApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFSetApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef CFSetApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFSetApplierFunctionFunction>>;

final class __CFSet extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;
typedef CFMutableSetRef = ffi.Pointer<__CFSet>;

enum CFStringEncodings {
  kCFStringEncodingMacJapanese(1),
  kCFStringEncodingMacChineseTrad(2),
  kCFStringEncodingMacKorean(3),
  kCFStringEncodingMacArabic(4),
  kCFStringEncodingMacHebrew(5),
  kCFStringEncodingMacGreek(6),
  kCFStringEncodingMacCyrillic(7),
  kCFStringEncodingMacDevanagari(9),
  kCFStringEncodingMacGurmukhi(10),
  kCFStringEncodingMacGujarati(11),
  kCFStringEncodingMacOriya(12),
  kCFStringEncodingMacBengali(13),
  kCFStringEncodingMacTamil(14),
  kCFStringEncodingMacTelugu(15),
  kCFStringEncodingMacKannada(16),
  kCFStringEncodingMacMalayalam(17),
  kCFStringEncodingMacSinhalese(18),
  kCFStringEncodingMacBurmese(19),
  kCFStringEncodingMacKhmer(20),
  kCFStringEncodingMacThai(21),
  kCFStringEncodingMacLaotian(22),
  kCFStringEncodingMacGeorgian(23),
  kCFStringEncodingMacArmenian(24),
  kCFStringEncodingMacChineseSimp(25),
  kCFStringEncodingMacTibetan(26),
  kCFStringEncodingMacMongolian(27),
  kCFStringEncodingMacEthiopic(28),
  kCFStringEncodingMacCentralEurRoman(29),
  kCFStringEncodingMacVietnamese(30),
  kCFStringEncodingMacExtArabic(31),
  kCFStringEncodingMacSymbol(33),
  kCFStringEncodingMacDingbats(34),
  kCFStringEncodingMacTurkish(35),
  kCFStringEncodingMacCroatian(36),
  kCFStringEncodingMacIcelandic(37),
  kCFStringEncodingMacRomanian(38),
  kCFStringEncodingMacCeltic(39),
  kCFStringEncodingMacGaelic(40),
  kCFStringEncodingMacFarsi(140),
  kCFStringEncodingMacUkrainian(152),
  kCFStringEncodingMacInuit(236),
  kCFStringEncodingMacVT100(252),
  kCFStringEncodingMacHFS(255),
  kCFStringEncodingISOLatin2(514),
  kCFStringEncodingISOLatin3(515),
  kCFStringEncodingISOLatin4(516),
  kCFStringEncodingISOLatinCyrillic(517),
  kCFStringEncodingISOLatinArabic(518),
  kCFStringEncodingISOLatinGreek(519),
  kCFStringEncodingISOLatinHebrew(520),
  kCFStringEncodingISOLatin5(521),
  kCFStringEncodingISOLatin6(522),
  kCFStringEncodingISOLatinThai(523),
  kCFStringEncodingISOLatin7(525),
  kCFStringEncodingISOLatin8(526),
  kCFStringEncodingISOLatin9(527),
  kCFStringEncodingISOLatin10(528),
  kCFStringEncodingDOSLatinUS(1024),
  kCFStringEncodingDOSGreek(1029),
  kCFStringEncodingDOSBalticRim(1030),
  kCFStringEncodingDOSLatin1(1040),
  kCFStringEncodingDOSGreek1(1041),
  kCFStringEncodingDOSLatin2(1042),
  kCFStringEncodingDOSCyrillic(1043),
  kCFStringEncodingDOSTurkish(1044),
  kCFStringEncodingDOSPortuguese(1045),
  kCFStringEncodingDOSIcelandic(1046),
  kCFStringEncodingDOSHebrew(1047),
  kCFStringEncodingDOSCanadianFrench(1048),
  kCFStringEncodingDOSArabic(1049),
  kCFStringEncodingDOSNordic(1050),
  kCFStringEncodingDOSRussian(1051),
  kCFStringEncodingDOSGreek2(1052),
  kCFStringEncodingDOSThai(1053),
  kCFStringEncodingDOSJapanese(1056),
  kCFStringEncodingDOSChineseSimplif(1057),
  kCFStringEncodingDOSKorean(1058),
  kCFStringEncodingDOSChineseTrad(1059),
  kCFStringEncodingWindowsLatin2(1281),
  kCFStringEncodingWindowsCyrillic(1282),
  kCFStringEncodingWindowsGreek(1283),
  kCFStringEncodingWindowsLatin5(1284),
  kCFStringEncodingWindowsHebrew(1285),
  kCFStringEncodingWindowsArabic(1286),
  kCFStringEncodingWindowsBalticRim(1287),
  kCFStringEncodingWindowsVietnamese(1288),
  kCFStringEncodingWindowsKoreanJohab(1296),
  kCFStringEncodingANSEL(1537),
  kCFStringEncodingJIS_X0201_76(1568),
  kCFStringEncodingJIS_X0208_83(1569),
  kCFStringEncodingJIS_X0208_90(1570),
  kCFStringEncodingJIS_X0212_90(1571),
  kCFStringEncodingJIS_C6226_78(1572),
  kCFStringEncodingShiftJIS_X0213(1576),
  kCFStringEncodingShiftJIS_X0213_MenKuTen(1577),
  kCFStringEncodingGB_2312_80(1584),
  kCFStringEncodingGBK_95(1585),
  kCFStringEncodingGB_18030_2000(1586),
  kCFStringEncodingKSC_5601_87(1600),
  kCFStringEncodingKSC_5601_92_Johab(1601),
  kCFStringEncodingCNS_11643_92_P1(1617),
  kCFStringEncodingCNS_11643_92_P2(1618),
  kCFStringEncodingCNS_11643_92_P3(1619),
  kCFStringEncodingISO_2022_JP(2080),
  kCFStringEncodingISO_2022_JP_2(2081),
  kCFStringEncodingISO_2022_JP_1(2082),
  kCFStringEncodingISO_2022_JP_3(2083),
  kCFStringEncodingISO_2022_CN(2096),
  kCFStringEncodingISO_2022_CN_EXT(2097),
  kCFStringEncodingISO_2022_KR(2112),
  kCFStringEncodingEUC_JP(2336),
  kCFStringEncodingEUC_CN(2352),
  kCFStringEncodingEUC_TW(2353),
  kCFStringEncodingEUC_KR(2368),
  kCFStringEncodingShiftJIS(2561),
  kCFStringEncodingKOI8_R(2562),
  kCFStringEncodingBig5(2563),
  kCFStringEncodingMacRomanLatin1(2564),
  kCFStringEncodingHZ_GB_2312(2565),
  kCFStringEncodingBig5_HKSCS_1999(2566),
  kCFStringEncodingVISCII(2567),
  kCFStringEncodingKOI8_U(2568),
  kCFStringEncodingBig5_E(2569),
  kCFStringEncodingNextStepJapanese(2818),
  kCFStringEncodingEBCDIC_US(3073),
  kCFStringEncodingEBCDIC_CP037(3074),
  kCFStringEncodingUTF7(67109120),
  kCFStringEncodingUTF7_IMAP(2576);

  static const kCFStringEncodingShiftJIS_X0213_00 =
      kCFStringEncodingShiftJIS_X0213;

  final int value;
  const CFStringEncodings(this.value);

  static CFStringEncodings fromValue(int value) => switch (value) {
        1 => kCFStringEncodingMacJapanese,
        2 => kCFStringEncodingMacChineseTrad,
        3 => kCFStringEncodingMacKorean,
        4 => kCFStringEncodingMacArabic,
        5 => kCFStringEncodingMacHebrew,
        6 => kCFStringEncodingMacGreek,
        7 => kCFStringEncodingMacCyrillic,
        9 => kCFStringEncodingMacDevanagari,
        10 => kCFStringEncodingMacGurmukhi,
        11 => kCFStringEncodingMacGujarati,
        12 => kCFStringEncodingMacOriya,
        13 => kCFStringEncodingMacBengali,
        14 => kCFStringEncodingMacTamil,
        15 => kCFStringEncodingMacTelugu,
        16 => kCFStringEncodingMacKannada,
        17 => kCFStringEncodingMacMalayalam,
        18 => kCFStringEncodingMacSinhalese,
        19 => kCFStringEncodingMacBurmese,
        20 => kCFStringEncodingMacKhmer,
        21 => kCFStringEncodingMacThai,
        22 => kCFStringEncodingMacLaotian,
        23 => kCFStringEncodingMacGeorgian,
        24 => kCFStringEncodingMacArmenian,
        25 => kCFStringEncodingMacChineseSimp,
        26 => kCFStringEncodingMacTibetan,
        27 => kCFStringEncodingMacMongolian,
        28 => kCFStringEncodingMacEthiopic,
        29 => kCFStringEncodingMacCentralEurRoman,
        30 => kCFStringEncodingMacVietnamese,
        31 => kCFStringEncodingMacExtArabic,
        33 => kCFStringEncodingMacSymbol,
        34 => kCFStringEncodingMacDingbats,
        35 => kCFStringEncodingMacTurkish,
        36 => kCFStringEncodingMacCroatian,
        37 => kCFStringEncodingMacIcelandic,
        38 => kCFStringEncodingMacRomanian,
        39 => kCFStringEncodingMacCeltic,
        40 => kCFStringEncodingMacGaelic,
        140 => kCFStringEncodingMacFarsi,
        152 => kCFStringEncodingMacUkrainian,
        236 => kCFStringEncodingMacInuit,
        252 => kCFStringEncodingMacVT100,
        255 => kCFStringEncodingMacHFS,
        514 => kCFStringEncodingISOLatin2,
        515 => kCFStringEncodingISOLatin3,
        516 => kCFStringEncodingISOLatin4,
        517 => kCFStringEncodingISOLatinCyrillic,
        518 => kCFStringEncodingISOLatinArabic,
        519 => kCFStringEncodingISOLatinGreek,
        520 => kCFStringEncodingISOLatinHebrew,
        521 => kCFStringEncodingISOLatin5,
        522 => kCFStringEncodingISOLatin6,
        523 => kCFStringEncodingISOLatinThai,
        525 => kCFStringEncodingISOLatin7,
        526 => kCFStringEncodingISOLatin8,
        527 => kCFStringEncodingISOLatin9,
        528 => kCFStringEncodingISOLatin10,
        1024 => kCFStringEncodingDOSLatinUS,
        1029 => kCFStringEncodingDOSGreek,
        1030 => kCFStringEncodingDOSBalticRim,
        1040 => kCFStringEncodingDOSLatin1,
        1041 => kCFStringEncodingDOSGreek1,
        1042 => kCFStringEncodingDOSLatin2,
        1043 => kCFStringEncodingDOSCyrillic,
        1044 => kCFStringEncodingDOSTurkish,
        1045 => kCFStringEncodingDOSPortuguese,
        1046 => kCFStringEncodingDOSIcelandic,
        1047 => kCFStringEncodingDOSHebrew,
        1048 => kCFStringEncodingDOSCanadianFrench,
        1049 => kCFStringEncodingDOSArabic,
        1050 => kCFStringEncodingDOSNordic,
        1051 => kCFStringEncodingDOSRussian,
        1052 => kCFStringEncodingDOSGreek2,
        1053 => kCFStringEncodingDOSThai,
        1056 => kCFStringEncodingDOSJapanese,
        1057 => kCFStringEncodingDOSChineseSimplif,
        1058 => kCFStringEncodingDOSKorean,
        1059 => kCFStringEncodingDOSChineseTrad,
        1281 => kCFStringEncodingWindowsLatin2,
        1282 => kCFStringEncodingWindowsCyrillic,
        1283 => kCFStringEncodingWindowsGreek,
        1284 => kCFStringEncodingWindowsLatin5,
        1285 => kCFStringEncodingWindowsHebrew,
        1286 => kCFStringEncodingWindowsArabic,
        1287 => kCFStringEncodingWindowsBalticRim,
        1288 => kCFStringEncodingWindowsVietnamese,
        1296 => kCFStringEncodingWindowsKoreanJohab,
        1537 => kCFStringEncodingANSEL,
        1568 => kCFStringEncodingJIS_X0201_76,
        1569 => kCFStringEncodingJIS_X0208_83,
        1570 => kCFStringEncodingJIS_X0208_90,
        1571 => kCFStringEncodingJIS_X0212_90,
        1572 => kCFStringEncodingJIS_C6226_78,
        1576 => kCFStringEncodingShiftJIS_X0213,
        1577 => kCFStringEncodingShiftJIS_X0213_MenKuTen,
        1584 => kCFStringEncodingGB_2312_80,
        1585 => kCFStringEncodingGBK_95,
        1586 => kCFStringEncodingGB_18030_2000,
        1600 => kCFStringEncodingKSC_5601_87,
        1601 => kCFStringEncodingKSC_5601_92_Johab,
        1617 => kCFStringEncodingCNS_11643_92_P1,
        1618 => kCFStringEncodingCNS_11643_92_P2,
        1619 => kCFStringEncodingCNS_11643_92_P3,
        2080 => kCFStringEncodingISO_2022_JP,
        2081 => kCFStringEncodingISO_2022_JP_2,
        2082 => kCFStringEncodingISO_2022_JP_1,
        2083 => kCFStringEncodingISO_2022_JP_3,
        2096 => kCFStringEncodingISO_2022_CN,
        2097 => kCFStringEncodingISO_2022_CN_EXT,
        2112 => kCFStringEncodingISO_2022_KR,
        2336 => kCFStringEncodingEUC_JP,
        2352 => kCFStringEncodingEUC_CN,
        2353 => kCFStringEncodingEUC_TW,
        2368 => kCFStringEncodingEUC_KR,
        2561 => kCFStringEncodingShiftJIS,
        2562 => kCFStringEncodingKOI8_R,
        2563 => kCFStringEncodingBig5,
        2564 => kCFStringEncodingMacRomanLatin1,
        2565 => kCFStringEncodingHZ_GB_2312,
        2566 => kCFStringEncodingBig5_HKSCS_1999,
        2567 => kCFStringEncodingVISCII,
        2568 => kCFStringEncodingKOI8_U,
        2569 => kCFStringEncodingBig5_E,
        2818 => kCFStringEncodingNextStepJapanese,
        3073 => kCFStringEncodingEBCDIC_US,
        3074 => kCFStringEncodingEBCDIC_CP037,
        67109120 => kCFStringEncodingUTF7,
        2576 => kCFStringEncodingUTF7_IMAP,
        _ => throw ArgumentError('Unknown value for CFStringEncodings: $value'),
      };

  @override
  String toString() {
    if (this == kCFStringEncodingShiftJIS_X0213)
      return "CFStringEncodings.kCFStringEncodingShiftJIS_X0213, CFStringEncodings.kCFStringEncodingShiftJIS_X0213_00";
    return super.toString();
  }
}

typedef CFTreeRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFTreeRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFTreeRetainCallBackFunction>>;
typedef CFTreeReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFTreeReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFTreeReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFTreeReleaseCallBackFunction>>;
typedef CFTreeCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);
typedef CFTreeCopyDescriptionCallBack
    = ffi.Pointer<ffi.NativeFunction<CFTreeCopyDescriptionCallBackFunction>>;

final class CFTreeContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFTreeRetainCallBack retain;

  external CFTreeReleaseCallBack release;

  external CFTreeCopyDescriptionCallBack copyDescription;
}

typedef CFTreeApplierFunctionFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef DartCFTreeApplierFunctionFunction = void Function(
    ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Void> context);
typedef CFTreeApplierFunction
    = ffi.Pointer<ffi.NativeFunction<CFTreeApplierFunctionFunction>>;

final class __CFTree extends ffi.Opaque {}

typedef CFTreeRef = ffi.Pointer<__CFTree>;

enum CFURLError {
  kCFURLUnknownError(-10),
  kCFURLUnknownSchemeError(-11),
  kCFURLResourceNotFoundError(-12),
  kCFURLResourceAccessViolationError(-13),
  kCFURLRemoteHostUnavailableError(-14),
  kCFURLImproperArgumentsError(-15),
  kCFURLUnknownPropertyKeyError(-16),
  kCFURLPropertyKeyUnavailableError(-17),
  kCFURLTimeoutError(-18);

  final int value;
  const CFURLError(this.value);

  static CFURLError fromValue(int value) => switch (value) {
        -10 => kCFURLUnknownError,
        -11 => kCFURLUnknownSchemeError,
        -12 => kCFURLResourceNotFoundError,
        -13 => kCFURLResourceAccessViolationError,
        -14 => kCFURLRemoteHostUnavailableError,
        -15 => kCFURLImproperArgumentsError,
        -16 => kCFURLUnknownPropertyKeyError,
        -17 => kCFURLPropertyKeyUnavailableError,
        -18 => kCFURLTimeoutError,
        _ => throw ArgumentError('Unknown value for CFURLError: $value'),
      };
}

final class __CFUUID extends ffi.Opaque {}

typedef CFUUIDRef = ffi.Pointer<__CFUUID>;

final class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef cpu_type_t = integer_t;
typedef cpu_subtype_t = integer_t;
typedef cpu_threadtype_t = integer_t;

final class __CFBundle extends ffi.Opaque {}

typedef CFBundleRef = ffi.Pointer<__CFBundle>;
typedef CFPlugInRef = ffi.Pointer<__CFBundle>;
typedef CFBundleRefNum = ffi.Int;
typedef DartCFBundleRefNum = int;

final class __CFMessagePort extends ffi.Opaque {}

typedef CFMessagePortRef = ffi.Pointer<__CFMessagePort>;

final class CFMessagePortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFMessagePortCallBackFunction = CFDataRef Function(
    CFMessagePortRef local,
    SInt32 msgid,
    CFDataRef data,
    ffi.Pointer<ffi.Void> info);
typedef DartCFMessagePortCallBackFunction = CFDataRef Function(
    CFMessagePortRef local,
    DartSInt32 msgid,
    CFDataRef data,
    ffi.Pointer<ffi.Void> info);
typedef CFMessagePortCallBack
    = ffi.Pointer<ffi.NativeFunction<CFMessagePortCallBackFunction>>;
typedef CFMessagePortInvalidationCallBackFunction = ffi.Void Function(
    CFMessagePortRef ms, ffi.Pointer<ffi.Void> info);
typedef DartCFMessagePortInvalidationCallBackFunction = void Function(
    CFMessagePortRef ms, ffi.Pointer<ffi.Void> info);
typedef CFMessagePortInvalidationCallBack = ffi
    .Pointer<ffi.NativeFunction<CFMessagePortInvalidationCallBackFunction>>;
typedef CFPlugInDynamicRegisterFunctionFunction = ffi.Void Function(
    CFPlugInRef plugIn);
typedef DartCFPlugInDynamicRegisterFunctionFunction = void Function(
    CFPlugInRef plugIn);
typedef CFPlugInDynamicRegisterFunction
    = ffi.Pointer<ffi.NativeFunction<CFPlugInDynamicRegisterFunctionFunction>>;
typedef CFPlugInUnloadFunctionFunction = ffi.Void Function(CFPlugInRef plugIn);
typedef DartCFPlugInUnloadFunctionFunction = void Function(CFPlugInRef plugIn);
typedef CFPlugInUnloadFunction
    = ffi.Pointer<ffi.NativeFunction<CFPlugInUnloadFunctionFunction>>;
typedef CFPlugInFactoryFunctionFunction = ffi.Pointer<ffi.Void> Function(
    CFAllocatorRef allocator, CFUUIDRef typeUUID);
typedef CFPlugInFactoryFunction
    = ffi.Pointer<ffi.NativeFunction<CFPlugInFactoryFunctionFunction>>;

final class __CFPlugInInstance extends ffi.Opaque {}

typedef CFPlugInInstanceRef = ffi.Pointer<__CFPlugInInstance>;
typedef CFPlugInInstanceGetInterfaceFunctionFunction = Boolean Function(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl);
typedef DartCFPlugInInstanceGetInterfaceFunctionFunction = DartBoolean Function(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl);
typedef CFPlugInInstanceGetInterfaceFunction = ffi
    .Pointer<ffi.NativeFunction<CFPlugInInstanceGetInterfaceFunctionFunction>>;
typedef CFPlugInInstanceDeallocateInstanceDataFunctionFunction = ffi.Void
    Function(ffi.Pointer<ffi.Void> instanceData);
typedef DartCFPlugInInstanceDeallocateInstanceDataFunctionFunction = void
    Function(ffi.Pointer<ffi.Void> instanceData);
typedef CFPlugInInstanceDeallocateInstanceDataFunction = ffi.Pointer<
    ffi.NativeFunction<CFPlugInInstanceDeallocateInstanceDataFunctionFunction>>;

final class __CFMachPort extends ffi.Opaque {}

typedef CFMachPortRef = ffi.Pointer<__CFMachPort>;

final class CFMachPortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

typedef CFMachPortCallBackFunction = ffi.Void Function(CFMachPortRef port,
    ffi.Pointer<ffi.Void> msg, CFIndex size, ffi.Pointer<ffi.Void> info);
typedef DartCFMachPortCallBackFunction = void Function(CFMachPortRef port,
    ffi.Pointer<ffi.Void> msg, DartCFIndex size, ffi.Pointer<ffi.Void> info);
typedef CFMachPortCallBack
    = ffi.Pointer<ffi.NativeFunction<CFMachPortCallBackFunction>>;
typedef CFMachPortInvalidationCallBackFunction = ffi.Void Function(
    CFMachPortRef port, ffi.Pointer<ffi.Void> info);
typedef DartCFMachPortInvalidationCallBackFunction = void Function(
    CFMachPortRef port, ffi.Pointer<ffi.Void> info);
typedef CFMachPortInvalidationCallBack
    = ffi.Pointer<ffi.NativeFunction<CFMachPortInvalidationCallBackFunction>>;

final class __CFAttributedString extends ffi.Opaque {}

typedef CFAttributedStringRef = ffi.Pointer<__CFAttributedString>;
typedef CFMutableAttributedStringRef = ffi.Pointer<__CFAttributedString>;

final class __CFURLEnumerator extends ffi.Opaque {}

typedef CFURLEnumeratorRef = ffi.Pointer<__CFURLEnumerator>;

enum CFURLEnumeratorOptions {
  kCFURLEnumeratorDefaultBehavior(0),
  kCFURLEnumeratorDescendRecursively(1),
  kCFURLEnumeratorSkipInvisibles(2),
  kCFURLEnumeratorGenerateFileReferenceURLs(4),
  kCFURLEnumeratorSkipPackageContents(8),
  kCFURLEnumeratorIncludeDirectoriesPreOrder(16),
  kCFURLEnumeratorIncludeDirectoriesPostOrder(32),
  kCFURLEnumeratorGenerateRelativePathURLs(64);

  final int value;
  const CFURLEnumeratorOptions(this.value);

  static CFURLEnumeratorOptions fromValue(int value) => switch (value) {
        0 => kCFURLEnumeratorDefaultBehavior,
        1 => kCFURLEnumeratorDescendRecursively,
        2 => kCFURLEnumeratorSkipInvisibles,
        4 => kCFURLEnumeratorGenerateFileReferenceURLs,
        8 => kCFURLEnumeratorSkipPackageContents,
        16 => kCFURLEnumeratorIncludeDirectoriesPreOrder,
        32 => kCFURLEnumeratorIncludeDirectoriesPostOrder,
        64 => kCFURLEnumeratorGenerateRelativePathURLs,
        _ => throw ArgumentError(
            'Unknown value for CFURLEnumeratorOptions: $value'),
      };
}

enum CFURLEnumeratorResult {
  kCFURLEnumeratorSuccess(1),
  kCFURLEnumeratorEnd(2),
  kCFURLEnumeratorError(3),
  kCFURLEnumeratorDirectoryPostOrderSuccess(4);

  final int value;
  const CFURLEnumeratorResult(this.value);

  static CFURLEnumeratorResult fromValue(int value) => switch (value) {
        1 => kCFURLEnumeratorSuccess,
        2 => kCFURLEnumeratorEnd,
        3 => kCFURLEnumeratorError,
        4 => kCFURLEnumeratorDirectoryPostOrderSuccess,
        _ => throw ArgumentError(
            'Unknown value for CFURLEnumeratorResult: $value'),
      };
}

final class guid_t extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> g_guid;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> g_guid_asint;
}

@ffi.Packed(1)
final class ntsid_t extends ffi.Struct {
  @u_int8_t()
  external int sid_kind;

  @u_int8_t()
  external int sid_authcount;

  @ffi.Array.multi([6])
  external ffi.Array<u_int8_t> sid_authority;

  @ffi.Array.multi([16])
  external ffi.Array<u_int32_t> sid_authorities;
}

final class kauth_identity_extlookup extends ffi.Struct {
  @u_int32_t()
  external int el_seqno;

  @u_int32_t()
  external int el_result;

  @u_int32_t()
  external int el_flags;

  @__darwin_pid_t()
  external int el_info_pid;

  @u_int64_t()
  external int el_extend;

  @u_int32_t()
  external int el_info_reserved_1;

  @uid_t()
  external int el_uid;

  external guid_t el_uguid;

  @u_int32_t()
  external int el_uguid_valid;

  external ntsid_t el_usid;

  @u_int32_t()
  external int el_usid_valid;

  @gid_t()
  external int el_gid;

  external guid_t el_gguid;

  @u_int32_t()
  external int el_gguid_valid;

  external ntsid_t el_gsid;

  @u_int32_t()
  external int el_gsid_valid;

  @u_int32_t()
  external int el_member_valid;

  @u_int32_t()
  external int el_sup_grp_cnt;

  @ffi.Array.multi([16])
  external ffi.Array<gid_t> el_sup_groups;
}

final class kauth_cache_sizes extends ffi.Struct {
  @u_int32_t()
  external int kcs_group_size;

  @u_int32_t()
  external int kcs_id_size;
}

typedef kauth_ace_rights_t = u_int32_t;

final class kauth_ace extends ffi.Struct {
  external guid_t ace_applicable;

  @u_int32_t()
  external int ace_flags;

  @kauth_ace_rights_t()
  external int ace_rights;
}

typedef kauth_ace_t = ffi.Pointer<kauth_ace>;

final class kauth_acl extends ffi.Struct {
  @u_int32_t()
  external int acl_entrycount;

  @u_int32_t()
  external int acl_flags;

  @ffi.Array.multi([1])
  external ffi.Array<kauth_ace> acl_ace;
}

typedef kauth_acl_t = ffi.Pointer<kauth_acl>;

final class kauth_filesec extends ffi.Struct {
  @u_int32_t()
  external int fsec_magic;

  external guid_t fsec_owner;

  external guid_t fsec_group;

  external kauth_acl fsec_acl;
}

typedef kauth_filesec_t = ffi.Pointer<kauth_filesec>;

enum acl_perm_t {
  ACL_READ_DATA(2),
  ACL_WRITE_DATA(4),
  ACL_EXECUTE(8),
  ACL_DELETE(16),
  ACL_APPEND_DATA(32),
  ACL_DELETE_CHILD(64),
  ACL_READ_ATTRIBUTES(128),
  ACL_WRITE_ATTRIBUTES(256),
  ACL_READ_EXTATTRIBUTES(512),
  ACL_WRITE_EXTATTRIBUTES(1024),
  ACL_READ_SECURITY(2048),
  ACL_WRITE_SECURITY(4096),
  ACL_CHANGE_OWNER(8192),
  ACL_SYNCHRONIZE(1048576);

  static const ACL_LIST_DIRECTORY = ACL_READ_DATA;
  static const ACL_ADD_FILE = ACL_WRITE_DATA;
  static const ACL_SEARCH = ACL_EXECUTE;
  static const ACL_ADD_SUBDIRECTORY = ACL_APPEND_DATA;

  final int value;
  const acl_perm_t(this.value);

  static acl_perm_t fromValue(int value) => switch (value) {
        2 => ACL_READ_DATA,
        4 => ACL_WRITE_DATA,
        8 => ACL_EXECUTE,
        16 => ACL_DELETE,
        32 => ACL_APPEND_DATA,
        64 => ACL_DELETE_CHILD,
        128 => ACL_READ_ATTRIBUTES,
        256 => ACL_WRITE_ATTRIBUTES,
        512 => ACL_READ_EXTATTRIBUTES,
        1024 => ACL_WRITE_EXTATTRIBUTES,
        2048 => ACL_READ_SECURITY,
        4096 => ACL_WRITE_SECURITY,
        8192 => ACL_CHANGE_OWNER,
        1048576 => ACL_SYNCHRONIZE,
        _ => throw ArgumentError('Unknown value for acl_perm_t: $value'),
      };

  @override
  String toString() {
    if (this == ACL_READ_DATA)
      return "acl_perm_t.ACL_READ_DATA, acl_perm_t.ACL_LIST_DIRECTORY";
    if (this == ACL_WRITE_DATA)
      return "acl_perm_t.ACL_WRITE_DATA, acl_perm_t.ACL_ADD_FILE";
    if (this == ACL_EXECUTE)
      return "acl_perm_t.ACL_EXECUTE, acl_perm_t.ACL_SEARCH";
    if (this == ACL_APPEND_DATA)
      return "acl_perm_t.ACL_APPEND_DATA, acl_perm_t.ACL_ADD_SUBDIRECTORY";
    return super.toString();
  }
}

enum acl_tag_t {
  ACL_UNDEFINED_TAG(0),
  ACL_EXTENDED_ALLOW(1),
  ACL_EXTENDED_DENY(2);

  final int value;
  const acl_tag_t(this.value);

  static acl_tag_t fromValue(int value) => switch (value) {
        0 => ACL_UNDEFINED_TAG,
        1 => ACL_EXTENDED_ALLOW,
        2 => ACL_EXTENDED_DENY,
        _ => throw ArgumentError('Unknown value for acl_tag_t: $value'),
      };
}

enum acl_type_t {
  ACL_TYPE_EXTENDED(256),
  ACL_TYPE_ACCESS(0),
  ACL_TYPE_DEFAULT(1),
  ACL_TYPE_AFS(2),
  ACL_TYPE_CODA(3),
  ACL_TYPE_NTFS(4),
  ACL_TYPE_NWFS(5);

  final int value;
  const acl_type_t(this.value);

  static acl_type_t fromValue(int value) => switch (value) {
        256 => ACL_TYPE_EXTENDED,
        0 => ACL_TYPE_ACCESS,
        1 => ACL_TYPE_DEFAULT,
        2 => ACL_TYPE_AFS,
        3 => ACL_TYPE_CODA,
        4 => ACL_TYPE_NTFS,
        5 => ACL_TYPE_NWFS,
        _ => throw ArgumentError('Unknown value for acl_type_t: $value'),
      };
}

enum acl_entry_id_t {
  ACL_FIRST_ENTRY(0),
  ACL_NEXT_ENTRY(-1),
  ACL_LAST_ENTRY(-2);

  final int value;
  const acl_entry_id_t(this.value);

  static acl_entry_id_t fromValue(int value) => switch (value) {
        0 => ACL_FIRST_ENTRY,
        -1 => ACL_NEXT_ENTRY,
        -2 => ACL_LAST_ENTRY,
        _ => throw ArgumentError('Unknown value for acl_entry_id_t: $value'),
      };
}

enum acl_flag_t {
  ACL_FLAG_DEFER_INHERIT(1),
  ACL_FLAG_NO_INHERIT(131072),
  ACL_ENTRY_INHERITED(16),
  ACL_ENTRY_FILE_INHERIT(32),
  ACL_ENTRY_DIRECTORY_INHERIT(64),
  ACL_ENTRY_LIMIT_INHERIT(128),
  ACL_ENTRY_ONLY_INHERIT(256);

  final int value;
  const acl_flag_t(this.value);

  static acl_flag_t fromValue(int value) => switch (value) {
        1 => ACL_FLAG_DEFER_INHERIT,
        131072 => ACL_FLAG_NO_INHERIT,
        16 => ACL_ENTRY_INHERITED,
        32 => ACL_ENTRY_FILE_INHERIT,
        64 => ACL_ENTRY_DIRECTORY_INHERIT,
        128 => ACL_ENTRY_LIMIT_INHERIT,
        256 => ACL_ENTRY_ONLY_INHERIT,
        _ => throw ArgumentError('Unknown value for acl_flag_t: $value'),
      };
}

final class _acl extends ffi.Opaque {}

final class _acl_entry extends ffi.Opaque {}

final class _acl_permset extends ffi.Opaque {}

final class _acl_flagset extends ffi.Opaque {}

typedef acl_t = ffi.Pointer<_acl>;
typedef acl_entry_t = ffi.Pointer<_acl_entry>;
typedef acl_permset_t = ffi.Pointer<_acl_permset>;
typedef acl_flagset_t = ffi.Pointer<_acl_flagset>;
typedef acl_permset_mask_t = u_int64_t;

final class __CFFileSecurity extends ffi.Opaque {}

typedef CFFileSecurityRef = ffi.Pointer<__CFFileSecurity>;

enum CFFileSecurityClearOptions {
  kCFFileSecurityClearOwner(1),
  kCFFileSecurityClearGroup(2),
  kCFFileSecurityClearMode(4),
  kCFFileSecurityClearOwnerUUID(8),
  kCFFileSecurityClearGroupUUID(16),
  kCFFileSecurityClearAccessControlList(32);

  final int value;
  const CFFileSecurityClearOptions(this.value);

  static CFFileSecurityClearOptions fromValue(int value) => switch (value) {
        1 => kCFFileSecurityClearOwner,
        2 => kCFFileSecurityClearGroup,
        4 => kCFFileSecurityClearMode,
        8 => kCFFileSecurityClearOwnerUUID,
        16 => kCFFileSecurityClearGroupUUID,
        32 => kCFFileSecurityClearAccessControlList,
        _ => throw ArgumentError(
            'Unknown value for CFFileSecurityClearOptions: $value'),
      };
}

final class __CFStringTokenizer extends ffi.Opaque {}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;

enum CFStringTokenizerTokenType {
  kCFStringTokenizerTokenNone(0),
  kCFStringTokenizerTokenNormal(1),
  kCFStringTokenizerTokenHasSubTokensMask(2),
  kCFStringTokenizerTokenHasDerivedSubTokensMask(4),
  kCFStringTokenizerTokenHasHasNumbersMask(8),
  kCFStringTokenizerTokenHasNonLettersMask(16),
  kCFStringTokenizerTokenIsCJWordMask(32);

  final int value;
  const CFStringTokenizerTokenType(this.value);

  static CFStringTokenizerTokenType fromValue(int value) => switch (value) {
        0 => kCFStringTokenizerTokenNone,
        1 => kCFStringTokenizerTokenNormal,
        2 => kCFStringTokenizerTokenHasSubTokensMask,
        4 => kCFStringTokenizerTokenHasDerivedSubTokensMask,
        8 => kCFStringTokenizerTokenHasHasNumbersMask,
        16 => kCFStringTokenizerTokenHasNonLettersMask,
        32 => kCFStringTokenizerTokenIsCJWordMask,
        _ => throw ArgumentError(
            'Unknown value for CFStringTokenizerTokenType: $value'),
      };
}

typedef CFFileDescriptorNativeDescriptor = ffi.Int;
typedef DartCFFileDescriptorNativeDescriptor = int;

final class __CFFileDescriptor extends ffi.Opaque {}

typedef CFFileDescriptorRef = ffi.Pointer<__CFFileDescriptor>;
typedef CFFileDescriptorCallBackFunction = ffi.Void Function(
    CFFileDescriptorRef f,
    CFOptionFlags callBackTypes,
    ffi.Pointer<ffi.Void> info);
typedef DartCFFileDescriptorCallBackFunction = void Function(
    CFFileDescriptorRef f,
    DartCFOptionFlags callBackTypes,
    ffi.Pointer<ffi.Void> info);
typedef CFFileDescriptorCallBack
    = ffi.Pointer<ffi.NativeFunction<CFFileDescriptorCallBackFunction>>;

final class CFFileDescriptorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> info)>> retain;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> info)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void> info)>>
      copyDescription;
}

final class __CFUserNotification extends ffi.Opaque {}

typedef CFUserNotificationRef = ffi.Pointer<__CFUserNotification>;
typedef CFUserNotificationCallBackFunction = ffi.Void Function(
    CFUserNotificationRef userNotification, CFOptionFlags responseFlags);
typedef DartCFUserNotificationCallBackFunction = void Function(
    CFUserNotificationRef userNotification, DartCFOptionFlags responseFlags);
typedef CFUserNotificationCallBack
    = ffi.Pointer<ffi.NativeFunction<CFUserNotificationCallBackFunction>>;

final class __CFXMLNode extends ffi.Opaque {}

typedef CFXMLNodeRef = ffi.Pointer<__CFXMLNode>;
typedef CFXMLTreeRef = CFTreeRef;

enum CFXMLNodeTypeCode {
  kCFXMLNodeTypeDocument(1),
  kCFXMLNodeTypeElement(2),
  kCFXMLNodeTypeAttribute(3),
  kCFXMLNodeTypeProcessingInstruction(4),
  kCFXMLNodeTypeComment(5),
  kCFXMLNodeTypeText(6),
  kCFXMLNodeTypeCDATASection(7),
  kCFXMLNodeTypeDocumentFragment(8),
  kCFXMLNodeTypeEntity(9),
  kCFXMLNodeTypeEntityReference(10),
  kCFXMLNodeTypeDocumentType(11),
  kCFXMLNodeTypeWhitespace(12),
  kCFXMLNodeTypeNotation(13),
  kCFXMLNodeTypeElementTypeDeclaration(14),
  kCFXMLNodeTypeAttributeListDeclaration(15);

  final int value;
  const CFXMLNodeTypeCode(this.value);

  static CFXMLNodeTypeCode fromValue(int value) => switch (value) {
        1 => kCFXMLNodeTypeDocument,
        2 => kCFXMLNodeTypeElement,
        3 => kCFXMLNodeTypeAttribute,
        4 => kCFXMLNodeTypeProcessingInstruction,
        5 => kCFXMLNodeTypeComment,
        6 => kCFXMLNodeTypeText,
        7 => kCFXMLNodeTypeCDATASection,
        8 => kCFXMLNodeTypeDocumentFragment,
        9 => kCFXMLNodeTypeEntity,
        10 => kCFXMLNodeTypeEntityReference,
        11 => kCFXMLNodeTypeDocumentType,
        12 => kCFXMLNodeTypeWhitespace,
        13 => kCFXMLNodeTypeNotation,
        14 => kCFXMLNodeTypeElementTypeDeclaration,
        15 => kCFXMLNodeTypeAttributeListDeclaration,
        _ => throw ArgumentError('Unknown value for CFXMLNodeTypeCode: $value'),
      };
}

final class CFXMLElementInfo extends ffi.Struct {
  external CFDictionaryRef attributes;

  external CFArrayRef attributeOrder;

  @Boolean()
  external int isEmpty;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Char> _reserved;
}

final class CFXMLProcessingInstructionInfo extends ffi.Struct {
  external CFStringRef dataString;
}

final class CFXMLDocumentInfo extends ffi.Struct {
  external CFURLRef sourceURL;

  @CFStringEncoding()
  external int encoding;
}

final class CFXMLExternalID extends ffi.Struct {
  external CFURLRef systemID;

  external CFStringRef publicID;
}

final class CFXMLDocumentTypeInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

final class CFXMLNotationInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

final class CFXMLElementTypeDeclarationInfo extends ffi.Struct {
  external CFStringRef contentDescription;
}

final class CFXMLAttributeDeclarationInfo extends ffi.Struct {
  external CFStringRef attributeName;

  external CFStringRef typeString;

  external CFStringRef defaultString;
}

final class CFXMLAttributeListDeclarationInfo extends ffi.Struct {
  @CFIndex()
  external int numberOfAttributes;

  external ffi.Pointer<CFXMLAttributeDeclarationInfo> attributes;
}

enum CFXMLEntityTypeCode {
  kCFXMLEntityTypeParameter(0),
  kCFXMLEntityTypeParsedInternal(1),
  kCFXMLEntityTypeParsedExternal(2),
  kCFXMLEntityTypeUnparsed(3),
  kCFXMLEntityTypeCharacter(4);

  final int value;
  const CFXMLEntityTypeCode(this.value);

  static CFXMLEntityTypeCode fromValue(int value) => switch (value) {
        0 => kCFXMLEntityTypeParameter,
        1 => kCFXMLEntityTypeParsedInternal,
        2 => kCFXMLEntityTypeParsedExternal,
        3 => kCFXMLEntityTypeUnparsed,
        4 => kCFXMLEntityTypeCharacter,
        _ =>
          throw ArgumentError('Unknown value for CFXMLEntityTypeCode: $value'),
      };
}

final class CFXMLEntityInfo extends ffi.Struct {
  @CFIndex()
  external int entityTypeAsInt;

  CFXMLEntityTypeCode get entityType =>
      CFXMLEntityTypeCode.fromValue(entityTypeAsInt);

  external CFStringRef replacementText;

  external CFXMLExternalID entityID;

  external CFStringRef notationName;
}

final class CFXMLEntityReferenceInfo extends ffi.Struct {
  @CFIndex()
  external int entityTypeAsInt;

  CFXMLEntityTypeCode get entityType =>
      CFXMLEntityTypeCode.fromValue(entityTypeAsInt);
}

final class __CFXMLParser extends ffi.Opaque {}

typedef CFXMLParserRef = ffi.Pointer<__CFXMLParser>;

enum CFXMLParserOptions {
  kCFXMLParserValidateDocument(1),
  kCFXMLParserSkipMetaData(2),
  kCFXMLParserReplacePhysicalEntities(4),
  kCFXMLParserSkipWhitespace(8),
  kCFXMLParserResolveExternalEntities(16),
  kCFXMLParserAddImpliedAttributes(32),
  kCFXMLParserAllOptions(16777215),
  kCFXMLParserNoOptions(0);

  final int value;
  const CFXMLParserOptions(this.value);

  static CFXMLParserOptions fromValue(int value) => switch (value) {
        1 => kCFXMLParserValidateDocument,
        2 => kCFXMLParserSkipMetaData,
        4 => kCFXMLParserReplacePhysicalEntities,
        8 => kCFXMLParserSkipWhitespace,
        16 => kCFXMLParserResolveExternalEntities,
        32 => kCFXMLParserAddImpliedAttributes,
        16777215 => kCFXMLParserAllOptions,
        0 => kCFXMLParserNoOptions,
        _ =>
          throw ArgumentError('Unknown value for CFXMLParserOptions: $value'),
      };
}

enum CFXMLParserStatusCode {
  kCFXMLStatusParseNotBegun(-2),
  kCFXMLStatusParseInProgress(-1),
  kCFXMLStatusParseSuccessful(0),
  kCFXMLErrorUnexpectedEOF(1),
  kCFXMLErrorUnknownEncoding(2),
  kCFXMLErrorEncodingConversionFailure(3),
  kCFXMLErrorMalformedProcessingInstruction(4),
  kCFXMLErrorMalformedDTD(5),
  kCFXMLErrorMalformedName(6),
  kCFXMLErrorMalformedCDSect(7),
  kCFXMLErrorMalformedCloseTag(8),
  kCFXMLErrorMalformedStartTag(9),
  kCFXMLErrorMalformedDocument(10),
  kCFXMLErrorElementlessDocument(11),
  kCFXMLErrorMalformedComment(12),
  kCFXMLErrorMalformedCharacterReference(13),
  kCFXMLErrorMalformedParsedCharacterData(14),
  kCFXMLErrorNoData(15);

  final int value;
  const CFXMLParserStatusCode(this.value);

  static CFXMLParserStatusCode fromValue(int value) => switch (value) {
        -2 => kCFXMLStatusParseNotBegun,
        -1 => kCFXMLStatusParseInProgress,
        0 => kCFXMLStatusParseSuccessful,
        1 => kCFXMLErrorUnexpectedEOF,
        2 => kCFXMLErrorUnknownEncoding,
        3 => kCFXMLErrorEncodingConversionFailure,
        4 => kCFXMLErrorMalformedProcessingInstruction,
        5 => kCFXMLErrorMalformedDTD,
        6 => kCFXMLErrorMalformedName,
        7 => kCFXMLErrorMalformedCDSect,
        8 => kCFXMLErrorMalformedCloseTag,
        9 => kCFXMLErrorMalformedStartTag,
        10 => kCFXMLErrorMalformedDocument,
        11 => kCFXMLErrorElementlessDocument,
        12 => kCFXMLErrorMalformedComment,
        13 => kCFXMLErrorMalformedCharacterReference,
        14 => kCFXMLErrorMalformedParsedCharacterData,
        15 => kCFXMLErrorNoData,
        _ => throw ArgumentError(
            'Unknown value for CFXMLParserStatusCode: $value'),
      };
}

typedef CFXMLParserCreateXMLStructureCallBackFunction
    = ffi.Pointer<ffi.Void> Function(CFXMLParserRef parser,
        CFXMLNodeRef nodeDesc, ffi.Pointer<ffi.Void> info);
typedef CFXMLParserCreateXMLStructureCallBack = ffi
    .Pointer<ffi.NativeFunction<CFXMLParserCreateXMLStructureCallBackFunction>>;
typedef CFXMLParserAddChildCallBackFunction = ffi.Void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> parent,
    ffi.Pointer<ffi.Void> child,
    ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserAddChildCallBackFunction = void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> parent,
    ffi.Pointer<ffi.Void> child,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserAddChildCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserAddChildCallBackFunction>>;
typedef CFXMLParserEndXMLStructureCallBackFunction = ffi.Void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> xmlType,
    ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserEndXMLStructureCallBackFunction = void Function(
    CFXMLParserRef parser,
    ffi.Pointer<ffi.Void> xmlType,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserEndXMLStructureCallBack = ffi
    .Pointer<ffi.NativeFunction<CFXMLParserEndXMLStructureCallBackFunction>>;
typedef CFXMLParserResolveExternalEntityCallBackFunction = CFDataRef Function(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLExternalID> extID,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserResolveExternalEntityCallBack = ffi.Pointer<
    ffi.NativeFunction<CFXMLParserResolveExternalEntityCallBackFunction>>;
typedef CFXMLParserHandleErrorCallBackFunction = Boolean Function(
    CFXMLParserRef parser, CFIndex error, ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserHandleErrorCallBackFunction = DartBoolean Function(
    CFXMLParserRef parser,
    CFXMLParserStatusCode error,
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserHandleErrorCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserHandleErrorCallBackFunction>>;

final class CFXMLParserCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFXMLParserCreateXMLStructureCallBack createXMLStructure;

  external CFXMLParserAddChildCallBack addChild;

  external CFXMLParserEndXMLStructureCallBack endXMLStructure;

  external CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;

  external CFXMLParserHandleErrorCallBack handleError;
}

typedef CFXMLParserRetainCallBackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserRetainCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserRetainCallBackFunction>>;
typedef CFXMLParserReleaseCallBackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCFXMLParserReleaseCallBackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<CFXMLParserReleaseCallBackFunction>>;
typedef CFXMLParserCopyDescriptionCallBackFunction = CFStringRef Function(
    ffi.Pointer<ffi.Void> info);
typedef CFXMLParserCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFXMLParserCopyDescriptionCallBackFunction>>;

final class CFXMLParserContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFXMLParserRetainCallBack retain;

  external CFXMLParserReleaseCallBack release;

  external CFXMLParserCopyDescriptionCallBack copyDescription;
}

final class CGColorDataFormat extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  external CFTypeRef colorspace_info;

  @ffi.Uint32()
  external int bitmap_infoAsInt;

  CGBitmapInfo get bitmap_info => CGBitmapInfo.fromValue(bitmap_infoAsInt);

  @ffi.Size()
  external int bits_per_component;

  @ffi.Size()
  external int bytes_per_row;

  @ffi.Int32()
  external int intentAsInt;

  CGColorRenderingIntent get intent =>
      CGColorRenderingIntent.fromValue(intentAsInt);

  external ffi.Pointer<CGFloat> decode;
}

final class CGDataConsumer extends ffi.Opaque {}

typedef CGDataConsumerRef = ffi.Pointer<CGDataConsumer>;
typedef CGDataConsumerPutBytesCallbackFunction = ffi.Size Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> buffer, ffi.Size count);
typedef DartCGDataConsumerPutBytesCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> info, ffi.Pointer<ffi.Void> buffer, int count);
typedef CGDataConsumerPutBytesCallback
    = ffi.Pointer<ffi.NativeFunction<CGDataConsumerPutBytesCallbackFunction>>;
typedef CGDataConsumerReleaseInfoCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> info);
typedef DartCGDataConsumerReleaseInfoCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> info);
typedef CGDataConsumerReleaseInfoCallback = ffi
    .Pointer<ffi.NativeFunction<CGDataConsumerReleaseInfoCallbackFunction>>;

final class CGDataConsumerCallbacks extends ffi.Struct {
  external CGDataConsumerPutBytesCallback putBytes;

  external CGDataConsumerReleaseInfoCallback releaseConsumer;
}

enum CGError {
  kCGErrorSuccess(0),
  kCGErrorFailure(1000),
  kCGErrorIllegalArgument(1001),
  kCGErrorInvalidConnection(1002),
  kCGErrorInvalidContext(1003),
  kCGErrorCannotComplete(1004),
  kCGErrorNotImplemented(1006),
  kCGErrorRangeCheck(1007),
  kCGErrorTypeCheck(1008),
  kCGErrorInvalidOperation(1010),
  kCGErrorNoneAvailable(1011);

  final int value;
  const CGError(this.value);

  static CGError fromValue(int value) => switch (value) {
        0 => kCGErrorSuccess,
        1000 => kCGErrorFailure,
        1001 => kCGErrorIllegalArgument,
        1002 => kCGErrorInvalidConnection,
        1003 => kCGErrorInvalidContext,
        1004 => kCGErrorCannotComplete,
        1006 => kCGErrorNotImplemented,
        1007 => kCGErrorRangeCheck,
        1008 => kCGErrorTypeCheck,
        1010 => kCGErrorInvalidOperation,
        1011 => kCGErrorNoneAvailable,
        _ => throw ArgumentError('Unknown value for CGError: $value'),
      };
}

typedef CGErrorCallbackFunction = ffi.Void Function();
typedef DartCGErrorCallbackFunction = void Function();
typedef CGErrorCallback
    = ffi.Pointer<ffi.NativeFunction<CGErrorCallbackFunction>>;

final class CGLayer extends ffi.Opaque {}

typedef CGLayerRef = ffi.Pointer<CGLayer>;

final class CGPDFContentStream extends ffi.Opaque {}

typedef CGPDFContentStreamRef = ffi.Pointer<CGPDFContentStream>;

enum CGPDFTagType {
  CGPDFTagTypeDocument(100),
  CGPDFTagTypePart(101),
  CGPDFTagTypeArt(102),
  CGPDFTagTypeSection(103),
  CGPDFTagTypeDiv(104),
  CGPDFTagTypeBlockQuote(105),
  CGPDFTagTypeCaption(106),
  CGPDFTagTypeTOC(107),
  CGPDFTagTypeTOCI(108),
  CGPDFTagTypeIndex(109),
  CGPDFTagTypeNonStructure(110),
  CGPDFTagTypePrivate(111),
  CGPDFTagTypeParagraph(200),
  CGPDFTagTypeHeader(201),
  CGPDFTagTypeHeader1(202),
  CGPDFTagTypeHeader2(203),
  CGPDFTagTypeHeader3(204),
  CGPDFTagTypeHeader4(205),
  CGPDFTagTypeHeader5(206),
  CGPDFTagTypeHeader6(207),
  CGPDFTagTypeList(300),
  CGPDFTagTypeListItem(301),
  CGPDFTagTypeLabel(302),
  CGPDFTagTypeListBody(303),
  CGPDFTagTypeTable(400),
  CGPDFTagTypeTableRow(401),
  CGPDFTagTypeTableHeaderCell(402),
  CGPDFTagTypeTableDataCell(403),
  CGPDFTagTypeTableHeader(404),
  CGPDFTagTypeTableBody(405),
  CGPDFTagTypeTableFooter(406),
  CGPDFTagTypeSpan(500),
  CGPDFTagTypeQuote(501),
  CGPDFTagTypeNote(502),
  CGPDFTagTypeReference(503),
  CGPDFTagTypeBibliography(504),
  CGPDFTagTypeCode(505),
  CGPDFTagTypeLink(506),
  CGPDFTagTypeAnnotation(507),
  CGPDFTagTypeRuby(600),
  CGPDFTagTypeRubyBaseText(601),
  CGPDFTagTypeRubyAnnotationText(602),
  CGPDFTagTypeRubyPunctuation(603),
  CGPDFTagTypeWarichu(604),
  CGPDFTagTypeWarichuText(605),
  CGPDFTagTypeWarichuPunctiation(606),
  CGPDFTagTypeFigure(700),
  CGPDFTagTypeFormula(701),
  CGPDFTagTypeForm(702),
  CGPDFTagTypeObject(800);

  final int value;
  const CGPDFTagType(this.value);

  static CGPDFTagType fromValue(int value) => switch (value) {
        100 => CGPDFTagTypeDocument,
        101 => CGPDFTagTypePart,
        102 => CGPDFTagTypeArt,
        103 => CGPDFTagTypeSection,
        104 => CGPDFTagTypeDiv,
        105 => CGPDFTagTypeBlockQuote,
        106 => CGPDFTagTypeCaption,
        107 => CGPDFTagTypeTOC,
        108 => CGPDFTagTypeTOCI,
        109 => CGPDFTagTypeIndex,
        110 => CGPDFTagTypeNonStructure,
        111 => CGPDFTagTypePrivate,
        200 => CGPDFTagTypeParagraph,
        201 => CGPDFTagTypeHeader,
        202 => CGPDFTagTypeHeader1,
        203 => CGPDFTagTypeHeader2,
        204 => CGPDFTagTypeHeader3,
        205 => CGPDFTagTypeHeader4,
        206 => CGPDFTagTypeHeader5,
        207 => CGPDFTagTypeHeader6,
        300 => CGPDFTagTypeList,
        301 => CGPDFTagTypeListItem,
        302 => CGPDFTagTypeLabel,
        303 => CGPDFTagTypeListBody,
        400 => CGPDFTagTypeTable,
        401 => CGPDFTagTypeTableRow,
        402 => CGPDFTagTypeTableHeaderCell,
        403 => CGPDFTagTypeTableDataCell,
        404 => CGPDFTagTypeTableHeader,
        405 => CGPDFTagTypeTableBody,
        406 => CGPDFTagTypeTableFooter,
        500 => CGPDFTagTypeSpan,
        501 => CGPDFTagTypeQuote,
        502 => CGPDFTagTypeNote,
        503 => CGPDFTagTypeReference,
        504 => CGPDFTagTypeBibliography,
        505 => CGPDFTagTypeCode,
        506 => CGPDFTagTypeLink,
        507 => CGPDFTagTypeAnnotation,
        600 => CGPDFTagTypeRuby,
        601 => CGPDFTagTypeRubyBaseText,
        602 => CGPDFTagTypeRubyAnnotationText,
        603 => CGPDFTagTypeRubyPunctuation,
        604 => CGPDFTagTypeWarichu,
        605 => CGPDFTagTypeWarichuText,
        606 => CGPDFTagTypeWarichuPunctiation,
        700 => CGPDFTagTypeFigure,
        701 => CGPDFTagTypeFormula,
        702 => CGPDFTagTypeForm,
        800 => CGPDFTagTypeObject,
        _ => throw ArgumentError('Unknown value for CGPDFTagType: $value'),
      };
}

typedef CGPDFTagProperty = CFStringRef;

final class CGPDFOperatorTable extends ffi.Opaque {}

typedef CGPDFOperatorTableRef = ffi.Pointer<CGPDFOperatorTable>;

final class CGPDFScanner extends ffi.Opaque {}

typedef CGPDFScannerRef = ffi.Pointer<CGPDFScanner>;
typedef CGPDFOperatorCallbackFunction = ffi.Void Function(
    CGPDFScannerRef scanner, ffi.Pointer<ffi.Void> info);
typedef DartCGPDFOperatorCallbackFunction = void Function(
    CGPDFScannerRef scanner, ffi.Pointer<ffi.Void> info);
typedef CGPDFOperatorCallback
    = ffi.Pointer<ffi.NativeFunction<CGPDFOperatorCallbackFunction>>;
typedef CGImageRef$1 = ffi.Pointer<CGImage>;

const int noErr = 0;

const int kNilOptions = 0;

const int kVariableLengthArray = 1;

const int kUnknownType = 1061109567;

const int normal = 0;

const int bold = 1;

const int italic = 2;

const int underline = 4;

const int outline = 8;

const int shadow = 16;

const int condense = 32;

const int extend = 64;

const int developStage = 32;

const int alphaStage = 64;

const int betaStage = 96;

const int finalStage = 128;

const int kCFNotificationDeliverImmediately = 1;

const int kCFNotificationPostToAllSessions = 2;

const int OSUnknownByteOrder = 0;

const int OSLittleEndian = 1;

const int OSBigEndian = 2;

const int kCFCalendarComponentsWrap = 1;

const int kCFSocketAutomaticallyReenableReadCallBack = 1;

const int kCFSocketAutomaticallyReenableAcceptCallBack = 2;

const int kCFSocketAutomaticallyReenableDataCallBack = 3;

const int kCFSocketAutomaticallyReenableWriteCallBack = 8;

const int kCFSocketLeaveErrors = 64;

const int kCFSocketCloseOnInvalidate = 128;

const int DISPATCH_WALLTIME_NOW = -2;

const int kCFPropertyListReadCorruptError = 3840;

const int kCFPropertyListReadUnknownVersionError = 3841;

const int kCFPropertyListReadStreamError = 3842;

const int kCFPropertyListWriteStreamError = 3851;

const int kCFBundleExecutableArchitectureI386 = 7;

const int kCFBundleExecutableArchitecturePPC = 18;

const int kCFBundleExecutableArchitectureX86_64 = 16777223;

const int kCFBundleExecutableArchitecturePPC64 = 16777234;

const int kCFBundleExecutableArchitectureARM64 = 16777228;

const int kCFMessagePortSuccess = 0;

const int kCFMessagePortSendTimeout = -1;

const int kCFMessagePortReceiveTimeout = -2;

const int kCFMessagePortIsInvalid = -3;

const int kCFMessagePortTransportError = -4;

const int kCFMessagePortBecameInvalidError = -5;

const int kCFStringTokenizerUnitWord = 0;

const int kCFStringTokenizerUnitSentence = 1;

const int kCFStringTokenizerUnitParagraph = 2;

const int kCFStringTokenizerUnitLineBreak = 3;

const int kCFStringTokenizerUnitWordBoundary = 4;

const int kCFStringTokenizerAttributeLatinTranscription = 65536;

const int kCFStringTokenizerAttributeLanguage = 131072;

const int kCFFileDescriptorReadCallBack = 1;

const int kCFFileDescriptorWriteCallBack = 2;

const int kCFUserNotificationStopAlertLevel = 0;

const int kCFUserNotificationNoteAlertLevel = 1;

const int kCFUserNotificationCautionAlertLevel = 2;

const int kCFUserNotificationPlainAlertLevel = 3;

const int kCFUserNotificationDefaultResponse = 0;

const int kCFUserNotificationAlternateResponse = 1;

const int kCFUserNotificationOtherResponse = 2;

const int kCFUserNotificationCancelResponse = 3;

const int kCFUserNotificationNoDefaultButtonFlag = 32;

const int kCFUserNotificationUseRadioButtonsFlag = 64;

const int kCFXMLNodeCurrentVersion = 1;

const int noErr$1 = 0;

const int kNilOptions$1 = 0;

const int kVariableLengthArray$1 = 1;

const int kUnknownType$1 = 1061109567;

const int normal$1 = 0;

const int bold$1 = 1;

const int italic$1 = 2;

const int underline$1 = 4;

const int outline$1 = 8;

const int shadow$1 = 16;

const int condense$1 = 32;

const int extend$1 = 64;

const int developStage$1 = 32;

const int alphaStage$1 = 64;

const int betaStage$1 = 96;

const int finalStage$1 = 128;

const int kCFNotificationDeliverImmediately$1 = 1;

const int kCFNotificationPostToAllSessions$1 = 2;

const int noErr$2 = 0;

const int kNilOptions$2 = 0;

const int kVariableLengthArray$2 = 1;

const int kUnknownType$2 = 1061109567;

const int normal$2 = 0;

const int bold$2 = 1;

const int italic$2 = 2;

const int underline$2 = 4;

const int outline$2 = 8;

const int shadow$2 = 16;

const int condense$2 = 32;

const int extend$2 = 64;

const int developStage$2 = 32;

const int alphaStage$2 = 64;

const int betaStage$2 = 96;

const int finalStage$2 = 128;

const int true$ = 1;

const int false$ = 0;

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;
